





                              1. Введение

     В настоящее время в стране  усиливается  понимание  необходимости
компьютеризации науки, производства, управления  народным  хозяйством.
Вследствие этого резко увеличивается производство персональных  ЭВМ  и
микроконтроллеров. Численность  пользователей  вычислительной  техники
также неуклонно возрастает.

     В соответствии с расширением сферы  применения  микропроцессорной
техники возникает потребность в разработке новых программных  средств.
Их разработка и верификация требует значительных интелектуальных  зат-
рат и диктует необходимость создания автоматизированных систем отладки
как аппаратурных, так и программных средств микропроцессорной техники.

     Процесс отладки на программном уровне состоит из трех этапов:

       - тестирования программ с целью обнаружения ошибок;

       - локализации (обнаружения первопричины ошибки);

       - исправление ошибки.

     Для тестирования и локализации необходимо выполнить  отлаживаемую
программу. Выполнение программы предполагает наличие вычислителя (про-
цессора и памяти) и внешней среды (внешних устройств и  абонентов),  с
которой обменивается информацией  программа.  Любая  из  перечисленных
частей может быть заменена своей моделью (аппаратурной  или  программ-
ной). Основной вопрос при использовании моделей - это вопрос об  адек-
ватности реальной аппаратуре.

     Программная модель вычислителя (кросс  -  средства)  обеспечивает
хорошие возможности для  автономной  отладки  и  оценки  характеристик
программы (время выполнения,  частота  появления  отдельных  команд  и
пр.), однако обладает большим замедлением, что делает невозможным про-
гон программы на достаточно больших участках реальной работы.

     Использование аппаратурных моделей целесообразно  при  отсутствии
реальных устройств и для обеспечения тех возможностей, которые аппара-
турой проэктируемой системы  не  обеспечиваются.  Аппаратурная  модель
вычислителя на базе мекропроцессора, обладающая  теми  же  свойствами,
что и вычислитель отлаживаемой системы, но отличающаяся большей наблю-
даемостью и управляемостью, т. е. обеспечивающая  возможность  отладки
программ, называется внутрисхемным эмулятором (ВСЭ). При использовании
в ВСЭ реального микропроцессора и соответсвующих характеристиках памя-
ти ВСЭ можно утверждать, что ВСЭ является адекватной моделью реального
вычислителя, причем эта модель пригодна  для  отладки  программ  любых
изделий, выполненных на базе указанного микропроцессора,  и  обеспечи-
вает все необходимые средства для управления микропроцессорной системы
на программном уровне.

     Иначе обстоит дело с моделированием внешней среды, где разработка
аппаратурных моделей внешних устройств оправдана толко  для  устройств
связи со стандарной перефирией. Если же речь идет о  связи  с  нестан-
дартными абонентами (другая вычислительная  система,  датчики,  органы
управления), которые разрабатываются параллельно с отладкой  программ,
то в качестве абонентов могут исползоваться только программные модели,
которые естественно стыковать с программными же моделями внешеих  уст-
ройств.


                                 - 2 -




     Таким образом, наиболее целесообразным при  создании  комаплексов
отладки программ является исползование аппаратурной модели вычислителя
и программных моделей внешней среды. В дальнейшем под  штатными  прог-
раммами будем понимать программы, для отладки которых создается  комп-
лекс, под программами моделей - вспомогательные программы,  моделирую-
шие внешнюю среду штатных программ.

     Следует подчеркнуть, что возможность управлять исполнением  прог-
раммы (задание  исходных  данных,  остановы  выполнения  программы  по
заданным условиям) существенно облегчает локализацию ошибки, переводит
задачу локализации из области искусства, доступного только  высококва-
лифицированному специалисту, в  область  ремесла,  легко  осваиваемого
рядовым программистом.



                     2. Методика отладки программ

     Переходя к рассмотрению  методики  отладки  программ,  необходимо
заметить, что отладка сложных программных комплексов подразделяется на
два этапа:

       - автономнаю отладку программ, входящих в программный комплекс;

       - комплексную отладку программного комаплекса.

     Нет необходтмости проведения автономной отладки программ на отла-
дочном комплексе. Она может быть проведена разработчиком программы  на
своем рабочем месте с помощью символного отладчика. Рассмотреный  ниже
отладчик позволяющего вести автоматическое  тестирование  программы  и
имеет возможность (правда на не высоком уровне) моделировать обращения
к внешней среде отлаживаемой программы.

     Комплексную отладку сложного  программного  комплекса  необходимо
проводить на отладочном комплексе, специальное прогаммное  обеспечение
которого построено на базе указанного символьного отладчика.

     Таким образом  рассмотрим  сначала  возможности,  предоставляемые
символьным отладчиком, а затем, в кратце, дополнительные  возможности,
предоставляемые ползователю средсвами отладочных комплексов с  исполь-
зованием  внутрисхемных   эмуляторов   микропроцессоров   серии   1801
(К1801ВМ1, К1801ВМ2, Н1806ВМ2, К1801ВМ3).



               3. Символьный отладчик для языка MACRO-11

     В  процессе  разработки  программ  проектировщики,   естественно,
допускают много ошибок, причем в сложных системах на  устранение  этих
ошибок (отладку) уходит основная  часть  времени  и  трудоемкости  (до
60-70%).  Этим  определяется  значимость  создания  мощных  и  удобных
средств отладки программ. Минимальный набор средств для отладки  прог-
рамм должен обеспечивать возможность отображения и изменения  значений
программно-доступных об'ектов, а также запуска программ в автоматичес-
ком и пошаговом режимах и останова исполнения программы  при  заданных
значениях счетчика команд. Такие  возможности  обеспечиваются  пультом
управления ЭВМ или пультовым отладчиком. Отладка  программ  с  помощью
указанных средств настолько утомительна и трудоемка, что в состав опе-
рационных систем ОС РВ, РАФОС, ФОДОС, ОС ДВК  входят  отладчики  (ODT,

                                 - 3 -




TODT), включающие несколько более широкий набор функций, а  главное  -
реализующие указанные функции в более удобной форме.  Основным  недос-
татком штатных отладчиков является ориентация на машинные коды,  а  не
на язык ассемблера. В настоящее время описан отладчик ODT/X  с  расши-
ренным  набором  отладочных  функций.  Недостатком  данного  отладчика
является невозможность использования символьных  меток.  Необходимость
работы с адресами вынуждает пользователя постоянно обращаться  к  лис-
тингу программы для определения адреса нужной переменной или  команды,
на что уходит значительная часть времени при отладке.

     Цель настоящей лекции - описание символьного отладчика,  предназ-
наченного для отладки программ в терминах языка ассемблера.  Описывае-
мый отладчик функционирует под управлением операционных  систем  РАФОС
(в том числе под TS-монитором), ФОДОС, ОС ДВК. На базе этого отладчика
разработаны средства отладки для языка ФОРТРАН-IV и программное  обес-
печение комплекса отладки микропроцессорных систем "Электроника  НЦ  -
803", комплекса отладки программ "Электроника МС0404" .

                  3.1. Подготовка программ к отладке

     Большинство отладочных функций требует задания адресов для  иден-
тификации элементов данных или программ, на которые производится ссыл-
ка. Достоинством описываемого отладчика является возможность использо-
ванния как адресов, так и символьных имен и  меток  (идентификаторов),
определенных в исходном тексте программы на языке ассемблера.

     Для обеспечения возможности работы с  именами  в  технологическую
цепочку подготовки программы к исполнению включена процедура  формиро-
вания таблицы имен, которая по листингам и  карте  загрузки  программы
формирует 3 файла таблицы имен: файл оверлейных сегментов,  файл  имен
об'ектных модулей и файл имен переменных.  Для  неоверлейных  программ
файл оверлейных сегментов не формируется.

     Собственно отладчик поставляется либо в виде отдельной  программы
(для TS - монитора или SJ - монитора при об'еме  памяти  не  менее  96
Кбайт), либо в виде об'ектной  библиотеки,  компонуемой  с  программой
пользователя. Командный файл для  компоновки  формируется  специальной
программой генерации отладчика, которая  включает  в  отладчик  только
указанные пользователем возможности, что  позволяет  найти  компромисс
между возможностями отладчика и об'емом программы.

                   3.2. Описание отладочных функций

     С целью обеспечения максимальной простоты диалога  с  отладчиком,
отладочные функции запускаются одно- и двухсимвольными командами. Наи-
более часто используемые команды являются  односимвольными.  Параметры
команд (числа, имена) могут редактироваться  символами  <ЗБ>  (стереть
последний символ) и СУ/U (стереть весь параметр). Для указания  отлад-
чику имени файлов таблицы имен (имена файлов различаются только расши-
рением) необходимо использовать команду "NL<имя файла>", после которой
допустимы обращения ко всем именам, включенным в файл имен переменных.
Ввод имени  переменной  должен  начинаться  с  команды  "L"  (например
L.$END, LSTART). Если в различных программах  используются  одинаковые
имена переменных, то для  доступа  к  нужной  переменной  используется
команда "L<имя программы>,", которая настраивает отладчик на работу  с
таблицей имен указанной программы.

     Основные команды отладчика приведены в таблице 1. В угловых скоб-
ках указаны параметры  команд.  Параметры,  заключенные  в  квадратные

                                 - 4 -




скобки, являются необязательными или имеют значение по умолчанию. Сим-
волом "*" помечены команды, которые могут быть включены или не включе-
ны в отладчик на этапе компоновки отлаживаемой программы  с  библиоте-
кой. Во всех командах в качестве  параметров  <адрес>  или  <значение>
может использоваться имя.

                           Команды отладчика

                                                          Таблица 1
---------------------------------------------------------------------------
      Синтаксис команды  !         Отладочная  функция
---------------------------------------------------------------------------
    [<адрес>;]G          ! Запуск программы с <адреса>
    [<адрес>;]P          ! Выполнить 1 команду с <адреса>
    [<адрес>;<N>]B       ! Задать точку останова по <адресу> с номером <N>
    ;[<N>]B              ! Удалить точку останова с номером <N>.
                         ! Если <N> не указан, то удалить все точки
                         ! останова
    TB                   ! Просмотр таблицы точек останова по  счетчику
                         ! команд
*   [<адрес>;<N>]W       ! Установить точку останова с номером <N>
                         ! по изменению байта с <адресом>
*   ;[<N>]W              ! Удалить точку останова с номером <N>.
                         ! Если <N> не указан, то удалить все точки
                         ! останова
*    TW                  ! Просмотр таблицы точек останонва по изменению
                         ! байта
    [<адрес>]/           ! Открыть слово с <адресом>
    [<адрес>]\           ! Открыть байт с <адресом>
    [<значение>]<ПС>     ! Изменить содержимое открытого адреса
                         ! и открыть следующий адрес
    [<значение>]^        ! Изменить содержимое открытого адреса
                         ! и открыть предыдущий адрес
    [<значение>]<ВК>     ! Изменить содержимое открытого адреса
                         ! и закрыть адрес
    [<значение>]@        ! Изменнить содержимое открытого слова
                         ! и открыть слово по абсолютному адресу
    [<адрес>;][<K>]D     ! Дизассемблировать <К> команд, начиная
                         ! с <адреса>. По умолчанию <К>=1
    [<адрес>;]<K>A       ! Показать и изменить <К> байт памяти,
                         ! начиная с <адреса>, в формате ASCII
    FX[<значение>]       ! Показать и изменить значение слова
                         ! в формате RADIX-50
*   FI[<значение>]       ! Показать и изменить значение слова
                         ! в формате целого десятичного числа одинарной
                         ! точности
*   FJ[<значение>]       ! Показать и изменить значение 2-х слов
                         ! в формате целого десятичного числа двойной
                         ! точности
*   FE[<значение>]       ! Показать и изменить значение 2-х слов
                         ! в формате десятичного числа с плавающей запятой
                         ! одинарной точности
*   FD[<значение>]       ! Показать и изменить значение 4-х слов
                         ! в формате десятичного числа с плавающей запятой
                         ! двойной точности
*   NC[<метка>;]<файл>   ! Запустить командный <файл>, начиная
                         ! с <метки>. По умочанию - с начала <файла>
*   %                    ! Признак приостановки командного файла
*   !                    ! Признак комментария в командном файле

                                      - 5 -




*   ^P                   ! Пошаговое исполнение командного файла
*   ^G                   ! Автоматическое исполнение командного файла
*   [<0>]NP<файл>        ! Включить режим протоколирования всей
                         ! информации, отображаемой на экране, в <файл>.
*   <1>NP<файл>          ! Включить режим протоколирования информации,
                         ! вводимой с клавиатуры терминала, в <файл>
*   ;NP                  ! Завершить протоколирование
*   [<адрес>;]SA         ! Включить режим записи в память, начиная
                         ! с <адреса>, команд, вводимых в мнемоническом коде
*   <адр1>;<адр2>MB      ! Установить границы области памяти
*   ;MA                  ! Определить текстовый аргумент поиска
*   MA                   ! Поиск текста в установленных границах
*   <аргумент>;<маска>MD ! Поиск битового <аргумента> по <маске> в
                         ! установленных граниицах
*   <адрес>;MP           ! Поиск обращений к <адресу> в установленных
                         ! границах
*   [<блок>]MS<файл>     ! Перепись области памяти в установленных границах
                         ! в <файл>, начиная с указанного <блока>.
                         ! Если <блок> не указан, то в новый файл
*   [<блок>]ML<файл>     ! Перепись <файла>, начиная с <блока>
                         ! в память в установленных границах. По умолчанию
                         !<блок>=0
*   [<K>]MF              ! Отформатировать область памяти в установленных
                         ! границах <К> первыми байтами этой области. По
                         ! умолчанию <К>=2
    [<адрес>;]TA         ! Определить положение <адреса> в программе
                         ! (показать метку, ближайшую к <адресу>,
                         ! смещиние от метки к <адресу>,  имя
                         ! программы, где определена метка и номер сегмента
*   NA<файл>             ! Включение режима доступа на диск
*   NO<файл>             ! Включение режима отладки оверлейных программ
-----------------------------------------------------------------------------

     Следует дополнительно сказать несколько слов  командах  отладчика
"NA" и "NO".

     Команда "NA" обеспечивает доступ к любой программе, расположенной
на внешнем носителе. Таким образом, отладчик заменяет собой  системную
программу PATCH. Кроме того данная команда обеспечивает доступ ко все-
му внешнему носителю,  что  позволило,  в  сочетании  с  исползованием
средств управления тестированием и отладкой,описанными ниже, восстано-
вить информацию на запорченных носителях .

     Команда "NO" позволяет вести полноценную отладку оверлейных прог-
рамм, с доступом и установкой точек останова в нерезидентных  оверлей-
ных сегментах, а также обеспечивает доступ к любой оверлейной програм-
ме, расположенной на внешнем носителе.

     Пример использования отладчика, в котором осуществляется  измене-
ние оверлейной программы и данных на диске и проводится отладка  прог-
раммы. Символом "!" выделены комментарии. Адреса, соответствующие име-
нам, печатаются отладчиком.

#!ВКЛЮЧИТЬ РЕЖИМ ДОСТУПА НА ДИСК К ОВЕРЛЕЙНОЙ ПРОГРАММЕ DTO
#NO
 ВВЕДИТЕ ИМЯ ФАЙЛА :DTO
 ДОСТУП НА ДИСК? (Y/N)[N]Y
 ОВЕРЛЕЙНЫЙ ДОСТУП НА ДИСК
#!ВКЛЮЧИТЬ РЕЖИМ ПРОТОКОЛИРОВАНИЯ В ФАЙЛ DK:PROT.TXT

                                      - 6 -




#NP
ИМЯ ФАЙЛА ПРОТОКОЛА :PROT.TXT
>!НАСТРОИТЬСЯ НА 1-Й ОВЕРЛЕЙНЫЙ СЕГМЕНТ ПО НОМЕРУ
>1OS
>!ИЗМЕНИТЬ СОДЕРЖИМОЕ  БАЙТА С АДРЕСОМ .$SEG1+15
>L.$SEG1:110574 +15\060 =0 61
>!ПЕРЕКЛЮЧИТЬСЯ В РЕЖИМ ОТЛАДКИ ОВЕРЛЕЙНОЙ ПРОГРАММЫ
>OO
 ОВЕРЛЕЙНЫЙ ДОСТУП
>!ДИЗАССЕМБЛИРОВАТЬ 2 КОМАНДЫ И ЗАДАТЬ ОСТАНОВ В 1-М ОВЕРЛЕЙНОМ СЕГМЕНТЕ
>110532 ;2D
110532  012700  000010          STO1  : MOV      #000010     R0
110536  012701  000011                  MOV      #000011     R1         >B
>!НАСТРОИТЬСЯ НА 2-Й ОВЕРЛЕЙНЫЙ СЕГМЕНТ ПО ИМЕНИ ПРОГРАММЫ
>LOS2,
>!ЗАМЕНИТЬ КОМАНДУ С МЕТКОЙ STO2
>LSTO2:110620 ;SA
       110620:MOV #20,R0^Z
>!УСТАНОВИТЬ ТОЧКУ ОСТАНОВА ПО АДРЕСУ 110620
>LSTO2:110620;B
>!НАСТРОИТЬСЯ НА КОРНЕВОЙ СЕГМЕНТ ПО ИМЕНИ ПРОГРАММЫ
>LOS0,
>!ИЗМЕНИТЬ СОДЕРЖИМОЕ РЕГИСТРА R6
>R6/       000000 1000
>!ВЫПОЛНИТЬ 1 КОМАНДУ С МЕТКИ STO0
>LSTO0:110444 ;P>
         PC     R0     R1     R2     R3     R4     R5     SP   N Z V C
       110450 000000 000000 000000 000000 000000 000000 001000 0 1 0 0
----------------------------------------------------------------------
110450  012701  000001                  MOV      #000001     R1         >
>!ПУСК ПРОГРАММЫ С ТЕКУЩЕГО АДРЕСА
>G>>
B:000 001
         PC     R0     R1     R2     R3     R4     R5     SP   N Z V C
       110536 000010 000001 000002 000003 000004 000005 001000 0 0 0 0
----------------------------------------------------------------------
110536  012701  000011                  MOV      #000011     R1         >
>!ОТРАБОТАЛА 0-Я ТОЧКА ОСТАНОВА. ОСТАНОВ В 1-М ОВЕРЛЕЙНОМ СЕГМЕНТЕ
>!ОПЕРЕДЕЛИТЬ ПОЛОЖЕНИЕ АДРЕСА ОСТАНОВА В ПРОГРАММЕ
>!(ПОКАЗАТЬ БЛИЖАЙШУЮ МЕТКУ, СМЕЩЕНИЕ ОТ ЭТОЙ МЕТКИ К АДРЕСУ,
>!ИМЯ ПРОГРАММЫ, В КОТОРОЙ ОПРЕДЕЛЕНА МЕТКА, И НОМЕР СЕГМЕНТА)
>110536;TA=ST01  +000004 OS1    001
>!ПРОДОЛЖЕНИЕ ВЫПОЛНЕНИЯ ПРОГРАММЫ
>G>>
B:001 002
         PC     R0     R1     R2     R3     R4     R5     SP   N Z V C
       110624 000020 000011 000012 000013 000014 000015 001000 0 0 0 0
----------------------------------------------------------------------
110624  012701  000021                  MOV      #000021     R1         >
>!ОТРАБОТАЛА 1-Я ТОЧКА ОСТАНОВА. ОСТАНОВ ВО 2-М ОВЕРЛЕЙНОМ СЕГМЕНТЕ
>!ПОКАЗАТЬ ИНФОРМАЦИЮ ОБ ОВЕРЛЕЙНЫХ СЕГМЕНТАХ
>TO
СЕГМ.   АДРЕС   В. АДР. РАЗМЕР  БЛОК
000     000000  110526
001     110530  110614  000066  000111 ; РЕЗИДЕНТ
002     110616  110700  000064  000112 ; РЕЗИДЕНТ ; НАСТРОЕН
-       110700  -
>!ВЫКЛЮЧИТЬ РЕЖИМ ОТЛАДКИ ОВЕРЛЕЙНОЙ ПРОГРАММЫ И ЗАВЕРШИТЬ ПРОТОКОЛИРОВАНИЕ
>;NO

                                      - 7 -




>;NP
#



      3.3. Средства управления тестированием и отладкой программ

     В процессе исполнения программа взаимодействует с внешней средой,
которую обычно приходится моделировать. На  этапе  автономной  отладки
программы моделирование внешней среды обеспечивает человек, формируя в
диалоговом режиме желательные для него воздействия абонентов.  Описан-
ный в выше отладчик является прекрасным средством  автономной  отладки
отдельных программ. Однако за этапом автономной отладки следует  комп-
лексная отладка нескольких программ, а также, как правило, неоднократ-
ные модификации автономно  отлаженной  программы,  инициированные  как
обнаружением ошибок, так и изменением требований к программе. Диалого-
вый режим тестирования программы после модификации слишком обремените-
лен. Для автономно отлаженной  программы  должны  быть  разработаны  и
отлажены тесты, позволяющие в автоматическом режиме проверить работос-
пособность программы; при исполнении тестов моделирование внешней сре-
ды также должно выполняться в автоматическом режиме. Далее, при  комп-
лексной отладке программ помимо  задачи  моделирования  внешней  среды
возникает задача отслеживания более сложных условий для останова,  чем
значение счетчика команд или изменение ячейки. Алгоритмы  тестирования
и условия останова могут быть сколь угодно сложными, поэтому использо-
вание отладчика для тестирования и комплексной отладки  программ  тре-
бует наличия средств  для  анализа  значений  переменных  отлаживаемой
программы и  изменения  хода  процесса  тестирования  или  отладки  по
результатам анализа. Иначе говоря, необходимо дополнить отладчик алго-
ритмическим языком управления тестированием и отладкой (ЯУТО), который
содержал бы в  качестве  доступных  об'ектов  переменные  отлаживаемой
программы.

                    3.3.1 Назначение и состав ЯУТО

     ЯУТО разработан для использования в командных файлах  символьного
отладчика. Он позволяет автоматически  (без  вмешательства  оператора)
управлять исполнением командного файла, то есть анализировать перемен-
ные отлаживаемой программы и результаты выполнения директив отладчика,
осуществлять переход на любую метку текущего  или  другого  командного
файла, вызывать вложенные командные файлы и др. В  его  состав  входят
бсе команды сомвольного отладчика, а так же операторы ЯУТО.

                         3.3.2. Описание ЯУТО

                          3.3.2.1. Константы

     Константой является целое 16-ти битовое восьмеричное число, кото-
рому может предшествовать знак. Отрицательные числа могут задаватся  в
дополнительном коде. Левые незначащие нули или  лишние  разряды  (если
они есть) игнорируются.

     Напримеры констант:

                       177776, -2, 004776, +1000

                          3.3.2.2. Переменные

     В операторах ЯУТО различают переменные отлаживаемой  программы  и

                                 - 8 -




переменные командного файла. Переменные отлаживаемой программы задают-
ся в формате:

            <Указатель типа адресации>:<Адрес переменной>.

     Адрес переменной может задаваться  восьмеричным  числом,  именем,
определенным в исходном тексте отлаживаемой программы, регистром  про-
цессора (R0, ..., R7,  RS),  выражением,  заключенным  в  скобки  (см.
ниже). Задание адреса переменной именем возможно только после выполне-
ния директивы отладчика "NL". Все переменные программы  являются  гло-
бальными, то есть доступными для всех подпрограмм и вложенных  команд-
ных файлов.

     Переменные командного файла задаются в формате:

              <Указатель типа адресации><Имя переменной>.

     Имя переменной командного файла задается строкой не более чем  из
3-х символов. Все переменные командного файла, начинающиеся с  символа
"$", определяется как глобальные. Это означает, что данные  переменные
доступны всем подпрограммам и вложенным  командным  файлам.  Остальные
переменные доступны только тем  подпрограммам  и  вложенным  командным
файлам, в которых они определяются. Допускается одновременное  опреде-
ление до 128 различных переменных командного файла.

     Указатель типа адресации определяет способ доступа к  переменной.
Допустимые типы адресации и определяемые значения переменных приведены
в таблице 2.

                                                      Таблица 2
---------------------------------------------------------------
! Тип адресации ! Указатель !         Значение                !
!-------------------------------------------------------------!
!   прямая      !   пусто   ! значение переменной с указанным !
!               !           ! адресом или именем              !
!-------------------------------------------------------------!
!  непосредст-  !           ! адрес переменной (запрещен для  !
!  венная       !     #     ! переменных командного файла и   !
!               !           ! регистров)                      !
!-------------------------------------------------------------!
!   косвенная   !     @     ! содержимое ячейки с адресом,    !
!               !           ! равным значению переменной      !
---------------------------------------------------------------

     Примеры переменных отлаживаемой программы:

               :R5, @:R4, :1000, @:5026, #:START, :AREA

     Примеры переменных командного файла:

                          VAR, @STA, .01, $P1

                          3.3.2.3. Выражения

     Выражение может быть константой, переменной, либо комбинацией  из
этих компонент и одного или более знаков операций. Перечень всех  опе-
раций, разрешенных в выражении, и их приоритет приведен в таблице 3.

                                      - 9 -




                                                      Таблица 3
---------------------------------------------------------------
!   Тип    !       Знак операции и ее описание       ! Прио-  !
! операции !                                         ! ритет  !
---------------------------------------------------------------
! арифме-  ! унарные +, -                            !    1   !
! тический ! .ABS. абсолютная величина               !    1   !
!          ! **    возведение в степень              !    2   !
!          ! *,/   умножение, деление                !    3   !
!          ! +,-   сложение, вычитание               !    4   !
---------------------------------------------------------------
! логичес- ! .NOT. .NOT.A истинно тогда и только     !    1   !
! кий      !       тогда, когда "A" ложно            !        !
!          ! .AND. A.AND.B истинно тогда и только    !    5   !
!          !       тогда, когда "A" и "B" истинны    !        !
!          ! .OR.  A.OR.B истинно тогда и только     !    6   !
!          !       тогда, когда либо "A", либо "B",  !        !
!          !       либо "A" и "B" истинны            !        !
!          ! .EQV. A.EQV.B истинно тогда и только    !    7   !
!          !       тогда, когда "A" и "B" истинны    !        !
!          !       или "A" и "B" ложны               !        !
!          ! .XOR. A.XOR.B истинно тогда и только    !    7   !
!          !       тогда, когда "A" истинно, а "B"   !        !
!          !       ложно или когда "B" истинно, а    !        !
!          !       "A" ложно                         !        !
---------------------------------------------------------------

     Бинарные операции с одинаковым приоритетом выполняются слева нап-
раво. Унарные операции с  одинаковым  приоритетом  выполняются  справа
налево. Для изменения обычного порядка вычислений в выражении  исполь-
зуются скобки. Выражение, заключенное в  скобки,  рассматривается  как
отдельная компонента. Это означает, что вначале вычисляется ее  значе-
ние, а затем это значение используется в вычислении  значения  выраже-
ния.

     Пример выражения:

                           (VAR+:R0)*2+R5/4

     Значение выражения или его части,  заключенной  в  скобки,  можно
использовать как адрес переменной отлаживаемой  программы.  Для  этого
нужно поставить перед открывающей скобкой знак ":" и необходимый  ука-
затель типа адресации. Например в  выражении  @:(1000+:AREA)  значение
переменной с именем  AREA  увеличивается  на  1000  и  используется  в
качестве указателя на адрес необходимого значения.

                            3.3.2.4. Метки

     Метка ставится перед любой директивой  или  оператором  ЯУТО  для
повторного обращения к фрагменту командного файла. Перед  меткой  ста-
вится точка, а за ней двоеточие. Например:

                          .START:, .1:, .32:

     Интерпретатор ЯУТО может реализовать два способа поиска метки:

       - поиск метки в файле;
       - поиск метки в каталоге.


                                 - 10 -




     В первом случае  интерпретатор  прежде  всего  проверяет  таблицу
меток прямого доступа. Если метка в таблице  опрделена,  то  осуществ-
ляется непосредственный переход на нее без поиска в файле. Если  метка
в таблице не определена, интерпретатор начинает поиск метки от текущей
позиции до конца командного файла. Если метка  не  найдена,  то  поиск
ведется от начала файла до текущей позиции. В случае обнаружения метки
ее имя и адрес заносится в таблицу меток прямого доступа. Если  табли-
ца, рассчитанная на 64 метки, уже  заполнена,  то  вновь  определенные
метки заменяют ранее определенные, начиная с первой метки. Длина метки
- не более 6-ти символов.

     Во втором случае командный файл должен быть предварительно  обра-
ботан программой LIBS.SAV, которая заносит имена и адреса всех меток в
каталог, размещаемый в начале файла. Собственно командный  файл  начи-
нается с блока, следующего за каталогом. Имена меток могут быть  зане-
сены в каталог как в коде RADIX-50, так и коде КОИ-7 (ключи  программы
LIBS.SAV /R и /A соответственно). Длина метки - не более 6-ти символов
для кода RADIX-50, и не более 4-х символов для кода КОИ-7.

     Как правило, ссылка на метку  в  операторах  ЯУТО  осуществляется
следующим образом:

                    <Метка>;<Имя командного файла>.

     Например: START;TEST.COM

     Если имя командного файла, в котором определена указанная  метка,
не указано, то управление передается на метку в текущем командном фай-
ле. Указывать имя файла при ссылке на  метку  запрещено  в  операторах
".DO" и ".PRINT".

                        3.3.2.5. Операторы ЯУТО

     Оператор ".GO <Метка>" обеспечивает безусловный переход  на  ука-
занную метку.

     Например: .GO START

     Оператор ".IFA <Выражение>  <Метка1>,<Метка2>,<Метка3>"  передает
управление на первую, вторую или третью из указанных меток если значе-
ние выражения меньше нуля, равно нулю или больше нуля  соответственно.
Любые одна или две метки могут быть пропущены, однако запятые,  разде-
ляющие их, должны быть  сохранены.  После  последней  указанной  метки
запятые сохранять не обязательно. Пропуск метки означает, что управле-
ние в данном случае будет передано на следующую за  оператором  ".IFA"
строку.

     Например:

                     .IFA :R0-100 START,START,PROD

                         .IFA @:R5-:2000 START

     Оператор
      ".IFL <Выражение1><Операция><Выражение2> <Метка1>,<Метка2>"
передает управление на  первую  метку,  если  результатом  логического
сравнения двух выражений является истина. В противном случае  управле-
ние передается на вторую метку. Любая из меток может  быть  пропущена.
Если пропущена первая метка, то запятая должна быть сохранена. Пропуск

                                 - 11 -




метки означает, что управление в данном случае будет передано на  сле-
дующую за оператором строку. Операции, допустимые в данном  операторе,
перечислены в таблице 4.

                                      Таблица 4
             ----------------------------------
             ! операция ! содержание операции !
             ----------------------------------
             !    >     ! больше              !
             !    <     ! меньше              !
             !    =     ! равно               !
             !    ><    ! не равно            !
             !    >=    ! больше или равно    !
             !    <=    ! меньше или равно    !
             ----------------------------------

     Например:

                        .IFL R5<1000 START,END

                          .IFL @R2=:2000 ,END

     Оператор ".CALL <Метка> <ПС1, ..., ПСN>;<ПЗ1, ..., ПЗN>" вызывает
подпрограмму с указанной меткой.

     <ПС1, ..., ПСN> - список параметров, передаваемых подпрограмме по
ссылке. В этом списке могут быть указаны только переменные  командного
файла, так как переменные программы всегда доступны любой  подпрограм-
ме.

     <ПЗ1, ..., ПЗN> - список параметров, передаваемых подпрограмме по
значению. В этом списке могут быть указаны любые переменные и  выраже-
ния. Значения передаваемых параметров присвоятся переменным командного
файла с именами ".NN" (NN - порядковый номер фактического параметра  в
списке). Параметры, передаваемые по значению, доступны только  вызван-
ной подпрограмме и при выходе из нее теряются.

     Любой из списков параметров может быть опущен.  Если  отсутствует
список параметров, передаваемых подпрограмме по ссылке, то ";", разде-
ляющая списки, должна быть сохранена.

     Например:

                    .CALL PROG VAR1,VAR2;(:R0+1000)

                            .CALL PROG VAR1

     Оператор ".RETURN" предназначен для возврата  из  подпрограммы  и
завершения вложенного командного файла. Вместо этого оператора  допус-
тимо использовать управляющий символ <СУ/R>.

     Оператор ".SET <Переменная>=<Выражение>"  присваивает  переменной
значение выражения. Если после знака "=" отсутствует выражение,  опре-
деляющее значение указанной переменной, то выполнение командного файла
приостанавливается и ожидается ввод значения переменной  с  терминала.
После того как будет набрано значение и нажата клавиша <ВК>,  выполне-
ние командного файла будет продолжено.

     Например: .SET :R0=:R0+1

                                 - 12 -




     Оператор ".TYPE <Выражение>" печатает на экране терминала  значе-
ние выражения.

     Например: .TYPE :R0, .TYPE 1000/2-2

     Оператор ".DO <Метка> <Выражение>"  применяется  для  циклической
обработки фрагмента командного файла. Метка,  указанная  в  операторе,
определяет область его действия. Все директивы и операторы ЯУТО,  рас-
положенные между оператором и этой меткой, включаются  в  его  область
действия. Значение выражения определяет количество  циклов.  Операторы
".GO" и ".IF", а также директива "NC"  прекращают  действие  оператора
".DO", если передают управление за пределы его области действия.

     Например:


     .DO END 5
        .
        .
        .
     .END:

     Оператор ".ERROR/.NOERROR" разрешает/запрещают приостанов  выпол-
нения командного файла при обнаружении синтаксической ошибки.

     Оператор ".QUIET/.NOQUIET" запрещает/разрешает печать  на  экране
терминала.

     Оператор ".PRINT <Метка>" печатает  на  экране  терминала  строку
командного файла с указанной меткой. Необходимо, чтобы строка  начина-
лась и заканчивалась одним  и  тем  же  ограничителем,  которым  может
являться любой символ (например: "\", "/", "!" и т. п.).

     Например:

     .PRINT STROKA
           .
           .
           .
     .STROKA:!ПРИМЕР ИСПОЛЬЗОВАНИЯ ОПЕРАТОРА .PRINT!

     Оператор ".EXIT" прекращает выполнение командного файла  и  пере-
дает управление отладчику. Вместо этого оператора допустимо  использо-
вать управляющий символ <СУ/E>.

     Директива "C" позволяет подключить к точке останова  по  счетчику
команд определенную метку из текущего командного файла. Это  означает,
что после выхода отлаживаемой программы на точку  останова  управление
автоматически передается на заданную метку командного файла. Необходи-
мо, чтобы связываемые с точками останова метки имели  числовые  имена.
V.BLN 0 <МЕТКА>;<НТО>C - подключить метку к точке останова  с  номером
<НТО>;
;<НТО>C - отключить метку от точки останова с номером <НТО>;
;C - отключить метки от всех точек останова.


                         Пример теста программы на ЯУТО



                                      - 13 -




 !РАЗРЕШИТЬ ПРИОСТАНОВ КОМ. ФАЙЛА ПО ГРУБОЙ ОШИБКЕ!
 .ERROR
 !УСТАНОВИТЬ ГРАНИЦЫ ПАМЯТИ ДЛЯ ЧТЕНИЯ ФАЙЛА KDZ.SAV!
 1000;1776MB
 !ЧТЕНИЯ ФАЙЛА ПРОГРАММЫ KDZ.SAV НАЧИНАЯ С ПЕРВОГО БЛОКА!
 1MLKDZ
 TM
 !НАСТРОЙКА НА ТАБЛИЦУ ИМЕН ПРОГРАММЫ!
 NLKDZ
 !УСТ. ТОЧКУ ОСТАНОВА В ПРОГРАММЕ ВВОДА КООРДИНАТ ОД'ЕКТА!
 LOPRKOO;B
 !УСТ. ТОЧКУ ОСТАНОВА НА СРАВНЕНИИ R0 С #'E
 LCHAR;B
 !ПОДКЛЮЧИТЬ К ТОЧКЕ ОСТАНОВА ПОДПРОГРАММУ КОМ. ФАЙЛА С МЕТКОЙ .2!
 2;0CB
 TBTC
 .1:
 !ЗАПУСК ПРОГРАММЫ!
 LSTART;G
 .IFL :R0=105 3,1
 .2:
 !ВВЕДИТЕ КООРДИНАТУ X (0...113)!
 .SET :R0=:R0+3
 !ВВЕДИТЕ КООРДИНАТУ Y (0...26)!
 .SET :R1=:R1+1
 .RETURN
 .3:
 .EXIT



                            3.4. Заключение

     Из всего выше изложенного видно,  что  описанный  отладчик  имеет
значительно более богатый набор  отладочных  функций  по  сравнению  с
отладчиками ODT, TODT или ODT/X. По опыту эксплуатации  можно  сделать
вывод, что отладчик является мощным отладочным  средством,  удобным  в
эксплуатации,  значительно  сокращающим  время  разработки   программ.
Успользование ЯУТО позволило сделать шаг вперед на пути  автоматизации
процесса тестирования и отладки программного  обеспечения.  Разработан
пакет стандартных программ на ЯУТО, обеспечивающих:

       - останов по значению переменной;
       - останов по выходу значения переменной за указанные границы;
       - останов после указанного числа прохождений данной точки прог-
         раммы;
       - вывод в файл последовательности значений переменной;
       - вывод в файл значений указанных переменных в заданных  точках
         программы;
       - вывод в файл последовательности прохождения  программы  через
         заданные точки.

     ЯУТО может использоваться также для поиска контекста  в  числовом
файле. Эксплуатация ЯУТО показала,  что  предоставляемые  им  средства
достаточны для решения задач автоматического тестирования и  комплекс-
ной отладки ПО.




                                 - 14 -




           4. Дополнительные средства отладочных комплексов

     Рассмотренный выше символьный отладчик является ядром специально-
го программного обеспечения (СПО), предназначенного для  исполнения  и
отладки программного обеспечения (ПО) пользователя на отладочных комп-
лексах с исползованием ВСЭ микропроцессоров серии 1801.

     ПО пользователя состоит из ПО проэктируемой  системы  (ПС)  и  ПО
программ-утилит.

     Программы-утилиты  (вспомогательные  программы)   разрабатываются
пользователями и используются в качестве:

       - программных моделей отсутствующей аппаратуры ПС;

       - сервисных программ, которые могут контролировать  и  изменять
         содержимое  программно-доступных  элементов  ПС   (регистров,
         ячеек), осуществлять выдачу сообщений на терминал управляющей
         подсистемы (УП) и т. п.

     Ниже будут различаться два адресных пространства  (АП)  СПО.  Под
нулевым АП понимается ОЗУ УП комплекса. Под первым АП  понимается  ОЗУ
ПС. УП  реализована  на  базе  диалогового  вычислительного  комплекса
(ДВК). В качестве ПС используется блок эмуляции. В нулевом  АП  испол-
няются СПО комплекса и программы-утилиты, в первом АП  исполняется  ПО
ПС.

     Рассмотрим некоторые дополнительные возможности,  предоставляемые
СПО указанных комплексов.



         4.1. Определение адресного пространства. Команда ":"

     Синтаксис:

     <N>:
       - Переключиться на работу с адресным  пространством  с  номером
         <N>.



    4.2. Определение виртуального пространства физическим адресом.
                              Команда "["

     Команда исполняется только в первом АП для МП 1801ВМ3.

     Синтаксис:

     [<A>
       - определить  в  качестве  текущего  виртуального  пространства
         область с адресами от А до А+177777, если А - четный,  или  с
         адресами от А-1 до А+177776, если А нечетный.



    4.3. Определение виртуального пространства значениями регистров
                    диспетчера памяти. Команда ","


                                 - 15 -




     Команда исполняется только в первом АП для МП 1801ВМ3.

     Диспетчер памяти ПС содержит 3 набора регистров адресов  страниц.
Данная команда позволяет определить в качестве  текущего  виртуального
пространства область памяти, указанную соответствующим набором регист-
ров. Наборам регистров  и  соответствующим  виртуальным  пространствам
присвоены следующие номера:

       - 0 - внутренний режим;

       - 1 - пользовательский режим;

       - 2 - HALT - мода.

     Синтаксис:

     <N>,
       - определить в качестве текущего виртуального пространства вир-
         туальное пространство с номером <N>.

     ,
       - определить в качестве текущего виртуального пространства вир-
         туальное пространство с ранее введенным номером (целесообраз-
         но использовать после команды "[".

     Если <N> больше 2, команда трактуется как отшибочная.



    4.4. Определение виртуального пространства именем загрузочного
                          модуля. Команда "_"

     Директива исполняется только в нулевом АП.

     Синтаксис:

     L<имя программы-утилиты>_
       - определить  в  качестве  текищего  виртуального  пространства
         программу-утилиту. Если имя  утилиты  не  указывается,  то  в
         качестве  текущего  виртуального  пространства   определяется
         область с адресами 0... 4777.



              4.5. Сторожевые точки останова. Команда "W"

     Данная команда позволяет установить или отменить режим отслежива-
ния обращений по указанному адресу ПС.

     Синтаксис:

     <A>;W<S> :
       - установить точку останова по адресу <A>;

     <A>W<S>
       - отменить точку останова по адресу <A>.

     Параметр <S> должен быть любым из допустимых символов:


                                 - 16 -




       - A - останов по любому обращению к адресу;

       - R - останов по чтению;

       - W - останов по записи.

     Необходимо иметь в ввиду, что после обнаружения условия  останова
процессор первого АП довыполняет команду и, может быть, выполняет  еще
одну команду (в зависимости от момента  обнаружения  условия  останова
или типа команды). Лишь потом процессор переходит в пультовой режим, и
СПО печатает сообщение об останове. Значение R7, печатаемое при выходе
на точку останова по обращению к адресу, соответствует не той команде,
в которой произошло обращение, а той команде перед  которой  произошел
останов. Команда, явившаяся причиной останова, может  быть  определена
по трассе программы (см. команду "Z".



            4.6. Отображение трассы программы. Команда "Z"

     Данная директива исполняется только в первом  АП  и  обеспечивает
отображение на экране терминала трассы программы первого АП.

     Трасса собирается с помощью памяти логического анализатора (ПЛА).
Для отображения трассы используются  виртуальные  адреса  ПЛА.  Кажтый
виртуальный адрес соответствует определенному физическому адресу  ПЛА.
Виртуальный адрес 0 всегда соответствует началу трассы,  записанной  в
ПЛА. Трасса запоминается по возрастанию виртуальных  адресов  ПЛА.  По
заполнению всей ПЛА, она продолжает  заполняться  сначала,  стирая  по
мере заполнения предшествующую трассу, что обестечивает запоминание  в
ПЛА последнего участка трассы программы. Виртуальные адреса ПЛА  имеют
диапазон 0... 1777. После ввода команды "Z" допустим только  ряд  спе-
циальных команд. Выход из режима просмотра трассы в  диалог  осуществ-
ляется по символу <СУ/Z>, введенному с клавиатуры терминала.


            4.6.1. Отображение с дизассемблированием трассы

     Синтаксис:

     <A>;[<N>]<P>
       - показать <N> команд трассы выполненной программы с адреса <А>
         ПЛА;

     [<N>]<P>
       - показать <N> команд трассы выполненной программы  с  текущего
         адреса ПЛА.

     По умолчанию параметр <N> принимается равным 1.

     Параметр <Р> определяет вид отображения содержимого ПЛА принимает
значение следующих символов:

       - D - дизассемблирование команд (на экран выдается дизассембли-
         рованная строка;

       - O - дизассемблирование команд  и  отображение  операндов  (на
         экран выдается дизассемблированная строка и операнды).

                                 - 17 -




         4.6.2. Управление режимом отображением адресов команд

     Команды "[" и "," используются для  БЭ  МП  1801ВМ3  при  задании
режима отображения адресов дизассемблируемых команд по командам "O"  и
"D".

     Команда "," обеспечивает отображение адресов команд трассы в виде
виртуальных адресов. Виртуальные адреса  преобразуются  из  физических
22-разрядных адресов  трассы,  используя  регистры  диспетчера  памяти
текущего виртуальнрго пространства.

     Команда "[" обеспечивает отображение адресов команд трассы в виде
16-ти младших разрядов адреса 22-разрядных физических адресов.


           4.6.2. Управление режимом отображением операндов

     Команда "V" используется для управления режимом отображения  опе-
рандов,  выводимых  командой  "O".  Команда  используется  для  БЭ  МП
1801ВМ3.

     Синтаксис:

     <N>V
       - параметр <N> определяет режим работы: если <N>=0 или не зада-
         но, то отображаются 16-разрядние виртуальные  адреса  операн-
         дов; если  <N>  отлично  от  0,  то  отображаются  физические
         22-разрядные  адреса.  Виртуальные  адреса  преобразуются  из
         физических используя регистры диспетчера памяти текущего вир-
         туального пространства.




































                                                                                              