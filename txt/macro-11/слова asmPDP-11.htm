<html>
<!-- Creation date: 15.05.07 -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">

<meta name="description" content="Этот сайт предназначен для тех, кто хочет понять, как работает компьютер. Его целью является рассказ о существующих учебных моделях ЭВМ. Помимо описания моделей, показаны примеры решения задач и представлено учебное программное обеспечение. Наконец, описываются принципы представления информации, основы логики построения компьютеров и т.д."> 

<meta name="keywords" content="компьютер, модель, учебный, программа, принципы, фундаментальный, вычислительная техника, ЭВМ, информатика, образование, школа, учебник"> 

<TITLE>Учебные модели компьютера</TITLE>
<LINK rel="stylesheet" href="/styles/index.css.htm" type="text/css">
</head>

<body text="black" bgcolor=white leftmargin="0" topmargin="0" bottommargin="0" rightmargin="0">

<center>
<!--
<img src=/images/constr2.gif alt='Under construction!'>
-->
<font color=red><b>
<p>Данный сайт по техническим причинам перенесен с <a href=http://emc.km.ru>http://emc.km.ru</a> и является его дальнейшим развитием.
</b></font>
<br>
Более подробно об истории сайта можно прочитать <i><a href=/site/history.html>здесь</a></i>.
<br><hr>
</center>
<table align=center width=98% cellpadding=3 cellspacing=0>
<tr valign=top>
<td><!--
<LINK rel="stylesheet" href="styles/index.css.htm" type="text/css">
-->

<!-- Начало левого столбца -->
<table height="100%" border=0 cellpadding=0 cellspacing=0 width="180" align=left>

<tr><td valign=top class=o>
<table width=100% border=0 cellpadding=0 cellspacing=0>
<tr><td><table border=0 cellpadding=5 cellspacing=0 width="100%">
<tr><td align=left><img src="/images/title/comps40.gif" border=0 width=132 height=101
alt='Учебные модели компьютера'><br><br>
</td></tr></table>
</td></tr>

<tr><td>
<table width="70%" border=0 cellspacing=1 cellpadding=0>
<tr><td class=h><div><a href="/index.html">Вход</a>
</div></td></tr>
</table>

<p>
<table width="70%" border=0 cellspacing=1 cellpadding=0>
<tr><td class=h><div><a href="/site/">О сайте</a>
</div></td></tr>
<tr><td class=h><div><a href="/intro/">Введение</a>
</div></td></tr>
</table>
</td></tr>

<tr><td>
<table width="100%"><tr><td align=left><div>
<p><hr width=70%><br>
<p><font color=#bc0b2a><b>Модели (software):</b></font></div>
</td></tr></table>
</td></tr>

<tr><td>
<table width="70%" border=1 cellspacing=1 cellpadding=0>

<tr><td class=h><div><a href="/pdp11/">имитатор PDP-11</a>
</div></td></tr>

<tr><td class=h><div><a href="/mano/">"машина Мано"</a>
</div></td></tr>

<tr><td class=h><div><a href="/lmc/">"LMC"</a>
</div></td></tr>

<tr><td class=h><div><a href="/toycom/">"ToyCom"</a>
</div></td></tr>

<tr><td class=h><div><a href="/sic/">"SIC"</a>
</div></td></tr>

<tr><td class=h><div><a href="/kroha/">"Кроха"</a>
</div></td></tr>

<tr><td class=h><div><a href="/neumann/">"Нейман"</a>
</div></td></tr>

<tr><td class=h><div><a href="/malutka/">"Малютка"</a>
</div></td></tr>

<tr><td class=h><div><a href="/e97/">"Е97"</a>
</div></td></tr>

<tr><td class=h><div><a href="/maket/">"Макет ЭВМ"</a>
</div></td></tr>

<tr><td class=h><div><a href="/mix/">"MIX"</a>
</div></td></tr>

<tr><td class=h><div><a href="/mmix/">"MMIX"</a>
</div></td></tr>

<tr><td class=h><div><a href="/ant/">"ANT-8"</a>
</div></td></tr>

<tr><td class=h><div><a href="/nn1/">Noname1</a>
</div></td></tr>

<tr><td class=h><div><a href="/nn2/">Noname2</a>
</div></td></tr>
</table>
</td></tr>

<tr><td>
<table width="100%"><tr><td align=left><div>
<br>
<p><font color=#bc0b2a><b>Модели (hardware):</b></font></div>
</td></tr></table>
</td></tr>

<tr><td>
<table width="70%" border=1 cellspacing=1 cellpadding=0>

<tr><td class=h><div><a href="/mk152/">МК-152</a>
</div></tr></td>

<tr><td class=h><div><a href="/mano/">"машина Мано"</a>
</div></td></tr>
</table>
</td></tr>

<tr><td>
<table width="100%"><tr><td align=left><div>
<br>
<p><b><a href="/site/syryo.html">Другие модели</a></b></div>
</td></tr></table>
</td></tr>

<tr><td>
<table width="100%"><tr><td align=left>
<div><br><hr width=70%><br></div>
</td></tr></table>
</td></tr>

<tr><td><table width="70%" border=1 cellspacing=1 cellpadding=0>
<tr><td class=h><div><a href="/theory/">Теория</a>
</div></td></tr>

<tr><td><div>
&#8226; <a href="/theory/info/">Представление информации</a>
</div></td></tr>

<tr><td><div>
&#8226; <a href="/theory/store/">Хранение информации</a>
</div></td></tr>

<tr><td><div>
&#8226; <a href="/theory/ustr/">Устройство компьютера</a>
</div></td></tr>

<tr><td><div>
&#8226; <a href="/theory/raznoe/">Разное</a>
</div></td></tr>
</table>
</td></tr>

<tr><td><table cellspacing=3 width='100%'>
<tr><td align=center><div>
<br><br>
<img src='/images/ploukcover.gif' width=60 height=86 border=0
alt='"Популярные лекции об устройстве компьютера"'>
<p><a href=http://inf.1september.ru/eremin/plouk/plouk.html>"Популярные лекции об устройстве компьютера"</a>
<hr width=80%>
</div></td></tr>
</table>
</td></tr>

<!--
<tr><td><table width="70%" border=0 cellspacing=0 cellpadding=0>
<tr><td class=h><div><a href="/Photogallery/pg.asp?id=215"">Фотогалерея "Поколения ЭВМ"</a></div></table>
<table border=0 cellspacing=0><tr><td><img src="../g/dot_em.gif" width=1 height=3></table></td></tr>
-->

<tr><td><table cellspacing=3 width='100%'>
<tr><td align=center><br><br>
<a href=/site/konkurs1.html><img src='/images/title/nom88_31.gif' width=88 height=31 border=0 alt='Награды сайта'></a>
<br>
<!-- Concours "IT-education in Runet" banner -->
<a href="http://www.ict.edu.ru/konkurs/">
<img src="http://www.ict.edu.ru/img/konkurs/winner88x31.gif" width="88" height="31" border=0 alt='Награды сайта'></a>
<!-- End of concours "IT-education in Runet" banner -->
</table></td></tr>

</table>
</table>
<!-- Конец левого столбца -->
</td>
<td>

<h2 align=center><font color=maroon>Система команд процессоров семейства PDP</font></h2>

<div class=t>

<P>Итак, в предыдущих разделах мы познакомились с наиболее общими принципами работа микропроцессоров вне зависимости от их модели. Настала пора посмотреть, как эти принципы реализуются в конкретном МП.</P>
<P>Дальнейшее знакомство с работой МП можно построить двумя способами: либо поверхностно, не вдаваясь в детали, изучить реально существующий процессор (при этом следует помнить, что через пару лет МП будут похожие, но другие), либо попытаться собрать наиболее характерные черты микропроцессоров в хорошую учебную модель и подробнее изучить ее. По мнению автора, второй подход более удобный. Учебному процессору будет посвящена следующая глава, а пока рассмотрим альтернативный подход - краткое изучение реального МП.</P>
<P>В качестве примера процессора, наиболее подходящего для изучения, удобнее всего взять процессор серии машин под названием PDP. В нашей стране аналогичные процессоры использовались в семействах "ДВК", "БК", а также в типовом школьном компьютерном классе "УКНЦ". При дальнейшем изложении будем все это обширное семейство для краткости называть общим собирательным термином <font color=green><B>процессор PDP</B></font>. Именно этот тип МП был предложен для изучения родоначальником отечественной школьной информатики А.П.Ершовым [9,10].</P>
<P>Причина такого выбора состоит в том, что система команд этого процессора построена на простых и наглядных принципах, изучив и запомнив которые уже можно составлять несложные программы. В то же время система команд других процессоров, например, широко распространенных представителей семейства INTEL, устроена значительно сложнее и менее логично, требует запоминания большого количества справочных данных. В качестве подтверждения сказанного достаточно указать, что в команде процессора PDP может быть использован любой из имеющихся внутренних регистров, тогда как многие команды процессоров INTEL оперируют с фиксированными регистрами, не допуская альтернативного расположения данных и результатов.</P>
<P>Имеется большое количество литературы по вопросам устройства и программирования процессора машин семейства PDP; чаще всего для ее чтения требуется некоторая предварительная подготовка. Можно порекомендовать начать такую подготовку с серии популярных статей Ю.А.Зальцмана в журнале "Информатика и образование" [11] (в первом из журналов, кстати, подобран хороший список литературы). По правде говоря, в глубине души автор тайно надеется, что те, кто внимательно прочитал предыдущие разделы пособия, уже не нуждаются в дополнительных сведениях.</P>
<br>
<P>Итак, перейдем к изучению процессора машин серии PDP. С точки зрения программиста он состоит из восьми 16-разрядных регистров общего назначения (<B>РОН</B>) и особого регистра, в котором отображается текущее состояние процессора (в иностранной литературе его принято обозначать <B>PSW</B> - Processor Status Word).</P>
<P>Любой из регистров общего назначения может использоваться в командах на равных основаниях. Вместе с тем имеется два выделенных регистра, содержимое которых процессор использует для собственных нужд. Прежде всего следует назвать регистр R7, выполняющий роль <b>счетчика команд</b> (вспомните основной цикл работы процессора - <a href=../theory/ustr/1_5.html>п.1.5</a>). Другим выделенным регистром является <b>указатель стека</b> R6; назначение указателя стека подробно объяснялось в п.2.4.</P>
<P>Остальные 6 регистров, обозначаемые R0-R5, программист может полностью использовать по своему усмотрению. Имеется только одно непринципиальное исключение: в обширной системе команд PDP существует лишь единственная, и то достаточно экзотическая команда - <a href=mark.html>MARK</a>, работающая с регистром R5.</P>
<P>Уместно заметить, что выделенные регистры процессора R6 и R7 могут использоваться в любой команде наряду с обычными РОН R0-R5. Например, допускается переписать информацию из R7 в R3 и тем самым сообщить программе адрес памяти, в котором находится следующая команда программы. Такой прием очень часто используется программистами для автоматической "самонастройки" на те адреса ОЗУ, в которых оказалась загружена программа. Интересно, что такого простого доступа к содержимому программного счетчика многие процессоры не имеют.</P>
<P>Регистр состояния процессора PSW как и все РОН является 16-битным. Его особенностью является то, что каждый его бит имеет самостоятельное значение и может использоваться процессором отдельно от других. В управляющих битах регистра постоянно отображается информация о результатах выполняемых операций (отрицательность, равенство нулю и т.п.), а также о состоянии процессора в данный момент (например, один из битов позволяет разрешать или запрещать обработку прерываний). Не все 16 битов регистра состояния задействованы; из тех, что используются, наибольшую известность получили два; их принято обозначать N и Z. Управляющий признак <B>N</B> (<i>Negative</i>) характеризует наличие знака минус у результата операций: если число отрицательное, то N=1, в случае неотрицательного значения N=0. Бит <B>Z</B> (<i>Zero</i>) говорит о равенстве или неравенстве нулю результата: в первом случае Z=1, иначе Z=0. Путем несложных рассуждений читатель может убедиться, что из 6 известных математических соотношений (больше, меньше, равно и т.д.) 4 могут быть проанализированы по одному из признаков, а 2 оставшихся требуют совместного анализа битов N и Z. Описанные управляющие признаки широко используются для реализации разветвлений программы в зависимости от полученных результатов.</P>
<P>Имеется и еще один важный управляющий бит, обозначаемый <B>C</B> (от английского Carry - перенос). Он активно используется при многоразрядных вычислениях и некоторых полезных вариантах сдвигов, что позволяет существенно упростить многие программы анализа двоичного кода. Тем не менее, в простейших случаях без него вполне удается обходиться и мы его изучать пока не будем.</P>
<br>
<P>Процессор PDP имеет достаточно удобный и широкий набор команд. Основная их часть является двухадресными или одноадресными, т.е. они обрабатывают два или один операнд соответственно. Для выполнения некоторых управляющих команд данные не требуются (например, команда остановки программы) - такие команды не содержат ссылок на операнды.</P>
<P>Примеры некоторых наиболее важных операций приводятся в таблице.</P>

<br>
<P><center><B>НЕКОТОРЫЕ НАИБОЛЕЕ ВАЖНЫЕ КОМАНДЫ ПРОЦЕССОРА PDP</b></center>

<TABLE BORDER CELLSPACING=1 CELLPADDING=3 align=center>
<TR><th BGCOLOR="#ffffff">Мнемоника<br> команды</TD>
<th BGCOLOR="#ffffff">Название команды</TD>
<th BGCOLOR="#ffffff">Пояснения</th>
</TR>
<TR><TD>HLT</TD><TD>останов</TD><TD>выполнение программы прекращается</TD>
</TR>
<TR><TD>CLR A</TD><TD>очистить</TD><TD>А:=0 - в операнд А засылается 0</TD>
</TR>
<TR><TD>INC A</TD><TD>увеличить на 1</TD><TD>А:=А+1 - значение А увеличивается на 1</TD>
</TR>
<TR><TD>DEC A</TD><TD>уменьшить на 1</TD><TD>A:=А-1 - значение А уменьшается на 1</TD>
</TR>
<TR><TD>COM A</TD><TD>дополнить</TD><TD>A:=NOT A - значение А инвертируется</TD>
</TR>
<TR><TD>MOV A,B</TD><TD>переписать</TD><TD>В:=А - В принимает значение А</TD>
</TR>
<TR><TD>ADD A,B</TD><TD>сложить</TD><TD>В:=В+A - сумма помещается в В</TD>
</TR>
<TR><TD>SUB A,B</TD><TD>вычесть</TD><TD>В:=В-А - в В помещается разность</TD>
</TR>
<TR><TD>BIC A,B</TD><TD>очистить биты</TD><TD>B:=B AND (NOT A) - в B помещается результат</TD>
</TR>
<TR><TD>BIS A,B</TD><TD>установить биты</TD><TD>B:=B OR A - в B помещается результат ИЛИ</TD>
</TR>
<TR><TD>CMP A,B</TD><TD>сравнить</TD><TD>по А-В устанавливаются управляющие биты; A и В сохраняются</TD>
</TR>
<TR><TD>JMP A</TD><TD>безусловный переход по адресу</TD><TD>безусловный переход к адресу А</TD>
</TR>
<TR><TD>BR К</TD><TD>безусловный переход по смещению</TD><TD>безусловный переход через К слов</TD>
</TR>
<TR><TD>BEQ К</TD><TD>переход по =0</TD><TD>переход на К слов, если результат =0</TD>
</TR>
<TR><TD>BNE К</TD><TD>переход по &lt;&gt;0</TD><TD>переход на К слов, если результат &lt;&gt;0</TD>
</TR>
<TR><TD>BPL К</TD><TD>переход по &gt;=0</TD><TD>переход на К слов, если результат &gt;=0</TD>
</TR>
<TR><TD>BMI К</TD><TD>переход по &lt;0</TD><TD>переход на К слов, если результат &lt;0</TD>
</TR>
<TR><TD>JSR A</TD><TD>вызов подпрограммы</TD><TD>переход на адрес А с запоминанием адреса возврата для команды RET</TD>
</TR>
<TR><TD>RET</TD><TD>возврат из подпрограммы</TD><TD>возврат на команду, следующую за вызовом подпрограммы</TD>
</TR>
</TABLE>

<P>Действия, выполняемые по простейшим арифметическим и логическим операциям понятны из пояснений в таблице. В некоторых дополнительных пояснениях нуждаются только команды переходов.</P>
<P>Во-первых, переходы бывают <B>абсолютные</B> (на заданный адрес) и <B>относительные</B> (на определенное число команд относительно данной). Переходы первого типа более наглядны и могут быть реализованы на любой адрес ОЗУ. Относительные переходы требуют вычисления адреса перехода, зато они не привязаны к конкретным адресам ОЗУ: программа, использующая относительные переходы, может работать без изменений в любом месте памяти. Относительные переходы занимают меньше места в памяти, чем абсолютные; вследствие этого диапазон относительных переходов ограничен (в процессоре PDP только на 127 слов вперед и 128 назад).</P>
<P>Во-вторых, переходы делятся на <B>безусловные</B> и <B>условные</B>. Безусловные, как следует из названия, происходят всегда. При выполнении условного перехода анализируются управляющие биты: переход происходит только в том случае, когда признаки имеют требуемые значения; в противном случае переход игнорируется и выполняется следующая за ним команда. Отметим, что команды BEQ и BNE проверяют значение управляющего бита Z, а BPL и BMI - N.</P>
<P>Чаще всего условному переходу предшествует команда сравнения, "подготавливающая" управляющие признаки для анализа. </P>
<P>В двоичном коде команды перехода требуется указывать конкретное значение адреса или величину смещения в словах, что при написании программ требует определенных вычислений. К счастью они достаточно просты и их вполне можно "перепоручить" компьютеру. Поэтому при использовании большинства систем программирования в требуемых местах программы просто ставятся метки, на которые ссылаются команды перехода; расчет конкретных адресов и смещений в командах переходов машина производит самостоятельно (см. приводимые ниже примеры).</P>
<br>
<P>В командах таблицы операций в качестве операндов фигурируют условные обозначения А и В. Настало время поговорить о том, что за ними скрывается. Система команд процессора PDP построена достаточно логично и закономерно, поэтому любой операнд - и первый, и второй - в любой операции задается совершенно одинаково. В PDP существует 8 различных способов задать местонахождение информации, требующейся для выполнения операции [11, 12]. Их принято называть <B>методами адресации</B> и все они связаны с различным использованием РОН. Наличие развитой системы методов адресации делает программирование для процессора PDP очень гибким и мощным.</P>
<P>Несколько наиболее простых и часто применяемых способов указания операндов в команде приводится ниже в виде таблицы.</P>

<TABLE BORDER CELLSPACING=1 CELLPADDING=3 align=center>
<TR><th BGCOLOR="#ffffff">название</th>
<th BGCOLOR="#ffffff">мнемоника</th>
<th BGCOLOR="#ffffff">пояснение</th>
</TR>
<TR><TD>регистровая</TD><TD align=center>Rn</TD><TD>операнд в регистре Rn</TD>
</TR>
<TR><TD>косвенно-регистровая</TD><TD align=center>(Rn)</TD>
<TD>операнд в ячейке ОЗУ, адрес которой в Rn</TD>
</TR>
<TR><TD>автоинкрементная</TD><TD align=center>(Rn)+</TD>
<TD>то же, но после чтения Rn увеличивается</TD>
</TR>
<TR><TD>автодекрементная</TD><TD align=center>-(Rn)</TD>
<TD>то же, но перед чтением Rn уменьшается</TD>
</TR>
</TABLE>

<P>В качестве иллюстрации разберем выполнение команды</P>
<CENTER>MOV (R1)+, R0</center>
<P>По этой команде сначала считывается информация из памяти по адресу, находящемуся в R1. После чтения значение R1 автоматически увеличивается, так что при последующем выполнении данной команды будет обрабатываться следующая ячейка. Операция завершается записью считанной из ОЗУ информации в регистр R0.</P>
<P>Из разобранного примера отчетливо видно, что имеющиеся у процессора PDP способы адресации позволяют удобно работать не только с одиночными данными, но и с массивами последовательно хранящейся в памяти информации. Кроме того, некоторые приемы использования счетчика команд R7 в качестве РОН могут давать еще более интересные эффекты. Пусть, например, в некоторой программе встречается команда </P>
<CENTER>MOV (R7)+, R2</center>
<P>и в следующем за ней слове хранится число 6. Учитывая, что после извлечения команды из ОЗУ счетчик R7 немедленно увеличивается, в момент выполнения команды его содержимое уже показывает на слово памяти, где хранится число 6. Следовательно, в качестве операнда (R7) будет считано именно оно и кроме того R7 автоматически "передвинется" на следующую за константой ячейку благодаря автоинкрементному способу адресации. Таким образом, описанный прием позволяет использовать в качестве операнда константу, хранящуюся непосредственно в команде.</P>
<P>И еще об одной важной детали. Автодекрементный и автоинкрементный методы адресации лежат в основе работы стека (советую не пожалеть времени и самостоятельно проверить это утверждение!) Поскольку в командах процессора PDP все РОН равнозначны, то стек можно организовать не только по R6, но и по другим регистрам. Необходимо только помнить, что сам процессор при обращении к подпрограммам и при обработке прерываний всегда использует стек с указателем именно в R6.</P>
<br>
<P>Завершая обсуждения основных принципов программирования процессора PDP, приведем примеры линейного, разветвляющегося и циклического фрагмента программы.</P>

<p><b>1. Программа вычисления по формулам:</b>

<CENTER>
R1:=R2+R3;<br>
R4:=R3-R2.</center>

<TABLE CELLSPACING=0 BORDER=0 CELLPADDING=2>
<TR><TD>MOV R2, R1</TD><TD>;сразу складывать нельзя, т.к. сумма заменяет </TD>
</TR>
<TR><TD>ADD R3, R1</TD><TD>; второй операнд</TD>
</TR>
<TR><TD>MOV R3, R4</TD><TD>&nbsp;</TD>
</TR>
<TR><TD>SUB R2, R4</TD><TD>&nbsp;</TD>
</TR>
<TR><TD>HLT</TD><TD>&nbsp;</TD>
</TR>
</TABLE>

<P><b>2. В R1 и R2 хранятся некоторые числа. Поместить большее из них в R5, а меньшее - в R0.</b>

<TABLE CELLSPACING=0 BORDER=0 CELLPADDING=2>
<TR><TD>&nbsp;</TD><TD>CMP R1, R2</TD><TD>;сравнить R1 и R2</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>BPL L1</TD><TD>;переход при R1&gt;=R2</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>;<B>если R2&gt;R1</B></TD><TD>&nbsp;</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>MOV R1, R0</TD><TD>&nbsp;</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>MOV R2, R5</TD><TD>&nbsp;</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>BR L2</TD><TD>&nbsp;</TD>
</TR>
<TR><TD>&nbsp;</TD><TD><B>;если R1&gt;=R2</B></TD><TD>&nbsp;</TD>
</TR>
<TR><TD>L1:</TD><TD>MOV R1, R5</TD><TD>&nbsp;</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>MOV R2, R0</TD><TD>&nbsp;</TD>
</TR>
<TR><TD>L2:</TD><TD>HLT</TD><TD>&nbsp;</TD>
</TR>
</TABLE>

<P><b>3. Пусть в R1 задан начальный адрес массива ОЗУ, а в R2 - количество ячеек в нем. Вычислить сумму элементов массива.</b>

<TABLE CELLSPACING=0 BORDER=0 CELLPADDING=2>
<TR><TD>&nbsp;</TD><TD>CLR R0</TD><TD>;очистка суммы</TD>
</TR>
<TR><TD>L1:</TD><TD>ADD (R1)+, R0</TD><TD>;добавить к сумме очередной элемент</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>DEC R2</TD><TD>;уменьшить на 1 число оставшихся элементов</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>BNE L1</TD><TD>;цикл, пока не останется 0 элементов</TD>
</TR>
<TR><TD>&nbsp;</TD><TD>HLT</TD><TD>&nbsp;</TD>
</TR>
</TABLE>

<P><b>Примечание</b>. В программе используется тот факт, что команда DEC автоматически сравнивает результат с 0 - это делает ненужной специальную команду сравнения CMP.</P>

</div>

<center><h3>Л и т е р а т у р а</h3></center>
9. <b>Основы информатики и вычислительной техники</b>: Проб. учеб. пособие для сред. учеб. заведений. Ч.2/ А.П.Ершов, В.М.Монахов, А.А.Кузнецов и др. - М.: Просвещение, 1986. - 143 с.<br>
10. <b>Изучение основ информатики и вычислительной техники</b>: Метод. пособие для учителей и преподавателей сред. учеб. заведений. Ч.2/ А.П.Ершов, В.М.Монахов, М.В.Витиньш и др. - М.: Просвещение, 1986. - 207 с.<br>
11. Зальцман Ю.А. <b>Архитектура и программирование на языке ассемблера БК-0010</b>. Информатика и образование, 1990, N 4-6; 1991, N 1-5.<br>
12. Лин В. <b>PDP-11 и VAX-11. Архитектура ЭВМ и программирование на языке ассемблера</b>. - М.: Радио и связь, 1989. - 320 с.


<p><hr>
© <a href=http://eremin.4u.ru>Е.А.Еремин</a>, 1997<br>
Из книги:<br>
Еремин Е.А. <a href=../author/b1.html>Как работает современный компьютер</a>. - Пермь: изд-во ПРИПИТ, 1997. 176 с.

</td></tr></table>
<center><p>
<hr>
<small>Автор сайта - Евгений Александрович Еремин (Пермский государственный педагогический университет). 
eremin@nm.ru</small>

<p>
<!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='http://www.liveinternet.ru/click' "+
"target=_blank><img src='http://counter.yadro.ru/hit?t26.6;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+
"' alt='' title='LiveInternet: показано число посетителей за сегодня' "+
"border=0 width=88 height=15><\/a>")//--></script><!--/LiveInternet-->
</center>
<br>

<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1916693-1";
urchinTracker();
</script>

</body>
</html>