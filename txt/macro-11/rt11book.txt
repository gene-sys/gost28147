

       RRRRRRRRRR       TTTTTTTTTTTTTT                 1111         1111
       RRRRRRRRRRR      TTTTTTTTTTTTTT                11111        11111
       RR        RR           TT                     1111         1111
       RR         RR          TT                    11 11        11 11
       RR         RR          TT                   11  11       11  11
       RR         RR          TT                       11           11
       RR        RR           TT                       11           11
       RRRRRRRRRRR            TT       **********      11           11
       RRRRRRRRR              TT       **********      11           11
       RR    RR               TT                       11           11
       RR     RR              TT                       11           11
       RR      RR             TT                       11           11
       RR       RR            TT                       11           11
       RR        RR           TT                    11111111     11111111



                                             * * *   *   ***** ***  *   *
                                             * * *   *   *    *   * ** **
                                             * * *  * *  *    *   * * * *
                                             * * * *   * *    *   * * * *
                                             * * * ***** *    *   * *   *
                                             * * * *   * *    *   * *   *
                                             ***** *   * *     ***  *   *
                            ****       *             ++++ +++++ ++++ +++
                           *    *     * *           +       +   +    +  +
                                *    *   *          +       +   +    +  +
                             ***    *     *          +++    +   +++  +++
                                *  *********            +   +   +    +
                           *    *  *       *            +   +   +    +
                            ****   *       *        ++++    +   ++++ +
       * * *   *   *****     ++++    +       +
       * * *   *   *         +   +    +     +
       * * *  * *  *         +   +     +   +
       * * * *   * *         ++++       + +
       * * * ***** *         +   +       +
       * * * *   * *         +   +       +
       ***** *   * *         ++++        +
        ++++ +++++ ++++ +++
       +       +   +    +  +
       +       +   +    +  +
        +++    +   +++  +++
           +   +   +    +
           +   +   +    +
       ++++    +   ++++ +


                                                А р х а н г е л ь с к и й
                                                А н д р е й    Германович

                              М О С К В А - 92



                                     - 2 -
           RT-11, A step by step                          14-Nov-92






                                   Аннотация





       Руководство по операционной системе RT-11, родоначальнице всех однополь-
  зовательских ОС мини-, микро- и персональных ЭВМ, написано в доступной  форме
  и отражает практически все  типичные  ситуации,  появляющиеся  у  начинающего
  пользователя при знакомстве с компьютером. Четыре книги, как четыре  ступень-
  ки, позволяют пройти путь от обычного пользователя до системного  программис-
  та. Каждый вправе остановиться на любой ступеньке, справедливо  полагая,  что
  на данном уровне он готов для профессиональной работы, соответствующей данно-
  му уровню.

       Книга первая - "Система и Пользователь, или создай  текст  этой  книги".
  Цель пользователя отражена уже в названии. Книга предназначена для всех,  кто
  хочет использовать компьютер для  подготовки  текстов,  -  от  машинистки  до
  редактора, от школьника до ученого. Пользователь узнает, как создавать краси-
  вые тексты и спасать свою  информацию  в  случае  аварии.  Книга  написана  с
  помощью средств, в ней описанных. Достинутый уровень - обычный пользователь.

       Книга вторая - "Управление Системой, или как жить в комфорте".  Предназ-
  начена для тех, кто хорошо изучил первую книгу и имеет желание нормально жить
  в XXI веке. В книге рассказано о работе в локальных сетях, о средствах управ-
  ления многими задачами, устройствами и терминалами, о том, как переложить  на
  компьютер всю нетворческую работу. Достигнутый уровень  -  высококвалифициро-
  ванный пользователь.

       Книга третья - "Программирование в Системе". Переход от  пользователя  -
  писателя к прикладному программисту. Это введение в программирование на  мак-
  роассемблере MACRO-11 для начинающих. Но  может  быть  полезно  и  работающим
  программистам. Описано все, что может понадобиться  прикладному  программисту
  для написания совместимых по  различным  версиям  системы  программ,  которые
  хорошо уживаются в системе с другими такими же программами.

       Книга четвертая - "Системное Программирование". Высшая ступень для  тех,
  кто хочет разрабатывать специализированные системы на базе RT-11.

       Популярные операционные системы ФОДОС, РАФОС, ОСДВК и им подобные предс-
  тавляют собой хорошо или плохо сделанные копии с системы RT-11, и Вам впервые
  предлагается обратиться к оригиналу.


                                     - 3 -
           RT-11, A step by step                          14-Nov-92






                                   СОДЕРЖАНИЕ



     Аннотация                                                                2


 1.  ДАВАЙТЕ ПОЗНАКОМИМСЯ                                                    12

 1.1.    Мир, где живет ЭВМ,                                                 12
 1.2.    Что окружает ЭВМ,                                                   12
 1.3.    Как общаться с ЭВМ,                                                 17
 1.4.    И кто правит в мире этом?                                           21
 1.4.1.    На золотом крыльце сидели...                                      22
 1.4.1.1.  Царь, Царевич...                                                  22
 1.4.1.2.  Сапожник, Портной...                                              25
 1.4.1.3.  ...кто ты будешь такой?                                           26
 1.5.    А откуда все это взялось?                                           27
 1.6.    Указ становится законом,                                            32


 2.  КАК МЫ ГОВОРИМ,                                                         34

 2.0.1.    Нормальная форма Бэкуса                                           35
 2.0.2.    Синтаксические диаграммы                                          36
 2.1.    Вавилонское столпотворение,                                         37
 2.1.1.    Алфавит                                                           37
 2.1.2.    С какой стороны посмотреть,                                       39
 2.1.3.    Спецификация файла                                                40
 2.1.4.    Групповая спецификация файла                                      41
 2.1.5.    Умолчания в системе RT-11                                         43
 2.1.6.    Логические и физические имена устройств                           43
 2.2.    Язык интерпретатора командной строки (CSI)                          44
 2.3.    Язык клавиатурного монитора KMON                                    46
 2.4.    Сообщения об ошибках                                                49


 3.  ВЫСОКО СИЖУ, ДАЛЕКО ГЛЯЖУ,                                              52

 3.1.    Дома, дома, дома ...                                                55
 3.2.    Домовая книга,                                                      56
 3.2.1.    А что можно сделать еще?                                          63
 3.2.1.1.  Время бежит, время стоит                                          64
 3.2.2.    Продолжим работу с каталогами                                     65
 3.2.3.    По порядку номеров рассчитайсь,                                   70
 3.2.4.    Как веревочке не виться...                                        77
 3.2.5.    Некоторые подробности                                             79


 4.  ПРОТИВ ЛОМА НЕТ ПРИЕМА,                                                 83

 4.1.    Где начало, где конец?                                              85
 4.2.    А как быть с выходным файлом                                        87
 4.3.    Некоторые подробности,                                              89



                                     - 4 -
           RT-11, A step by step                          14-Nov-92


 5.  ФАЙЛОВАЯ СИСТЕМА                                                       100

 5.1.    Все может случиться,                                               100
 5.2.    Как устроен том?                                                   101
 5.3.    Заглянем в домовую книгу,                                          105
 5.4.    А что же на обложке?                                               110
 5.5.    Структура тома с произвольным доступом                             112
 5.6.    Как лиса сыр делила,                                               114
 5.7.    Для чего это нужно,                                                117
 5.8.    А если быть последовательными,                                     120

 6.  ФИЗИЧЕСКИЕ ОСНОВЫ ЗАПИСИ ИНФОРМАЦИИ                                    124

 6.1.    Для чего нужно форматирование                                      124
 6.2.    Форматы носителей информации                                       125
 6.2.1.    Жесткие диски                                                    132
 6.2.2.    Диск-пакеты и винчестеры                                         134
 6.3.    Формат записи на магнитной ленте                                   136

 7.  ДИСКИ, КАТАЛОГИ, ФАЙЛЫ                                                 138

 7.1.    Форматирование дисков                                              143
 7.2.    Инициализация файловой системы                                     149
 7.3.    Копирование файлов                                                 160

 8.  ПРОДОЛЖИМ НАШИ ИГРЫ                                                    172

 8.1.    Устройство виртуальной памяти                                      172
 8.2.    Логические диски                                                   179
 8.3.    А если обмануть систему,                                           183
 8.4.    Копирование файлов на магнитную ленту                              188
 8.5.    Типовой набор операций с файлом                                    192
 8.6.    Выбор исходных данных                                              196
 8.7.    Какие файлы мы копируем                                            197
 8.8.    Доверяй, но проверяй                                               203
 8.9.    Шило на мыло                                                       205
 8.10.   Печать многих копий                                                206
 8.11.   Заключение.                                                        206

 9.  НАЧАЛО СОЗИДАНИЯ,                                                      208

 9.1.    Как мы пишем,                                                      210
 9.2.    Команды ввода/вывода                                               216
 9.3.    Начало редактирования                                              218
 9.4.    Контекстный поиск                                                  226
 9.5.    Другие полезные команды                                            227
 9.6.    Сообщения об ошибках                                               229

 10. ЭКРАННЫЙ РЕДАКТОР ТЕКСТА                                               233

 10.1.   Загрузка редактора                                                 234
 10.2.   Дополнительная клавиатура                                          237
 10.3.   Элементы редактирования                                            243
 10.4.   Передвижение по файлу                                              245
 10.5.   Удаление     и     восстановление      элементов
         редактирования                                                     248
 10.6.   Основной набор команд                                              253
 10.7.   Работа с файлами                                                   259
 10.8.   Макрокоманды                                                       261


                                     - 5 -
           RT-11, A step by step                          14-Nov-92


 11. KED (продолжение) И ЕГО ДЕТИ                                           266

 11.1.   Команды для программистов                                          266
 11.1.1.   Расстановка локальных меток                                      266
 11.1.2.   Структурная табуляция                                            268
 11.2.   Сообщения об ошибках                                               271
 11.3.   Редактор одной строки                                              281
 11.4.   Программируемые клавиши                                            283

 12. ФОРМАТИРОВАНИЕ ТЕКСТОВ                                                 285

 12.1.   Директивы размещения текста                                        286
 12.2.   Директивы размещения страниц                                       288
 12.3.   Директивы описания структуры                                       289
 12.4.   Служебные директивы                                                292
 12.5.   Структурирование файлов                                            293
 12.6.   Работа с программой DOC                                            294
 12.7.   Сообщения об ошибках                                               295

 13. ЗАПЛАТА НА РУБАШКУ,                                                    296

 13.1.   Правильный вход и ключи                                            297
 13.2.   Команды                                                            298
 13.3.   Редактирование символьных кодов                                    299
 13.4.   Команды для программистов                                          301

 14. СКОРАЯ ПОМОЩЬ,                                                         302


 15. Некоторые проблемы "Электроники-85"                                    307

 15.1.   Текстовый редактор EDK (Edik)                                      307
 15.2.   Вызов редактора                                                    307
 15.3.   Структура данных                                                   308
 15.4.   Команды редактирования в пределах страницы                         308
 15.4.1.   Сообщения редактора EDK                                          309
 15.5.   Программа   постраничной   распечатки    текстов
         LPRINT.SAV                                                         311
 15.5.1.   Ключи установки режимов печати                                   311
 15.5.2.   Команды управления печатью                                       313
 15.6.   Командные  файлы  для  форматирования  текстовых
         файлов                                                             315
 15.6.1.   Командный файл PICA                                              315
 15.6.2.   Командный файл ELITA                                             316
 15.6.3.   Командный файл BILIST                                            316
 15.7.   Переключение кодировок терминала                                   317

 Приложение 1. Синтаксис языков RT-11                                       319


 Приложение 2. Стандартные типы файлов                                      324


 Приложение 3. Необходимые дампы программ                                   328


 Приложение 4. Основной файл построения этой книги                          336



                                     - 6 -
           RT-11, A step by step                          14-Nov-92


                            Б Л А Г О Д А Р Н О С Т И


       В первую очедедь, я должен выразить глубокое уважение, которое я испыты-
  ваю к фирме Digital Equipment  Corporation,  и  ее  президенту  и  основателю
  К.Олсону, за последовательность в проведении технической политики, тщательную
  системную проработку своих изделий и уважительное отношение  к  пользователю.
  Изучение работ фирмы DEC было для меня хорошей школой.

       Я благодарен редактору отдела журнала "Информатика и Образование" Шехов-
  цеву Константину Владимировичу, давшему жизнь первому (журнальному)  варианту
  книги. Его замечания и вопросы сыграли большую роль  в  формировании  оконча-
  тельного варианта рукописи.

       Марк Петрович Гальперин, профессор Ленинградского института точной меха-
  ники и оптики, оказал мне серьезную поддержку в начале моей  изобретательской
  деятельности, без которой не было бы этой книги.

       На протяжении долгих лет исподволь, незаметно передавала мне свой  педа-
  гогический опыт, формировала мое мировозрение и культуру прекрасный  музыкант
  и  педагог  по  классу   фортепиано   музыкального   училища   им.Мусоргского
  (г.Ленинград) Вольпэ Элла Абрамовна, перед которой я в почтении склюняю голо-
  ву.

       И конечно этой книги не было бы без многочисленных атак и вопросов  бес-
  численных ПОЛЬЗОВАТЕЛЕЙ, заставивших меня, несмотря на все превратности судь-
  бы, написать эту книгу.

                                                           спасибо ВАМ всем!!!
                                                              14 ноября 1992г.


                                     - 7 -
           RT-11, A step by step                          14-Nov-92







        **  *   *  **  ***** **** *   *   **
       *  * *  ** *  *   *   *    ** **  * *
       *    * * * *      *   ***  * * * *  *
       *  * **  * *  *   *   *    *   * ****
        **  *   *  **    *   **** *   * *  *



                                   *   *
                                   *  **
                                   * * *
                                   **  *
                                   *   *



          ****  **    ** *     **   **  ***    ** ***** ****   ** *
          *  * *  *  * * *    *  * *  * *  *  * *   *   *     * * *
          *  * *  * *  * ***    *  *  * ***  *  *   *   ***  *  * ***
          *  * *  * *  * *  * *  * *  * *  * ****   *   *    *  * *  *
          *  *  **  *  * ***   **   **  ***  *  *   *   **** *  * ***




        или...


                         С О З Д А Й   Т Е К С Т   Э Т О Й   К Н И Г И
       .



                                     - 8 -
           RT-11, A step by step          Systems World   14-Nov-92


                                                           ПОЛЬЗОВАТЕЛЮ      .
                                                                посвящается...

                               Что бы это значило?
                                       или
                                 О чем эта книга


       - Здравствуйте, Андрей Германович,- встретил меня Алеша,- а у нас  будет
  ОИВТ.
       - Здравствуй, Алеша! Во-первых, дай мне раздеться, а во-вторых, объясни,
  что такое ОИВТ и чем ОНО тебя так обрадовало.
       Алеша Дотошкин, мой сосед по квартире, только что кончил девятый класс и
  перешел в десятый. Парень он шустрый, эмоциональный и очень любознательный. В
  общем, фамилию он свою оправдывает и часто сидит у меня в домашней  библиоте-
  ке, пока мама спать не прогонит.
       - Итак, что же это за зверь - ОИВТ,- спрашиваю я, когда мы устроились на
  диване.
       - Основы Информатики и Вычислительной Техники,- расшифровал Алеша,- учи-
  тельница говорит, что мы все будем работать на компьютерах и  за  год  станем
  программистами.
       - Ну, так уж сразу и программистами,- усомнился я,- да и нужно  ли  всем
  быть программистами?
       - А как же,- завелся Алеша, по-видимому,  повторяя  слова  учительницы,-
  ведь, если скоро везде будут стоять компьютеры, для того, чтобы с ними  уметь
  обращаться, нужно быть программистом, потому что компьютер без программ,  как
  пустой ящик.
       - Даже так?- удивился я.- Ну, тогда ответь мне на вопрос - в какую  сто-
  рону вращается электрон, когда летит от второго к третьему аноду в  кинескопе
  телевизора в 123 строке 756 полукадра третьей серии мультфильма  "Приключения
  капитана Врунгеля"?
       - Как в какую?- уставился на меня Алеша.- Не знаю. Да и  кто  это  может
  знать, разве что электронщики или разработчики телевизора.
       - Но ведь ты же не электронщик,- не уступаю я,- как же ты  можешь  тогда
  смотреть телевизор?
       - А, ... ???
       - Значит,- успокаиваю его я,- достаточно только уметь пользоваться и нет
  нужды копаться у телевизора во внутренностях.
       - Да, по существу,- задумался Алеша,- я ведь только умею включать  теле-
  визор, переключать на нужную мне  программу  и  регулировать  цвет,  яркость,
  контрастность и громкость. Других знаний мне и не требуется для  того,  чтобы
  смотреть телевизор.
       - Тогда второй вопрос,- продолжаю я,- представь,  что  у  нас  в  стране
  будет 300 млн. программистов, что из этого выйдет?
       - Много программ напишут,- быстро ответил Алеша.
       - А кто тебе хлеб испечет, костюм сошьет,- ловлю его я,- ведь все  будут
  программистами?
       - Да,  я  об  этом  не  подумал,-  поставленный  в  тупик  Алеша   вдруг
  улыбнулся,- этак у нас по стране будут ходить раздетые,  голодные,  бездомные
  300 млн. программистов, а компьютеров не  будет,  так  как  их  некому  будет
  делать.
       А хочешь, не дожидаясь сентября, научиться работать на компьютерах? Ведь
  ты летом никуда не уезжаешь?
       - Очень хочу,- загорелся Алеша,- и сразу стану программистом!
       - Опять ты за свое,- охлаждаю я его пыл,- ведь первая задача программис-
  та - создать ТЕКСТ программы. Поэтому сначала научись работать на  компьютере
  как, на пишущей машинке, но так, чтобы не задавать вопросы, как  восстановить
  файл, почему у тебя программа не читается или как поступить в случае тех  или
  иных сообщений системы. Или попробуй создать несколько  самостоятелных  текс-


                                     - 9 -
           RT-11, A step by step          Systems World   14-Nov-92


  тов, например статей, которые впоследствии можно соединить  в  один  сборник-
  книгу. А для начала опиши наши приключения при изучении компьютеров.
       - Это что же, я должен, используя компьютер,-  уточнил  Алеша,-  создать
  книгу о том, что я делал?
       - Вот именно: СОЗДАТЬ ТЕКСТ ЭТОЙ КНИГИ!

       Так, или примерно так, состоялся у меня разговор с соседским мальчишкой,
  который и привел к возникновению этой серии книг.
       Есть некое очарование, которое испытывает  каждый,  используя  небольшую
  отдельную ЭВМ. Оно рождается ощущением полной власти над целой вычислительной
  системой и сознанием того, что все можно попробовать  и  все  можно  сделать.
  Пионеры ЭВМ, создавая и применяя первые машины, почувствовали это очарование,
  оно передалось и современным программистам.
       Некоторые могут возразить, что описанное ощущение  сродни  ностальгии  и
  неуместно в замкнутом мире машинных операций.  Они  утверждают,  что  обычный
  пользователь совершенно  удовлетворен  программированием  на  языке  высокого
  уровня и счастлив, что ему удается игнорировать большинство аспектов оборудо-
  вания, программного обеспечения и создания системы в целом.
       Эта книга предназначена не для тех, кто так думает. Она  для  тех,  кто,
  будучи очарован машиной, желает понять магику,  окружающую  применяемые  уст-
  ройства. Такие пользователи хотят знать  несколько  больше  об  увлекательной
  жизни системы. Эта книга для тех, кто не хочет иметь  поражений  в  борьбе  с
  системой, несмотря на неполадки аппаратуры, сбои  программ  и  подчас  полное
  отсутствие документации. Многие говорят, что обычному пользователю  не  нужно
  знать столько подробностей о системе. Однако как только пользователь остается
  один на один с системой, например работая на персональном компьютере  у  себя
  дома, даже если он не программист, то должен выполнять функции и  лаборатории
  системных программистов, и целой бригады наладчиков оборудования,  и  архива-
  риуса, и администратора системы и только после этого -  пользователя.  Интел-
  лектуальную мощь всех тех, кто раньше  помогал  пользователю  при  работе  на
  большой ЭВМ, он должен теперь вобрать в себя.
       Мы будем говорить не только о том, как запускать программы, но и о  том,
  что при этом происходит или может произойти и почему. Большое место  в  наших
  разговорах уделено истории не только для того, чтобы восстановить  справедли-
  вость, но и для того, чтобы читатель сам мог найти ответы на свои  вопросы  в
  схожих ситуациях. Здесь важна культура и  психология  пользователя.  Как  его
  действия повлияют на жизнь и работу других пользователей. Формы  взаимодейст-
  вия человека с ЭВМ можно разделить на несколько уровней:

  ОДИН пользователь без файловой системы
     - Это, например, работа с калькулятором или персональным компьютером без
       внешних запоминающих устройств, возможно даже на языке высокого  уров-
       ня, таком, как BASIC, FOCAL или FORTH. Независимо от мощности  компью-
       тера такой пользователь подобен младенцу в отдельной кроватке со своей
       собственной (пусть даже и очень красивой, и очень  дорогой)  игрушкой.
       Понятно, что такой пользователь к миру современной информатики никако-
       го отношения не имеет.


       Примечание. Язык  программирования  высокого  уровня  -  это  формальное
  средство для изложения в текстовом виде  шагов,  которые  нужно  предпринять,
  чтобы соответствующим образом переработать заданную информацию. Он  не  отно-
  сится ни к какой конкретной ЭВМ, но  подразумевает  ее  использование.  Конец
  примечания.

  ОДИН пользователь с ОДНОЙ файловой системой
     - Это, например, микро- или мини-ЭВМ с развитой внешней памятью на  дис-
       ках или магнитных лентах. При этом одновременно могут выполняться нес-
       колько задач. Но главное при этом то, что появились понятия  о  файлах


                                     - 10 -
           RT-11, A step by step          Systems World   14-Nov-92


       как о единицах информации и, соответственно, об операциях над  файлами
       и файловой системе. Появился обмен информацией с себе подобными.  Поя-
       вилась возможность нанести вред обществу, распространяя недоработанные
       программы или тексты в уникальной кодировке.

  МНОГО пользователей с ОДНОЙ файловой системой
     - Это, например, мини-ЭВМ или большая универсальная ЭВМ с развитой внеш-
       ней памятью, с развитыми устройствами ввода/вывода информации,  позво-
       ляющими работать одновременно нескольким пользователям. В дополнение к
       предыдущему уровню появляются понятия о защите информации одного поль-
       зователя от преднамеренных или непреднамеренных действий другого поль-
       зователя, а также об Администраторе Системы. Так как процессор в конк-
       ретный момент времени может выполнять только одну задачу, а в  системе
       много задач многих пользователей, то более остро встает вопрос о  дис-
       циплине распределения времени процессора, оперативной памяти и  памяти
       на внешних носителях между задачами и пользователями, о культуре взаи-
       моотношений в системе.

  МНОГО пользователей, МНОГО файловых систем
     - Такая ситуация может возникнуть, например, при работе в сети  несколь-
       ких ЭВМ. При этом особенно повышается ответственность пользователя  за
       свое поведение в общей  системе,  так  как  возможности  нанести  вред
       обществу и конкретным пользователям - колоссальные.


       Примечание. Администратор Системы - это человек, ответственный за  обес-
  печение ежедневного нормального функционирования системы. Он обязан запускать
  систему и проследить за завершением ее работы, регистрировать новых пользова-
  телей и удалять выбывших, обеспечивать  сохранность  файловой  системы  и  ее
  восстановление в случае повреждения,  производить  запуск  учетных  программ,
  сообщающих, кто и в каком количестве использует время  процессора  и  внешнюю
  память. Конец примечания.

       И хотя в книге будет  рассматриваться  операционная  система  RT-11  как
  родоначальница однопользовательских операционных  систем,  компьютеры  класса
  PDP-11 и LSI-11 и их отечественные аналоги - все это только прикладная  часть
  наших знаний. Главное, чему необходимо научиться, - это умение  анализировать
  возникающие ситуации, мыслить категориями системы, находить взаимосвязи между
  отдельными компонентами системы и почаще задавать себе вопросы ЗАЧЕМ и ПОЧЕМУ
  так сделано. Под профессионализмом в книге понимается и умение при  работе  с
  новой системой использовать старые знания, и умение  разобраться  в  причинах
  неполадок и грамотно описать неисправность  специалисту  из  службы  ремонта.
  Знания, которые Вам могут показаться лишними, экономят Ваши деньги.  Вспомни-
  те, сколько раз приходилось отдавать мастеру половину своей  зарплаты  только
  за смену предохранителя.
       В книге преднамеренно говорится не о вычислительной системе, а о системе
  вообще. Одна из причин этого в том, что современные системы из ЭВМ занимаются
  не только и не столько вычислениями. Другая причина заключается в том, что  в
  книге под системой понимается не столько организация аппаратной части и прог-
  рамм операционной системы, сколько организация логических  связей  и  взаимо-
  действие программ с аппаратурой, программ между собой, а также роль и  психо-
  логия человека в этой среде.
       При чтении не нужно впадать в крайности - пытаться  прочитать  книгу  за
  одну ночь или растянуть удовольствие на месяц. Не думайте, что если Вы знаете
  какие-то отдельные моменты, то легко одолеете оставшееся. В  книге  построена
  система понятий и определений, отличающаяся во многом от принятой в остальной
  литературе (особенно это касается редактора текстов). Пропустив  связь  между
  понятиями, Вы можете встать в тупик перед своими привычками. Здесь начинающие
  оказываются в более благоприятном положении. Как правило,  материал  подобран


                                     - 11 -
           RT-11, A step by step          Systems World   14-Nov-92


  так, чтобы прочитывать в день по одной или две главы. Везде, где Алеша  будет
  работать на ЭВМ, повторяйте его действия (или более того) за своей ЭВМ. После
  прочтения Вы заметите, что книга может служить справочником (но только  после
  прочтения), так как каждая глава описывает полностью одну программу, а  чисто
  справочная информация по этой программе сгруппирована в конце главы.

       Но, прежде чем идти в ВЦ, нужно предварительно узнать, что такое компью-
  тер и как с ним разговаривать. Алеша уже поужинал, устроился удобно на диване
  и приготовился слушать сказку...


                                     - 12 -
           RT-11, A step by step          Systems World   14-Nov-92


                            1. ДАВАЙТЕ ПОЗНАКОМИМСЯ



                            1.1. Мир, где живет ЭВМ,
                                       или
                             Физический мир системы


       МИР, огромный и прекрасный, где живут люди  называется  планетой  Земля.
  Леса, поля, моря и горы - все, что нас окружает, все, с чем  мы  общаемся,  -
  это наш мир.
       Быстротечный мир сказок и мечты, льющийся к нам с экрана, - это  другой,
  но тоже реальный мир - мир наших представлений - мир кинематографа.
       ЭВМ тоже должна где-то жить, с чем-то общаться. Мир  ЭВМ  ограничен  тем
  оборудованием, которое с ней тем или иным способом связано.
       Основные устройства, которые подключаются к ЭВМ, -  это  различные  уст-
  ройства внешней памяти. Большие и маленькие, быстрые и медленные. Одни  запо-
  минают информацию отверстиями на бумажной ленте, другие - магнитными  полями,
  как в бытовом магнитофоне, третьи используют для памяти гибкую пластинку, как
  у звукового журнала "Кругозор".
       Не меньшая группа устройств - устройства ввода и вывода информации.  Это
  терминал с экраном, как у телевизора, на  котором  высвечиваются  символы,  и
  клавиатурой, как у пишущей машинки, для ввода данных, команд и просто текста,
  графический дисплей, на экране которого можно рисовать рисунки, как  на  чер-
  тежной доске. Есть и настоящий чертежный стол, на котором ЭВМ рисует сама,  и
  называется он графопостроитель.
       И подобных устройств придумать можно много и их придумывают в  настоящее
  время.. ЭВМ окружает такое множество вспомогательных устройств, что саму  ЭВМ
  уже не видно. Все это - ЭВМ и множество вспомогательных устройств -  и  назы-
  вается аппаратной частью системы (HARDWARE), - это и есть физический мир сис-
  темы.






       1.2. Что окружает ЭВМ,


                                       или
                          Конкретная реализация системы


       В нашем ВЦ есть, наверное, все модели отечественной  мини-вычислительной
  техники. Самым первым здесь появился ДВК-2, на котором мы первое время  будем
  работать. Он был разработан, когда несколько молодых ребят  поняли,  что  все
  платы, которые находятся в микро-ЭВМ "Электроника-60", можно сложить в  одну,
  по возможностям практически не уступающую всей микро-ЭВМ. Дальнейшие  модифи-
  кации ДВК были чисто внешними, кроме ДВК-4, в котором установлен более мощный
  микропроцессор и дополнительное ОЗУ. Для нашего ВЦ характерно, что вся  аппа-
  ратура построена на единых принципах и, как говорят,  программно-  совместима
  между собой. Это и микро-ЭВМ "Электроника-60", МС-1212, ДВК-2, ДВК-3,  ДВК-4;


                                     - 13 -
           RT-11, A step by step          Systems World   14-Nov-92


  персональная   ЭВМ   "Электроника-85",   мини-ЭВМ   -   "Электроника-100/25",
  "Электроника-79". И так как ЭВМ этого семейства можно собирать  из  отдельных
  узлов, как бы кирпичиков, в соответствии с нашими потребностями, то и мы  для
  изучения возможностей системы соберем два комплекта аппаратуры, на которых  и
  будем работать.
       Первый - с минимальными  возможностями  (и,  следовательно,  минимальной
  ценой) - выпускался нашей промышленностью под названием  ДВК-2М.  С  незначи-
  тельными  отличиями  все  сказанное  здесь  относится  и  к   ДВК-3,   ДВК-4,
  "Электроника-85".

  ПРОЦЕССОР
       - для выполнения программ нам необходимо арифметико-логическое устройст-
  во, оперативная память и устройство управления - в нашем случае это одноплат-
  ная микро-ЭВМ "Электроника_НМС-1201".

  ТЕРМИНАЛ
       - для общения с системой нам необходим терминал, который состоит из кла-
  виатуры и в нашем случае дисплея. Мы будем использовать терминал 15ИЭ-00-013,
  но    можно    использовать    и    терминал     венгерского     производства
  "Videoton_VDT52130", а также СМ7209 польского производства.

  ВНЕШНЯЯ ПАМЯТЬ
       - в качестве внешней памяти в малых системах используются накопители  на
  гибких магнитных дисках (дискетах). Мы будем использовать накопители с диске-
  тами диаметром 203мм (или 8 дюймов) ГМД-70, ГМД-7012 или ГМД-7022 и с  диске-
  тами  диаметром  133мм  (или  5,25  дюйма)  НГМД-6022.  В  ДВК-3М,  ДВК-4   и
  "Электроника-85" используются накопители на гибких дисках НГМД-6121А (диаметр
  дискет 5,25  дюйма)  и  накопители  на  жестких  герметичных  дисках  МС-5401
  (МС-5402), работа с которыми в общем  виде  не  отличается  от  ГМД-7012  или
  НГМД-6022. Мы в основном будем использовать диски ГМД-7012, так как они могут
  быть установлены на большую  систему,  что  обеспечивает  простейший  перенос
  информации.

  ПЕЧАТЬ
       при необходимости получать твердую копию  текстов  на  бумаге  в  состав
  комплекса нужно включить  печатающее  устройство.  Для  малых  систем  удобно
  использовать  термопечатающее  устройство  15ВВ1780-002,  печать  на  котором
  происходит нагреванием иголок около специальной бумаги, которая  меняет  цвет
  при повышении температуры.


       Примечание. Здесь термин "ПРОЦЕССОР" используется в современном  понима-
  нии как законченное устройство для обработки данных. Конец примечания.


       Второй вариант системы, которая будет рассматриваться в книге,  обладает
  существенно более широкими возможностями. Подбор аппаратуры происходит анало-
  гично первому варианту.

  ПРОЦЕССОР
       - в    качестве     процессора     будет     использоваться     мини-ЭВМ
  "Электроника-100/25", имеющая более широкий набор команд, чем  "НМС-1201",  а
  также более высокое быстродействие. Кроме того, у  нее  есть  так  называемая
  расширенная (дополнительная) память.

  ТЕРМИНАЛ
       - для  того  чтобы  в  дальнейшем   показать   различия   в   терминалах
  "Videoton_VDT52130" и "15ИЭ-00-013", в данной системе будем использовать тер-
  минал "VDT52130".


                                     - 14 -
           RT-11, A step by step          Systems World   14-Nov-92


  ВНЕШНЯЯ ПАМЯТЬ
       - одно из достоинств систем данного типа -  это  большой  набор  внешних
  запоминающий устройств и их существенно лучшие характеристики. В нашу систему
  мы включим следующие устройства:
       - накопитель ГМД-7012 для переноса информации на малую систему;
       - накопитель на жестких магнитных дисках СМ5400 - основная  быстродейст-
  вующая память большого объема. Жесткий диск очень похож на большую  грамплас-
  тинку диаметром 356мм, только из аллюминия, и  покрыт  магнитным  лаком,  как
  магнитофонная лента. Для защиты от пыли диск помещен в пластмассовую  кассету
  с небольшой щелью для ввода магнитных головок, отчего  произошло  его  второе
  название - "диск-кассета".
       - накопитель ЕС-5061 на жестких диск-пакетах. Быстрая память очень боль-
  шого объема. Диск-пакет очень похож на диск-кассету, но в пакете на одну  ось
  надето несколько (11) жестких дисков, помещенных в съемный жесткий чехол;
       - накопитель на магнитной ленте СМ5300.01 - это медленное,  но  надежное
  запоминающее устройство большой емкости. Оно выполнено так  же,  как  обычный
  бытовой магнитофон, но имеющий не две и не четыре дорожки, а целых девять.  В
  остальном он отличается только габаритами.

  ПЕЧАТЬ
       - в качестве печатающего устройства в данном случае используется матрич-
  ное печатающее устройство ударного действия DZM-180  или  ROBOTRON-1156  (эти
  устройства отличаются друг от друга только габаритами  и  скоростью  печати).
  Печатают они ударами иголок через красящую ленту, а так как иголок несколько,
  то они образуют прямоугольник из точек - матрицу. От того, какие  точки  были
  ударены, зависит, какой символ изображен. Они могут также  подключаться  и  к
  ДВК без каких-либо изменений. Кроме  этого  могут,  использоваться  и  другие
  печатающие устройства - Robotron-K6311, Epson, D-100 и др.


       Таким образом, мы собрали аппаратную часть для двух  систем  -  малой  и
  средней, на базе которых мы будем изучать возможности нашей операционной сис-
  темы. Необходимо хорошо понимать, что состав аппаратуры в  системе  диктуется
  потребностями пользователя при решении конкретной задачи и может  меняться  в
  количественном отношении и в качественном. Мы берем указанный набор аппарату-
  ры для того, чтобы рассмотреть возможно большее количество  вопросов,  возни-
  кающих у пользователя. В свободном разговоре для краткости обычно малую  сис-
  тему называют ДВК (Диалоговый Вычислительный Комплекс), среднюю - "СОТКА" (по
  названию процессора "Электроника-100/25"). Так эти системы будут называться и
  в книге.

       Внешний вид этих систем, так как их можно изобразить с  их  же  помощью,
  показан на Рис.1 и Рис.2.


                                     - 15 -
           RT-11, A step by step          Systems World   14-Nov-92


  ::


         ------------------------+
        /                       /I------- ------------- ------------
       /                       / I      //            //
      /                       /  I     //            //            /
     +-----------------------+   I    //            //            /
     I +-----------------+   I   I   //            //            /
     I I                 I   I   I  //            //            /
     I I                 I   I   / //            //            /
     I I                 I   I  / //            //            /
     I I                 I * I / //            //            /
     I +-----------------+ * I/ /+------------++------------+
    /+-----------------------+ / I            II            I     /
   /                          /  I ==##==     II ==##==     I    //
  +--------------------------+   I *          II *          I   //
  I                      ##  I  /I         *  II         *  I  //
  I                          I //I ==##==     II ==##==     I //   /
  I                          I// I *          II *          I//   /
  +--------------------------+/  +------------++------------+/   /
  +--------------------------+   +--------------------------+   /
  I                  # # #   I  /I                          I  /
  I                          I / I                          I /
  I                          I/  I =====#=====  =====#===== I/
  +--------------------------+   +--------------------------+
                                     +----------------------+
     +------------------------+     / /              /     /I
    / """  """  """   """""" /I    / /--------------/   * / I
   / """"""""""""""" """ """/ /   +----------------------+  I
  / """"""""""""""" """ """/ /    I                      I  /
  IZZZZZZZZZZZZZZZZZZZZZZZZI/     I                      I /
                                  IZZZZZZZZZZZZZZZZZZZZZZI/


                   Диалоговый Вычислительный Комплекс - ДВК-2М


                                     - 16 -
           RT-11, A step by step          Systems World   14-Nov-92


  ::

        --------------++-------------++-------------+
       /             //             //             /I
      /             //             //             / I
     /             //             //             /  I
    +#############++#############++#############+   I
    I .........   II             II             I   I
    I .........   II             II             I   I
    I .........   II             II             I   I
    I """""""" """II=============II             I   I
    I=============II             II             I   I
    I             II             II=============I   I
    I             II             II             I   I
    I       # # # II=============II ==#== ==#== I   I
    I=============II             II=============I   I
    I             II             II :::::::: :: I   I
    I             II             II """""""" "" I   I
    I       # # # II             II-------------I   I
    I=============II             II             I   I
    I             II             II             I   I
    I             II             II             I   /
    I             II             II             I  /
    I             II             II             I /
    +-------------++-------------++-------------+/
                                        --------------
      +-------------+\              ---/             /--+
  ----I+----------+ I \------------/  /-------------/  /I
      II          I I  \          /*                  / I
      II          I I   \        /*                  /  I
      I+----------+ I/I  \      +-------------------+   /
      +-------------+ I  /      I                   I  /
        IZZZZZZZZZZZZZI_/      /I                   I /#
         +--------------+     / IZZZZZZZZZZZZZZZZZZZI/ #
        / """""""  """" /I   /     #                   #
       / """"""""" """ //   /      #                   #
      / """"""""" """ //   /       #  /#               # /#
      IZZZZZZZZZZZZZZI/   /        ##################### #/
                         /         ##/                 ##/
  ZZZZZZZZZZZZZZZZZZZZZZ#         #/                  #/
                        #

                 Комплекс на базе мини-ЭВМ "Электроника-100/25"


                                     - 17 -
           RT-11, A step by step          Systems World   14-Nov-92


       1.3. Как общаться с ЭВМ,


                                       или
                                  Понятие файла


       - Вот мы с тобой сидим и мило беседуем, а как бы ты назвал этот  процесс
  по-другому?
       - У людей это называется - процесс общения,- отвечает Алеша.
       - Ну, а в информатике -  это  процесс  обмена  информацией  между  двумя
  объектами. При этом под объектом может пониматься человек, ЭВМ, животное  или
  что-нибудь другое.
       - А, например, холодильник?- задает каверзный вопрос Алеша.
       - И холодильник,- отвечаю я,- если он "заурчал", то передал информацию о
  том, что в морозилке стало тепло и он начал вырабатывать холод. А если,  нап-
  ример, он долго не "урчит", то это тоже информация о том,  что  он  сломался.
  При этом важен не способ, с помощью которого эта передача происходит,  а  сам
  факт того, что приемник (в данном случае это я) получил некоторую  информацию
  и она вызвала такие же ассоциации, как и у передатчика.
       - Но ведь я не могу передать информацию холодильнику,- возразил Алеша.
       - Можешь,- убеждаю его я.- Ты  можешь  подойти  и  повернуть  регулятор,
  передав информацию о том, до какой температуры нужно охлаждать содержимое.
       Но ты правильно обратил внимание на то, что  передача  информации  имеет
  направление и не всегда возможен двухсторонний  обмен  информацией.  Передача
  информации может происходить не только как перемещение от одного места к дру-
  гому, но и как передача от одного момента времени к  другому,  т.е.  хранение
  информации. Например, когда ты записываешь в  дневник  домашнее  задание,  то
  передаешь информацию самому себе через какой-то промежуток времени.
       - Да, но я не могу тогда передать информацию в прошлое,- заметил Алеша.
       - Правильно, это и есть случай односторонней передачи информации.
       Кроме того, передача информации может происходить с изменением по  опре-
  деленным правилам, т.е. преобразование информации.
       - Это когда я читаю английский текст,- сообразил Алеша,- и в уме перево-
  жу его на русский.
       - Совершенно верно, и в ЭВМ часто происходят такие преобразования.
       При всей своей элементарности вопрос передачи информации (мы не рассмат-
  риваем сейчас техническую сторону этого вопроса) очень важен. Часто  информа-
  цию нельзя принять только потому, что возможная форма приема (или  ассоциации
  приемника) не соответствует форме передачи.
       Таким образом, мы можем сказать, что все наши проблемы сводятся к задаче
  - как передать информацию от одного устройства к  другому,  от  устройства  к
  человеку, от человека к устройству и, наконец, от одного  момента  времени  к
  другому.
       - И мы должны еще,- добавляет Алеша,- уметь преобразовывать ее к удобно-
  му для нас виду.
       - Да, но мы пока говорим об информации как о целом объекте,- говорю  я.-
  На самом деле этот объект может быть очень большим и нужно научиться  переда-
  вать его по частям. Я хочу сказать, что  нам  необходимо  определить,  какими
  порциями можно передавать информацию в системе. И еще один аспект мы не  ука-
  зали - эту порцию информации мы должны уметь найти в системе, т.е. она должна
  иметь какой-то адрес в системе, или, если сказать по-другому,  быть  адресуе-
  мой.
       - Можно передавать по буквам, словам или по строчкам,- фантазирует  Але-
  ша.
       - Да, если у нас информация текстовая,- уточняю я.- А если произвольная?
  В таком случае минимальным элементом информации является байт. В  большинстве
  случаев понятия БАЙТ и СИМВОЛ (буква) текста эквивалентны.


                                     - 18 -
           RT-11, A step by step          Systems World   14-Nov-92


       Примечание. Байт - это минимальный адресуемый элемент  данных.  Первона-
  чально имел размер в 5 бит в телеграфных аппаратах, 6 бит в первых  ЭВМ  типа
  PDP-8 и других, 7 бит в терминалах и телетайпах. Сегодня самый распространен-
  ный вид байта имеет размер 8 бит. Бит - это минимальное  количество  информа-
  ции, может принимать только два значения - 0 и 1, ДА -  НЕТ,  ПРИСУТСТВУЕТ  -
  ОТСУТСТВУЕТ. Конец примечания.

       С другой стороны, при разработке операционной системы это вопрос принци-
  пиальный. Например, в операционной системе UNIX основным адресуемым элементом
  данных является БАЙТ, для операционной системы RSX-11  -  ЗАПИСЬ,  которая  в
  тексте эквивалентна строке.


       Примечание. Примером записи может быть строка  символов,  которая  начи-
  нается символом перевода строки (ПС) и кончается  символом  возврата  каретки
  (ВК). Конец примечания.

       В нашей системе RT-11 адресуемым элементом данных является блок,  содер-
  жащий 512. байт.
       - Но это очень мелкая порция,- замечает Алеша,- примерно четверть  маши-
  нописной страницы. Может быть, можно эти "странички" подшить  в  какую-нибудь
  "папку" и передавать целиком?
       - И при этом ты подшил "странички" в определенном порядке,- спрашиваю  я
  Алешу.
       - Да, ведь они же адресуемые, значит, каким-то  образом  организованы  в
  цепочку или ряд.
       - Тогда в английском языке есть  слово  File,  которое  означает  папка,
  дело, досье, подшитые документы или бумаги. А изначально - шпилька для  нака-
  лывания бумаг.
       - Это как в магазине - для чеков,- быстро нашел аналогию Алеша.
       - Да, и в вычислительной технике это  слово  стало  обозначать  "папку",
  только электронную. А если серьезно, то дадим точное определение файла:

  ФАЙЛ
     - это совокупность адресуемых элементов данных и способа их организации.

       Таким образом,  файл  может  содержать  произвольное  количество  блоков
  (страниц), находиться на любом устройстве (в шкафу). С файлом можно выполнять
  некоторый набор операций, который задается при проектировании системы.
       Давай я буду называть операцию, а ты - находить аналогию из повседневной
  жизни.
       - ПОИСК ФАЙЛА ПО ИМЕНИ.
       - Найти в шкафу папку, на обложке которой указано,  что  в  ней  лежит,-
  быстро ответил Алеша.
       - ЧТЕНИЕ ИНФОРМАЦИИ ИЗ ФАЙЛА.
       - Открыть папку и прочитать ее страницы,  а  затем  закрыть,-  полностью
  описал свои действия Алеша.
       - ЗАПИСЬ ИНФОРМАЦИИ В ФАЙЛ.
       - Открыть папку, записать на странице информацию и  затем  закрыть  ее,-
  опять полностью перечислил свои действия Алеша.
       - СОЗДАТЬ ЗАПИСЬ О ФАЙЛЕ В КАТАЛОГЕ,- не унимаюсь я.
       - Ну, это когда папок много,- задумался Алеша,- тогда удобней на  дверке
  шкафа повесить отдельный листок, в котором записать имя папки и на какой пол-
  ке она находится и, может быть, другие параметры, например когда  папка  была
  начата и какой ее объем.
       - Но ведь у нас еще нет объема,- говорю я,- ты только на листочке  напи-
  сал ее название, а папку на полку не положил. Да и если ты  ее  положишь,  то
  объем папки равен нулю.
       - Но тогда,- стал искать ответ Алеша,- если говорить строго,  мы  должны


                                     - 19 -
           RT-11, A step by step          Systems World   14-Nov-92


  положить в папку какое-то количество листов чистой бумаги и считать это заре-
  зервированным объемом. На папке можно  написать  название  или  обойтись  без
  него. Но если мы хотим иметь каталог, то в нем мы должны указать все атрибуты
  файла, т.е. нашей папки - признак состояния "ПОСТОЯННЫЙ", полное имя,  размер
  (объем), на какой полке шкафа он лежит.
       - Ну, а если мы уже имеем каталог,- втягиваю я его в это  исследование,-
  то как УДАЛИТЬ ФАЙЛ?ж
       - Можно просто снять папку с полки и выкинуть,- торопится Алеша.
       - И засорять окружающую среду,- остановил его я.
       - Какую окружающую среду?
       - Ах, у тебя даже ее нет,- говорю я,- значит тебе, и выкидывать  некуда.
  Значит то, что ты имеешь в шкафу, там должно и остаться. Может, можно сделать
  проще?
       - А можно,- Алеша нашел выход,- просто в каталоге заменить признак "ПОС-
  ТОЯННЫЙ" на "ПУСТОЙ". Нет,- Алеша быстро себя поправил,- на "НЕИСПОЛЬЗУЕМЫЙ".
  Ведь мы не можем из папки выкинуть листочки. Мы  можем  только  предположить,
  что на этих листочках можно заменять информацию,  т.е.  писать  столько  раз,
  сколько нужно.
       - Но тогда мы подошли к очень важному выводу,- говорю я.- Если мы предс-
  тавляем устройство памяти как шкаф с папками на полках, то все  папки  должны
  быть заполнены "листочками", т.е. иметь объем. А используется ли этот  объем,
  мы узнаем из каталога. При этом общий объем шкафа зависит  не  от  количества
  папок, а от их суммарного объема.
       - И кроме того,- замечает Алеша,- в этом  же  шкафу  должен  лежать  наш
  каталог, хоть несколько листочков, который тоже занимает место.
       - А теперь, заметь, что если ты взял папку для работы, то никто другой в
  это время с ней работать не может. Что же будет тогда в нашем каталоге?
       - А я сделаю очень просто,- отвечает  Алеша,-  введу  еще  один  признак
  "ВРЕМЕННЫЙ" и пока я работаю, в каталоге будет отмечено, что это  место  вре-
  менно занято.
       - Прекрасно,- отмечаю я,- у тебя уже  появился  набор  признаков.  Тогда
  такой вопрос: что ты будешь делать, если у тебя в шкафу (а значит и в катало-
  ге)  будет  две  (или  больше)  папки  с  одинаковым   именем   и   признаком
  "ПОСТОЯННЫЙ"?
       - А этого нельзя допускать,- говорит Алеша,- потому что я не смогу  раз-
  личить, какую папку я должен взять. И об этом должна позаботиться система.
       - Это ты правильно заметил, но есть еще одно свойство: ты  можешь  взять
  из шкафа любую папку?
       - Да,- отвечает Алеша,- и с произвольной полки, и из любого ее места.
       - Тогда,- даю я определение,- у тебя устройство с произвольным доступом.
       - Согласен,- говорит Алеша.
       - А раз есть устройство с произвольным доступом, то  можно  придумать  и
  устройство с последовательным доступом. Что-то вроде длинной  полки,  которая
  перемещается мимо тебя, а ты можешь ей управлять и брать папки только в окош-
  ке напротив тебя.
       - А я такую видел,- говорит Алеша.- В нашей поликлиннике в  регистратуре
  истории болезни хранятся на таких полках, свернутых в кольцо.
       - И какая же при этом особенность наблюдается?
       - А у них нет каталога,- вспоминает Алеша,- они просматривают  папку  за
  папкой и по названию на обложке находят нужную.
       - Но в принципе каталог собрать можно?
       - Да, для этого нужно просмотреть обложки всех папок по порядку и назва-
  ния и параметры выписать на отдельный листок.
       - А раз так,- добавляю я,- то эти данные должны быть написаны на  облож-
  ке. И еще необходимо иметь какие-то признаки, которые позволяют явно отделить
  один файл от другого. Это как тесемки для связывания обложек папки.

       Этот разговор был затеян не зря. Кроме  чисто  этимологических  свойств,
  термин "File-Папка" очень точно отражает процессы, происходящие  с  файлом  в


                                     - 20 -
           RT-11, A step by step          Systems World   14-Nov-92


  системах обработки данных. Некоторая неоднозначность возникает из-за  имеюще-
  гося в литературе термина "тип файла". По существу, это тоже имя  файла,  или
  название папки, но которое может указывать на принадлежность данного файла  к
  некоторому множеству файлов с особыми свойствами. Но так как современные опе-
  рационные системы не накладывают ограничений на использование типа, то  можно
  считать (в нашей аналогии), что он соответствует цвету папки. С одной  сторо-
  ны, это позволяет  нам  просматривать  содержимое,  например  только  красных
  папок, с другой - мы имеем право хранить в них произвольную информацию.
       А так как мы должны сообщить системе, с каким файлом хотим работать,  то
  должны уметь написать его адрес. В операционных системах этот адрес называет-
  ся СПЕЦИФИКАЦИЯ ФАЙЛА. В дальнейшем мы разберем точное определение специфика-
  ции файла в RT-11. Сейчас же мы должны понять из аналогии с папкой, что  этот
  адрес должен состоять из имени устройства (номер шкафа, в котором лежит  пап-
  ка), имени файла (название, написанное на папке) и типа файла (цвет папки).
       Если мы можем каким-то образом провести аналогию между формой  запомина-
  ния данных и рассмотренной File-Папкой, т.е. мы можем тем  или  иным  образом
  собрать каталог, то такое устройство называется устройством файловой структу-
  ры. Например, накопители на магнитной ленте представлены в RT-11 в двух видах
  - файловой и нефайловой структуре. Ответственность за структуру данных  (если
  ее можно создать) в устройствах нефайловой структуры  пользователь  берет  на
  себя.
       Кроме того, устройства различаются по методу доступа, как  наши  шкаф  и
  длинная полка. Если мы можем работать с произвольным файлом на устройстве, то
  такое устройство имеет произвольный доступ.  Если  мы  можем  записывать  или
  читать данные только последовательно - файл за файлом,  то  такое  устройство
  имеет последовательный доступ.
       И уже переходя к файлам, уточним о чем мы говорили.

       При записи файла на магнитный диск мы можем записать файл произвольно на
  любое свободное место на диске, а также прочитать произвольный файл, так  как
  каталог содержит информацию не только о файлах, но и о свободных  зонах.  При
  этом свободная зона также считается файлом.

       На устройствах с произвольным доступом  существует  такое  понятие,  как
  состояние файла. А именно файл может  быть  "НЕИСПОЛЬЗУЕМЫМ",  "ВРЕМЕННЫМ"  и
  "ПОСТОЯННЫМ". Это понятие очень важно для понимания того, что будет  происхо-
  дить в системе, когда мы начнем в ней работать.

       Допустим, мы захотели создать на устройстве файл и записать в него неко-
  торую информацию. Что же при этом происходит?
       - В каталог устройства заносится запись о том,  что  на  таком-то  месте
  тома зарезервировано место размером в указанное число блоков для файла с ука-
  занным именем и типом. Т.е. файла еще не существует, а запись о нем в катало-
  ге уже есть. Признак состояния файла - "ВРЕМЕННЫЙ". Говорят, что файл  открыт
  для записи. В общем случае на устройстве  может  существовать  больше  одного
  временного файла с одинаковым именем и типом.
       - По мере поступления информации она записывается в файл в  зарезервиро-
  ванную область на устройстве, и  при  этом  начинает  существовать  настоящий
  файл, содержащий некоторую полезную информацию.  Признак  состояния  файла  -
  "ВРЕМЕННЫЙ".
       - После окончания работы с файлом мы можем его "закрыть"  (точнее,  ска-
  зать системе, что мы закончили работу с файлом и хотим его сохранить)  и  тем
  самым сделать его постоянным. На одном устройстве  должен  быть  только  ОДИН
  файл, имеющий признак состояния "ПОСТОЯННЫЙ" и указанные имя и тип. Это  зна-
  чит, что в каталоге тома должна быть только одна запись о файле  с  указанным
  именем и типом и с признаком состояния -  "ПОСТОЯННЫЙ".  Если  на  устройстве
  есть еще файл с таким же именем и типом, система изменит его признак  состоя-
  ния на "НЕИСПОЛЬЗУЕМЫЙ".
       - Если после окончания работы с файлом мы его не закроем (или, как гово-


                                     - 21 -
           RT-11, A step by step          Systems World   14-Nov-92


  рят, освободим), то система занесет в запись  о  файле  признак  состояния  -
  "НЕИСПОЛЬЗУЕМЫЙ". Такие атрибуты, как имя и тип файла, в дальнейшем использо-
  ваться не будут. При этом система будет считать, что на месте, где  находится
  файл (а он существует), имеется свободная (неиспользуемая)  зона,  равная  по
  размеру файлу.


       Примечание. Состояние файла на устройстве  с  последовательным  доступом
  может иметь признак только "ПОСТОЯННЫЙ". Конец примечания.

       Таким образом, важно отчетливо понимать, что на устройстве с  произволь-
  ным доступом существует файл как объект, содержащий  информацию  и  запись  о
  файле в каталоге устройства. В общем случае они могут быть не  связаны  между
  собой, но мы можем производить какие-либо операции  с  файлом  только  тогда,
  когда сам файл и запись о нем в каталоге имеют однозначное соответствие  друг
  другу и при этом признак состояния файла - "ПОСТОЯННЫЙ".
       Все, что мы говорили о файлах и их существовании, весь комплекс  понятий
  о файлах и операциях над ними носит название файловой  системы.  Более  точно
  можно определить файловую систему как набор правил,  однозначно  определяющий
  свойства файлов как объектов и все операции над ними. Эти правила будут опре-
  деляться и уточняться на протяжении всей книги. Здесь  следует  отметить  еще
  одно свойство файлов.
       Файл может содержать коды символов печатающего устройства, и  этот  файл
  можно вывести на печатающее устройство и получить на бумаге некоторый  текст.
  Такой файл мы назовем текстовым. Файл, содержащий произвольные двоичные коды,
  мы назовем двоичным. Если в двоичном файле коды  записаны  в  соответствии  с
  определенными правилами, то такой файл может являться программой для  процес-
  сора, тогда его можно загрузить в оперативную память  и  выполнить.  В  общем
  случае двоичный файл может не быть программой. Некоторые файлы  могут  содер-
  жать часть произвольных двоичных кодов и часть символьных кодов.






       1.4. И кто правит в мире этом?


                                       или
                       Базовый состав операционной системы


       Как мы видели, мир системы может быть  огромным  и  разнообразным.  Если
  каждый пользователь будет сам писать программы для управления многочисленными
  периферийными устройствами и файлами, то получится  полная  неразбериха,  так
  как каждый пишет по своему. С другой стороны, обмен файлами между пользовате-
  лями будет практически невозможен. Поэтому удобно, чтобы пользователи пользо-
  вались единой управляющей программой или набором программ, которые называются
  операционной системой. Для того чтобы понимать,  о  чем  далее  пойдет  речь,
  дадим определение понятия "ОПЕРАЦИОННАЯ СИСТЕМА".

  ОПЕРАЦИОННАЯ СИСТЕМА
       - это организованный набор программ, предназначенный для управления опе-
  рациями ввода/вывода информации, для управления программами  пользователя,  а
  также облегчения разработки программ и файлов пользователя.

       Мы выделяем программы из общего числа файлов, потому  что  первоначально
  пользователь являлся программистом и его  основная  работа  была  -  создание


                                     - 22 -
           RT-11, A step by step          Systems World   14-Nov-92


  программ. Но в настоящее время пользователь не обязательно должен быть  прог-
  раммистом. Его основная работа может заключаться в создании текстов  (тексто-
  вых файлов), как, например, писатель или машинистка,  или  управлении  произ-
  водством с помощью информационной системы, которая опирается на  операционную
  систему.
       "Программа пользователя" не обязательно должна быть написана пользовате-
  лем. Это может быть программа, входящая в  состав  операционной  системы,  но
  выполняющаяся под управлением системных программ и  служащая  для  расширения
  возможностей системы и удовлетворения нужд пользователя. Т.е. программа поль-
  зователя делает пользователя пользователем.






       1.4.1. На золотом крыльце сидели...


                                       или
                         Структура операционной системы


       И опять, продолжая наши рассуждения, мы попробуем  собрать  операционную
  систему из кирпичиков - программ. При этом нам известно только то определение
  операционной системы, которое было дано выше. Кроме  того,  необходимо  уметь
  представлять потребности пользователя, которым можем быть и мы. Поэтому  нач-
  нем читать определение.






       1.4.1.1. Царь, Царевич...


                                       или
                               Системные программы


       Операционная система предназначена для

       управления операциями ввода/вывода.

       Проанализируем это условие. Ввод  или  вывод  информации  происходит  на
  какое-либо устройство, которое должно быть определено в системе. Каждое  уст-
  ройство имеет свою конструкцию, свои специфические  правила  обмена  информа-
  цией. Отсюда вытекает, что для обмена информацией с каждым устройством должна
  быть своя программа. Эти программы называются драйверами устройств (от  drive
  - приводить в движение) и являются  системными  программами.  Если  мы  хотим
  ввести в систему новое устройство, то прежде всего мы  должны  иметь  драйвер
  этого устройства, т.е. программу, которая обеспечивает  обмен  информацией  с
  этим устройством в таком виде, как это принято в ОС.
       В RT-11 драйвер получает имя соответствующего устройства в системе. Ниже
  приводятся системные имена устройств, а следовательно, и  драйверов,  которые
  мы будем использовать. Часть драйверов является общими для обеих,  используе-
  мых нами аппаратных конфигураций систем. Это:



                                     - 23 -
           RT-11, A step by step          Systems World   14-Nov-92


  TT
       - драйвер системного терминала. Обеспечивает ввод информации с клавиату-
  ры и вывод на экран дисплея. Это устройство с последовательным вводом/выводом
  нефайловой структуры;

  DX
       - драйвер накопителя на гибких магнитных  дисках  ГМД-70  или  ГМД-7012.
  Устройство с произвольным доступом файловой структуры. Полный объем устройст-
  ва 494 блока;

  LP
       - драйвер печатающего  устройства  с  параллельным  выводом  информации.
  Вывод информации подобен выводу на экран дисплея,  но  при  этом  отсутствуют
  многие специальные функции  терминала.  Устройство  последовательного  вывода
  нефайловой структуры. Для "Электроники-85" вместо него  используется  драйвер
  LS для печатающих устройств  с  последовательной  передачей  информации.  Для
  пользователя эта разница не существенна;

  SL
       - драйвер редактора командной строки.  Физически  такого  устройства  не
  существует. Драйвер появился только в RT-11 V5.0  и  позволяет  редактировать
  вводимую с терминала строку или уже введенную, но предназначенную для повтор-
  ного ввода;

  NL
       - еще одно фиктивное устройство, не существующее физически. Оно  "делает
  вид", что выводит информацию на устройство  нефайловой  структуры,  при  этом
  никакого вывода физически не происходит. Очень удобно при отладке программ;

  PC
       - перфоратор и считыватель с перфоленты;


       Для ДВК используется  драйвер  накопителя  на  гибких  магнитных  дисках
  НГМД-6022, который имеет имя MX. Этот драйвер разработан в СССР и не входит в
  исходную систему RT-11. Этот накопитель нельзя подключить к СОТКЕ.

       Для СОТКИ прибавляются драйверы устройств, которые мы подключили  к  ней
  дополнительно:

  RK
       - драйвер накопителя на диск-кассетах RK05  или  СМ-5400.  Устройство  с
  произвольным доступом файловой структуры. Объем 4800 блоков;

  DP
       - драйвер накопителя на диск-пакетах RP03 или ЕС-5061 емкостью 20М байт.
  Устройство с произвольным доступом файловой структуры. Объем 40 000 блоков;

  MT
       - драйвер накопителя на магнитной ленте TM11 или СМ-5300.  Устройство  с
  последовательным доступом файловой структуры;

  VM
       - драйвер виртуальной памяти. Программа, позволяющая использовать допол-
  нительную память, которая имеется в  СОТКЕ,  как  сверхскоростное  устройство
  файловой структуры с произвольным доступом. Драйвер появился только  в  RT-11
  V5.0.  Может   использоваться   также   в   "Электронике-85"   и   ДВК-4.   В
  "Электронике-85" объем достигает 820 блоков;



                                     - 24 -
           RT-11, A step by step          Systems World   14-Nov-92


  LD
       - драйвер логического диска. Физически такого устройства, как это  видно
  из названия, нет. Однако эта программа позволяет на любом физическом диске (а
  точнее, на устройстве файловой структуры с произвольным доступом) работать  с
  конкретным файлом как с устройством файловой структуры с произвольным  досту-
  пом. Драйвер появился в RT-11 V5.0, как логическое развитие имевшихся в  пре-
  дыдущих версиях драйверов UX, UY, UZ. Для того чтобы понять, зачем он  нужен,
  достаточно представить себе  насколько  неудобно  пользоваться  книгой  очень
  большого размера и насколько проще читать ту же книгу,  напечатанную  в  нес-
  кольких томах, беря в руки том за томом. Когда мы начнем работать с накопите-
  лями типа RK или DP (для ДВК-4 или "Электроника-85" он  применяется  на  уст-
  ройстве DW), мы сможем в этом убедиться.


       Таким образом,  мы  подобрали  для  обеих  систем  наборы  программ  для
  ввода/вывода информации на соответствующее устройство. Важно при  этом  пони-
  мать, что каждому устройству в  системе,  фиктивному  или  реальному,  должна
  иметься программа-драйвер.

       Однако для организации всех операций ввода/вывода одних драйверов недос-
  таточно. Необходима еще и некоторая программа, которая  бы  этими  драйверами
  управляла, и в совокупности с ними составляла бы систему ввода/вывода  инфор-
  мации. Такая программа есть в RT-11 и, несмотря на то что мы ее функции будем
  рассматривать отдельно, в самостоятельном виде она не применяется.  Программа
  называется USR (User Service Routine - программа обслуживания  пользователя).
  Программа USR занимается организацией всех операций ввода/вывода и тех, кото-
  рые мы захотели выполнить в диалоговом режиме командами с клавиатуры, и  тех,
  которые требуется выполнить программе пользователя,  исполняющейся  в  данный
  момент.
       По определению операционная система должна управлять программами пользо-
  вателя, т.е. загружать программы в память, следить за распределением  памяти,
  следить за событиями в системе, вести учет времени и выполнять еще много дру-
  гих вспомогательных функций для облегчения разработки программ и файлов поль-
  зователя. Программа такого рода обычно называется монитором (Monitor -  стар-
  ший ученик в классе, управляющий). Так как эта программа управляет всеми дру-
  гими программами, то она должна постоянно  находиться  в  оперативной  памяти
  или, как говорят, "быть резидентной в памяти". Из совокупности этих посылок и
  вытекает название управляющей программы в RT-11 - RMON (Residented MONitor).
       Так как программы ОС хранятся на машинном носителе (магнитной ленте  или
  диске), необходима некоторая программа, позволяющая загрузить  монитор  ОС  в
  оперативную память процессора и запустить ее. Эта программа называется BSTRAP
  (Bootstrap - загрузчик). Загрузчиков у системы несколько, работают они в раз-
  ное время и располагаются в разных программных модулях. Здесь мы только отме-
  тим, что основной загрузчик располагается в файле монитора.
       Еще одно требование, которое необходимо учитывать, касается чисто  чело-
  веческого фактора. Работает с системой  человек,  единственное  его  средство
  общения с системой - это клавиатура для  ввода  команд  и  экран  для  вывода
  информации. Для передачи команд системе необходима программа обработки команд
  с клавиатуры. В RT-11 эта программа  состоит  из  двух  частей.  Клавиатурный
  монитор - KMON (Keyboard MONitor), - выполненный как самостоятельная програм-
  ма, и его работа находится  под  управлением  резидентного  монитора.  Вторая
  часть - интерпретатор командной строки (Command String Interpretator - CSI) -
  реализована как часть программы USR. Это сделано для  того,  чтобы  облегчить
  обращение к системе из программы пользователя.
       Четыре описанные выше программы - BSTRAP, USR, RMON, KMON - на  носителе
  хранятся в виде единого файла, имеющего имя RT11$$. Где "$$"  обозначают  тип
  монитора BL, SJ, FB, XM, TS, PI, AI (про типы мониторов мы будем  говорить  в
  дальнейшем, а пока будем использовать монитор RT11SJ (Single Job - одно зада-
  ние), который позволяет запускать в один момент времени только одну  програм-


                                     - 25 -
           RT-11, A step by step          Systems World   14-Nov-92


  му. Все, что будет говориться о нем без оговорок,  будет  справедливо  и  для
  остальных).


       Примечание. По причинам, которые будут описаны дальше, в  RT-11  V2,  V3
  имя файла монитора обозначалось иначе - @@MN$$. Где @@  -  двухбуквенное  имя
  устройства, которое будет использоватся как системное,  $$  -  тип  монитора.
  Например, в ОСДВК используется монитор MXMNSJ, т.е. однозадачный (SJ) монитор
  (MN), который должен располагаться и загружаться с устройства MX (гибкие дис-
  ки 5.25"). Конец примечания.

       Конечно, можно работать в системе и не зная этих подробностей. Но  поиск
  решения в тупиковых ситуациях, когда, как  говорят,  "система  не  понимает",
  опирается на понимание описанных мелочей. Это во-первых. А во-вторых - в дру-
  гой системе программы будут иметь другие имена, будут по-другому делить между
  собой функции, но функции останутся.

       Еще один файл необходим для работы операционной системы - это  SWAP.  Он
  представляет собой рабочий буфер  системы,  где  сохраняются  важные  области
  памяти пользователя во время операций ввода/вывода.

       Все эти программы и файлы носят название системных,  так  как  самостоя-
  тельно они работать не могут и составляют ядро операционной системы  и  имеют
  тип .SYS. Образно это можно изобразить так, как это показано на рисунке.

                         +---------------+     +---------+
                         !     K M O N   !<===>!         !
                         !---------------!     !         !
                         !     R M O N   !     ! S W A P !
                         !---------------!     !         !
                         !     U S R     !<===>!         !
                         !---------------!     +---------+
                         !  B S T R A P  !
        +----+----+----+--==+====+====+==--+----+----+----+
        ! TT ! SL ! DX ! NL ! RK ! VM ! DP ! MT ! LD ! MX !
        +----+----+----+----+----+----+----+----+----+----+
           !         !         !        !     !        !
           !         V         !        V     !        V
           !    ГМД-7012       !     ЕС-5061  !   НГМД-6022
           V                   V              V
        VDT-52130          СМ-5400         СМ-5300

                         Ядро операционной системы RT-11






       1.4.1.2. Сапожник, Портной...


                                       или
                            Вспомогательные программы

       Вспомогательные программы, или утилиты (Utility), расширяют функциональ-
  ные возможности операционной системы.  Их  набор  определяется  потребностями
  пользователя при решении конкретной задачи. И все-таки среди множества утилит
  есть программы, необходимость  которых  диктуется  независимостью  работы  от


                                     - 26 -
           RT-11, A step by step          Systems World   14-Nov-92


  сбоев и неполадок системы - аппаратуры и программ.

       Одна из самых важных  функций  -  это  копирование  файлов.  Копирование
  выполняется при переносе файла с устройства  на  устройство,  при  выводе  на
  печать. Скопировать файлы операционной системы с эталона - это первое, с  чем
  сталкивается пользователь. В RT-11 для этой цели используется  программа  PIP
  (Peripheral Interchange Program - программа обмена с периферией).
       Файлы хранятся на устройстве внешней памяти. Устройство файловой  струк-
  туры имеет каталог, и с ним надо работать. Организация каталога,  внесение  в
  него записей, запись  идентификатора  тома  и  имени  владельца,  копирование
  информации с устройства на устройство, используя абсолютные номера блоков,  а
  не имена файлов. Все эти операции в RT-11  выполняет  программа  DUP  (Device
  Utility Program - программы обслуживания устройств).
       Программист работает вслепую. Никто и никогда не видел  программу  и  не
  увидит. Никто не видел файл, хранящийся на магнитном диске. И когда возникают
  сбои - ошибки аппаратуры или программ, ошибки самого  пользователя,  -  очень
  хочется посмотреть, что произошло в системе, что  изменилось.  Получить  хоть
  малейшую информацию для анализа возникшей ситуации.
       Одной из таких программ является программа DIR (DIRectory). Эта програм-
  ма позволяет распечатать каталог устройства файловой структуры в удобном  для
  пользователя виде. Используя информацию программы DIR, полученную в различные
  моменты времени, можно сказать, что происходило в системе и что не происходи-
  ло.
       Программа DIR выдает пользователю информацию о файлах и о занимаемых ими
  блоках на устройстве. Часто требуется более  подробная  информация,  например
  какие коды находятся в данном месте устройства. Для этого в RT-11 использует-
  ся программа DUMP. Следует отметить, что эта программа часто позволяет  полу-
  чить информацию об устройствах в тех случаях, когда другие программы бессиль-
  ны.

       Итак, в качестве вспомогательных программ  мы  включили  в  операционную
  систему четыре. Программы PIP, DUP - это руки операционной системы, DIR, DUMP
  - это глаза. Взаимодействие этих программ с файлом показано ниже.

            +-------+       +----------+      +---------+
            ! D U P !<=====>!  Запись  !=====>!  D I R  !
            +-------+       ! о  файле !      +---------+
                            +==========+
                            !          !
            +-------+       !          !      +---------+
            ! P I P !<=====>!  Ф А Й Л !=====>! D U M P !
            +-------+       !          !      +---------+
                            +----------+

                        Взаимодействие программ с файлом






       1.4.1.3. ...кто ты будешь такой?


                                       или
                             Остальные программы ОС

       Те программы, которые мы рассматривали выше, используются в  большинстве
  случаев. Любые другие программы включаются в состав ОС только для  расширения


                                     - 27 -
           RT-11, A step by step          Systems World   14-Nov-92


  конкретного набора функций системы. Это могут  быть  программы,  поставляемые
  вместе с операционной системой или написанные пользователем. Для  того  чтобы
  эти программы могли входить в состав операционной системы,  они  должны  быть
  написаны с учетом правил обмена информацией и правил  существования  системы.
  Программы должны учитывать не только возможное взаимодействие с  одновременно
  работающими программами, но и привычки  пользователя,  оставшиеся  от  других
  программ, входящих в систему. Правила могут несколько меняться  от  версии  к
  версии, и поэтому основное правило для надежной работы системы - все програм-
  мы операционной системы должны быть одной версии.






       1.5. А откуда все это взялось?


                                       или
                                 Немного истории

       ЭВМ Whirlwind (Вихрь), разработанная в  Массачусетсском  технологическом
  институте (МТИ) в начале 50-х годов, явилась в некотором смысле первой персо-
  нальной ЭВМ. Сидя перед телевизионным экраном  этой  16-ти  разрядной  ЭВМ  и
  пользуясь клавиатурой, световым пером, манипулятором  "джойстик"  и  звуковым
  сигналом, инженер мог выполнять различные  вычисления  в  диалоговом  режиме.
  Ширина каждой разрядной секции такой ЭВМ составляла 0.6м, а высота 3.35м; вся
  ЭВМ занимала площадь 232 квадратных метра, т.е. имела довольно большие  габа-
  риты, и все же она была поистине интерактивной ЭВМ.
       Для того чтобы реализовать идеи, заложенные  в  ЭВМ  Whirlwind,  в  виде
  быстродействующих простых интерактивных ЭВМ, в 1957 году была основана  фирма
  Digital Equipment Corporation (DEC). Первые машины PDP-11 корпорации DEC поя-
  вились в начале 70-х годов. В отличие от серии  PDP-8,  представляющей  собой
  многократное повторение по существу одной и той же машины в разных технологи-
  ческих вариантах, семейство PDP-11 задумано и осуществляется как  ряд  машин,
  объединенных единой архитектурой, но значительно отличающихся друг от друга в
  отношении производительности и цены. Семейство PDP-11 неуклонно расширяется и
  включает в себя уже более двадцати  моделей,  покрывающий  обширный  диапазон
  мощностей - от микрокомпьютера LSI-11, поставляемого в минимальном варианте с
  8К байт памяти, до "супер-микро" Micro/PDP-11/83 с памятью 4М байта и  произ-
  водительностью на уровне средних моделей IBM 360/370.


       Примечание. Обычно буквы "К" и "М" служат для обозначения величин,  рав-
  ных 1000 и 1000000 соответственно. Однако при  рассмотрении  памяти  вычисли-
  тельных машин по рекомендации Американского Института Национального  Стандар-
  тов (ANSI) эти буквы обозначают величины 1024 и 1048576. Конец примечания.

       Младшие и средние машины выпускаются в  двух  вариантах:  в  завершенном
  оформлении для конечного пользователя (PDP-11/10,  11/20,  11/40)  и  в  виде
  полуфабрикатов для комплектования систем (PDP-11/04,  11/05,  11/15,  11/35).
  Старшие модели (PDP-11/45, 11/50, 11/55, 11/60, 11/70) независимо от назначе-
  ния поставляются в завершенном варианте. К  машинам  PDP-11  имеется  богатый
  выбор периферийных устройств, выпускаемых как самой фирмой Digital  Equipment
  Corporation, так и многими другими фирмами.
       Замечательной чертой семейства PDP-11 является тщательно соблюденная  на
  всех уровнях совместимость  аппаратуры,  программного  обеспечения,  а  также
  кодов и форматов представления данных на различных носителях.
       Во многих странах выпускались как аналоги,  так  и  машины  архитектурно


                                     - 28 -
           RT-11, A step by step          Systems World   14-Nov-92


  совместимые с машинами  серии  PDP-11.  Это  и  машины  CORAL  4001/4011/4030
  румынского производства, и машины JANUS венгерского  производства  (последние
  большей частью используют советские микропроцессоры  и  другие  комплектующие
  изделия). Среди советских ЭВМ получила наибольшее распространение серия малых
  ЭВМ  (СМ-ЭВМ),  включающая  в  себя  ЭВМ  СМ-3,  СМ-4,   СМ-1420,   а   также
  "Электроника-60", "Электроника-100/25", "Электроника-79" и т.д.
       Ниже мы приводим соответствие ЭВМ класса PDP-11,  выпущенных  различными
  странами и фирмами:

   PDP-11/03
   LSI-11         "Эл-60"                            MERA-60
   PDP-11/04                   СМ-3     CORAL-4001
   PDP-11/05/10
   PDP-11/15/20
   PDP-11/35/40   "Эл-100/25"  СМ-4                  MERA-125
   PDP-11/45
   PDP-11/34                   СМ-1420  CORAL-4011
   PDP-11/24
   PDP-11/44                            CORAL-4030
   PDP-11/50
   PDP-11/55
   PDP-11/60
   PDP-11/70       "Эл-79"
   PDP-11/73
   LSI-11/02
   LSI-11/23       Эл.МС1211
   LSI-11/23+      Эл.МС1212
   microPDP-11/83  Эл.МС0102
   Pro-350         "Эл-85"

       Мы будем говорить в этой книге об операционной системе RT-11 (Real  Time
  system pdp-11), разработанной  фирмой  DEC  (Мейнард,  шт.Массачусетс,  США),
  прежде всего потому, что она явилась родоначальницей всех  однопользовательс-
  ких ОС для малых и микро-ЭВМ. Вторая причина - большое количество ОС, так или
  иначе совместимых с RT-11, часто имеют и плохую документацию, которая исполь-
  зует большую часть документации по ОС RT-11, и в своих  рекламных  заявлениях
  настолько искажают ее сущность, что говорить о них - значит внести путаницу в
  весь комплекс понятий однопользовательских систем. Зная исторический  процесс
  и сложившееся положение, легче найти решения при работе с подобными  система-
  ми, используя логику и аналогии.

       - Алеша, чтобы нам не придумывать самим,- прошу я,-  возьми  на  верхней
  полке вон ту толстую книгу.
       - RT-11, Software Support Manual,- читает название Алеша.
       - Да, это руководство, изданное фирмой DEC,- подтверждаю я,- и оно начи-
  нается с истории создания RT-11.
       - Тогда я просто прочитаю ее,- говорит Алеша,- и сразу переведу.
       - Да,- отвечаю,- а я буду дополнять.

       В 1972 году предполагалось, что RT-11 будет  маленькой,  быстродействую-
  щей, простой в обращении ОС для семейства компьютеров PDP-11. Она развивалась
  как однопользовательская система для задач реального времени и вычислений; ее
  основными приложениями были: получение  данных,  управление  технологическими
  процессами или научными экспериментами и, конечно, разработка программ,  рас-
  ширяющих возможности системы.


       Примечание. Задачи реального времени - это задачи, в которых время реак-
  ции системы на запрос пользователя меньше времени реакции самого  пользовате-


                                     - 29 -
           RT-11, A step by step          Systems World   14-Nov-92


  ля. Конец примечания.

       1971 год  был  началом  бурного  развития  компьютерной  промышленности.
  Компьютеру PDP-11 исполнился только год, и Digital демонстрировала  многочис-
  ленные возможности для тысяч применений,  предоставляемых  этим  относительно
  недорогим 16-ти разрядным компьютером.
       Имеющееся программное обеспечение для PDP-11 состояло из PTS (Papir Tape
  Software программное обеспечение на бумажной ленте, которое включало  ассемб-
  лер PAL-11) и DOS-11 (система пакетной обработки).
       Популярная операционная система для PDP-8, называвшаяся OS/8, была  при-
  нята как модель для новой операционной системы PDP-11 и временно была названа
  OS-11. Новая операционная система разрабатывалась как маленькая,  однопользо-
  вательская, интерактивная система, управляемая событиями  от  ввода/вывода  в
  реальном времени, которая могла бы работать на компьютерах PDP-11  с  памятью
  28К слов или меньше. Это обеспечивалось разработкой простой, модульной струк-
  туры; драйверы устройств могли быть использованы  для  передачи  ввода/вывода
  так, чтобы прикладные программы могли быть независимыми от устройств, и файлы
  запоминались бы в смежных блоках на диске так, чтобы управление  записями  не
  вызывало бы беспокойства программиста. Фактическая работа по  развитию  OS-11
  началась в конце 1972 года. Группа из 5 системных программистов и одного сос-
  тавителя документации была набрана для отбора проектов для OS-11  и  создания
  программного обеспечения и описания. В основу работы над OS-11 была  положена
  совместимость с OS/8 и TOPS-10.
       1 версия OS-11 включала однозадачный монитор  и  набор  инструментальных
  средств для разработки программного обеспечения: редактор текста EDIT, транс-
  лятор с языка MACRO-11, редактор связей в программах LINK, отладчик  программ
  ODT, программу обмена с периферийными устройствами PIP и ее вариант для рабо-
  ты с кассетным магнитофоном PIPC, программу  редактирования  двоичных  файлов
  PATCH. BASIC-11, первая дополнительная  система  программирования,  требующая
  RT-11 в качестве базовой системы, также был  частью  версии  1.  Однозадачный
  монитор преусматривал необходимый сервис для работы программ  и  устанавливал
  очередь ввода/вывода системы. ОС поддерживала работу с 7 устройствами: с кас-
  сетным диском RK, печатающим устройством LP, терминалом TT, кассетным  магни-
  тофоном CT, фотосчитывателем с перфоленты PR (Papir  Read),  перфоратором  PP
  (Papir Punch) и накопителем на магнитной ленте DT (DECTape).
       OS-11 сначала была названа RTPS-11 (Real-Time Programing System - систе-
  ма программирования реального времени). Версия RT-11 V1.0  была  завершена  в
  конце 1973 года и дополнена средствами  для  работы  с  графическим  дисплеем
  GT-40 в конце 1974 года.
       Вскоре стало очевидным, что RT-11 удалась. В группу добавились еще  сис-
  темные программисты и разработчики документации, и началось развитие  следую-
  щей реализации. Версии 2, 2В, 2С внесли несколько новых значительных  особен-
  ностей в ОС. Новый монситор позволял  одновременно  выполнять  две  задачи  в
  основном и фоновом (Foreground/Background) режиме. Была  добавлена  поддержка
  новых периферийных устройств, включая накопители на магнитных лентах MM и MT,
  считыватель с перфокарт CR, диск-пакет DP,  накопитель  на  гибком  магнитном
  диске DX. Количество вспомогательных программ увеличилось для улучшения набо-
  ра средств разработки программ. Сюда были включены: программа  сбора  таблицы
  перекрестных ссылок CREF, программа для создания  библиотек  LIBR,  программа
  распечатки содержимого  носителей  DUMP,  программа  преобразования  форматов
  записи на носителях FILEX, программа сравнения текстовых файлов SRCCOM, прог-
  рамма выполнения заданий в пакетном режиме BATCH. Транслятор с языка FORTRAN-
  IV был реализован с версией 2, и ОС теперь включала  библиотеку  подпрограмм,
  названную SYSLIB. Версия 2 была закончена в конце 1974 года; версия  2С  -  в
  начале 1976 года.
       Версия 3 RT-11 была еще одной важной реализацией. Наиболее  значительной
  была разработка монитора расширенной памяти, который представлял собой  двух-
  задачный монитор с добавленными средствами  управления  расширенной  памятью.
  Это позволяло работать с системами, имеющими 124К слов физической памяти (все


                                     - 30 -
           RT-11, A step by step          Systems World   14-Nov-92


  модели PDP-11, кроме  PDP-11/04).  Дополнительные  системы  программирования,
  такие, как  FORTRAN-IV,  MULTI-USER  BASIC-2  (многопользовательский  BASIC),
  использовали преимущества этих особенностей и могли теперь переносить  их  на
  прикладные программы. Были также включены средства поддержки  многотерминаль-
  ных систем и системы протоколирования ошибок.  Командный  язык  DCL  (Digital
  Command Language - командный язык фирмы DEC) развивался  таким  образом,  что
  почти все системные программы должны быть доступны командам монитора, прибли-
  женным к естественному английскому языку. Возможность формирования файлов  из
  этих команд сделало пакетную обработку более удобной, чем в BATCH.
       Была добавлена поддержка для новых устройств фирмы DEC: DL, DM, DY,  NL,
  PC (которое заменяет PR и PP). Были  представлены  еще  системные  программы.
  Функции программы PIP были разделены между программами PIP,  DUP,  DIR.  Были
  включены программы  форматирования  дисков  FORMAT  и  программа  определения
  ресурсов системы RESORC. Пользователю была предоставлена возможность быстрого
  и простого изменения функций ОС, наиболее гибко приспосабливая ее  к  потреб-
  ностям пользователя. В  прилагаемые  пакеты  программ  был  включен  экранный
  редактор TECO. Версия 3 была окончена в конце 1977 года,  а  версия  3в  -  в
  начале 1978 года.
       Наиболее существенные (можно сказать революционные) изменения  произошли
  при разработке RT-11 V4.0. Рабочую систему стало возможным переносить с одно-
  го типа устройств на другой путем простого  копирования,  за  счет  отделения
  файлов монитора от драйверов системных устройств. Именно  поэтому  изменилась
  структура имен мониторов, так как теперь монитор  не  зависел  от  системного
  устройства. При этом обеспечивалась большая  гибкость  в  работе  и  экономия
  памяти как на носителях, так и в ОЗУ процессора.
       Количество одновременно запускаемых программ (задач) было  увеличено  до
  8. В качестве одной из таких задач был предложен диспетчер очередей для  фай-
  лов, выводимых на печатающее устройство (QUEMAN). Это повышало производитель-
  ность пользователя.
       Были предложены мощные средства  сопровождения  программ  BINCOM,  SIPP,
  SRCCOM, SLP, что позволило сделать создание и внесение изменений почти  авто-
  матическим. Также был включен мощный экранный редактор KED и его  версия  для
  терминала VT52 - K52. Версия RT-11 V4.0 была завершена в начале 1980 года.
       Ничто не вечно в компьютерной промышленности. Новое аппаратное обеспече-
  ние и расширяющиеся потребности пользователей потребовали создать современное
  программное обеспечение.
       Версия 5 RT-11, изменявшаяся до весны 1983 года, включала поддержку  для
  новых аппаратных средств, таких, как MSCP и Micro/PDP-11. Монитор расширенной
  памяти теперь поддерживал 22-разрядную адресацию памяти на  центральных  про-
  цессорах с магистралью Q-bus, что предоставляло пользователю адресное  прост-
  ранство для программ до 4М байт.
       Новый  драйвер  виртуальной  памяти  позволял  использовать  расширенную
  память так же, как диск. LD-драйвер был добавлен  для  поддержки  логического
  диска. Драйвер SL (Single Line editor - редактор одной строки) имел поддержку
  программой LET, что позволяло запоминать для любой символьной клавиши  строку
  из 15 символов. Программа IND (INDirect command file  processor  -  процессор
  косвенных командных файлов) и программа  BUP,  которая  позволяла  копировать
  содержимое большого диска на несколько маленьких с автоматическим  формирова-
  нием каталога и наоборот, добавленный  в  дистрибутивный  носитель,  а  также
  переписанный SYSGEN сделали установку и модификацию системы простой  и  удоб-
  ной. Добавленны новые DCL-команды и ключи, а также CCL (Concise Command  Lan-
  guage - язык командных последовательностей) и UCL  (User  Command  Linkage  -
  связь с командами пользователя). В то же время минимальная система  требовала
  для работы 16К слов  оперативной  памяти,  оставаясь  традиционно  для  RT-11
  маленькой, быстрой, интерактивной и удобной для пользования.
       Версия 5.1 RT-11 своим появлением обязана серии персональных компьютеров
  Professinal-300. Кроме того, была обеспечена поддержка новых микропроцессоров
  T-11 и J-11, а также систем на их основе (SBC-11/21, PDP-11/23+,  LSI-11/73).
  Новые периферийные устройства: нгмд RX50, жесткий диск "Винчестер"  RD50/RD51


                                     - 31 -
           RT-11, A step by step          Systems World   14-Nov-92


  для PRO-350 объемом 5/10М байт, жесткий диск "Винчестер"  RA80  объемом  124М
  байта, сменные жесткие диски RC25 объемом 2*26М байт, новый магнитофон TSV05,
  который в 9-ти дорожечном стандарте может запоминать до  28М  байт  на  одной
  ленте и "стриммер" TK25 с объемом кассеты 60М байт, так же получили  програм-
  мую поддержку.
       Были включены средства для  автоматической  установки  RT11AI-монитор  и
  верификации системы IVP (Installation Verification Procedure).  Отсутствие  в
  PRO-300 символьного дисплея потребовало эмуляции его с помощью нового драйве-
  ра PI. Это позволило предлагать пользователю терминалы VT52, VT100 и  др.  по
  его желанию. А с помощью программы SETUP пользователь мог установить парамет-
  ры терминала от цвета символов и фона до набора символов его  родного  языка.
  Исполнение программ в расширенной памяти с помощью программы VBGEXE позволило
  использовать ресурсы системы до предела.
       Добавленные средства для построения локальных сетей VTCOM позволили пер-
  сональным компьютерам PRO-300 связываться с любыми системами как  фирмы  DEC,
  так и других производителей. Версия 5.1 была закончена в декабре  1983  года,
  Версия 5.1B завершена в январе-марте 1984 года.
       Новый виток усовершенствований включал уже в себя и персональные компью-
  теры. Версия 5.2 RT-11 была дополнена средствами для программирования  графи-
  ческого дисплея, а жесткий диск "Винчестер" RD52 (для PRO-300)  стал  объемом
  33М байта. Для всех систем PDP-11 добавились средства для построения  быстрых
  локальных сетей EtherNet. Поддерживаемые системой устройства печати  пополни-
  лись лазерным принтером LN03.

       Таким образом, в настоящее время RT-11 представляет собой мощную  много-
  задачную, многотерминальную, однопользовательскую  операционную  систему.  На
  базе RT-11, включая ее различные версии, в нашей стране  и  за  рубежом  были
  "разработаны" совместимые с ней операционные системы. Ниже  приводится  соот-
  ветствие различных версий RT-11 и других систем:

     DEC       Венгрия  СССР     СССР      СССР  Румыния Польша
  RT-11 V2.0   FOBOS     -      ФОДОС-2В    -      -       -
  RT-11 V3.0   FOBOS   РАФОС      -       ОСДВК  MINOS   RT-60
  RT-11 V4.0     -     РАФОС-2    -       ОСДВК  MINOS   RT-60
  RT-11 V5.0     -       -      ФОДОС-II    -       -      -
  RT-11 V5.1     -       -      ФОДОС-III   -       -      -
  RT-11 V5.2     -       -        -         -       -      -
  RT-11 V5.3     -       -        -         -       -      -
  RT-11 V5.4     -       -        -         -       -      -

       Все примеры, приводимые в книге, будут  ориентированы  на  использование
  RT-11 V5.1B, но объяснения справедливы для  всех  перечисленных  операционных
  систем. Любые отличия между версиями будут так или иначе оговариваться в каж-
  дом конкретном случае. Таблицы соответствия команд клавиатурного  монитора  и
  интерпретатора командной строки взяты из исходных текстов клавиатурного мони-
  тора версии RT-11 V5.1В, каталог дистрибутива,  которой  приведен  в  седьмой
  главе.
       В конце 1975 года Гарри Килдэл, организовавший в 1976 году фирму Digital
  Research, использовал принципы RT-11 и разработал операционную  систему  CP/M
  (Control Program for Microprocessor), которая во многих случаях, с точки зре-
  ния пользователя, не отличается от RT-11. Строго говоря, она не является опе-
  рационной системой в полном смысле этого слова. Более точно - это управляющая
  программа, как отражено в ее названии. Заслуга Г.Килдэла в том, что он  приб-
  лизил компьютеры к миллионам рядовых пользователей. Компьютер PDP-11/40 в  то
  время стоил 13500 долл., что было достаточно дорого, а систему, которую пред-
  лагал Г.Килдэл на базе микропроцессора Intel-8080 можно было купить  за  нес-
  колько сот долларов.
       Чисто конструктивные изменения были в следующем.
       - Функции клавиатурного монитора были сокращены до минимума - он  должен


                                     - 32 -
           RT-11, A step by step          Systems World   14-Nov-92


  найти в каталоге программу с указанным именем и запустить ее на выполнение. В
  эту же секцию вошел CSI (говоря терминами RT-11). В результате получился  CCP
  (Console Command Processor).
       - Количество поддерживаемых устройств было сведено до минимума -  гибкий
  диск 8" (а в последствии и 5,25"), консоль,  принтер.  Драйверы  и  USR  были
  объединены в одну секцию, что резко сократило ее объем. В результате получил-
  ся BIOS (Basic Input/Output System).
       - Функции RMON были также сокращены и упрощен способ обращения к ним,  и
  он был преобразован в BDOS (Basic Disk Operating System).
       Все это позволило уложить эти три секции только в две дорожки 8"  диска.
  Остальная часть (75 дорожек) могла быть использована для  каталога  и  данных
  пользователя. По сравнению с RT-11 CP/M занимает места на диске всего  в  два
  раза больше, чем загрузчик монитора в RT-11, и лежит,  по  существу,  на  его
  месте.
       Наличие в CP/M отдельных программ для каждой выполняемой команды  внесло
  путаницу в комплекс понятий "Команда Монитора и вызываемая ею программа".
       Примерно в то же время фирма Intel разработала свою операционную систему
  ISIS-II для систем проектирования микропроцессоров и микроконтроллеров  INTE-
  LECT, основанную на тех же принципах.
       Фирма MicroSoft, которая долгое  время  писала  прикладное  и  системное
  программное обеспечение по заказу Digital Researc для CP/M,  адаптировала  ее
  для других микропроцессоров, назвав  свой  вариант,  выпущенный  на  рынок  в
  августе 1984 года для персональных ЭВМ IBM PC, - MS-DOS.
       Кроме того, необходимо отметить, что фирмой Software &  Hardware  System
  (США) была сделана попытка разработать многопользовательский  вариант  RT-11,
  которая  получила  название  TSX  (в  СССР  ей  соответствует  TS-монитор  из
  РАФОС-2).






       1.6. Указ становится законом,


                                       или
                           Полное определение системы

       Теперь мы можем определить то, что в данной книге будет называться "СИС-
  ТЕМОЙ". Система - это организованная совокупность набора аппаратуры (аппарат-
  ная часть системы - Hardware), набора программ (операционная система -  Soft-
  ware) и правил обмена информацией в системе (Interface), предназначенная  для
  удовлетворения нужд пользователя.


  Литература:

       Предлагаемая литература должна помочь читателю не только  разобраться  в
  данной главе, но и подготовить к чтению следующих глав. Следует понимать, что
  в работе системного программиста книги по программированию  и  вычислительной
  технике занимают не первое место, хотя и не последнее.


  1. Варга Б., Димень Ю., Лопариц Э.
     Язык, Музыка, Математика.
     Пер. с венгерского Ю.А.Данилова.
     М., Мир, 1981.



                                     - 33 -
           RT-11, A step by step          Systems World   14-Nov-92


       Эта книга не имеет никакого отношения ни к программированию, ни к вычис-
  лительной технике, ни к операционным системам. Даже к содержанию  этой  главы
  она имеет весьма косвенное отношение. Главное, для чего ее предлагается  про-
  читать именно сейчас, - это сформировать у читателя умение находить и желание
  искать аналогии в окружающем нас мире. Без этого умения дальнейшая  работа  в
  системе будет неэффективной и не продвинется дальше любительства.


  2. Рафаэл Б.
     Думающий компьютер.
     Пер. с английского В.П.Стефанюка.
     М., Мир. 1979.

       Несмотря на то  что  Бертран  Рафаэл  является  специалистом  в  области
  искусственного интеллекта, в предлагаемой книге должно привлечь внимание уди-
  вительно точное описание сущности ЭВМ и значение, которое Рафаэл придает пос-
  тановке задачи. В точной постановке задачи содержится более половины решения.


  3. Колин А.
     Введение в операционные системы.
     Пер. с английского И.Х.Зусман.
     М., Мир, 1975.

       Достоинства этой книги очевидны: одна из самых тоненьких,  с  прекрасным
  юмором рассказывает об основных чертах операционных систем,  не  опираясь  на
  какую-нибудь конкретную систему. Следует отметить, что эпиграфы к каждой гла-
  ве книги настолько точно формулируют идею, что глава является скорее  иллюст-
  рацией к эпиграфу, чем самостоятельным носителем идеи.


  4. Уорвик М.
     Введение в операционные системы. Основные понятия.
     В книге "Супервизоры и операционные системы"
     под ред. Дж.Каттла и П.Робинсона.
     М., Мир, 1972.

       Прекрасный взгляд на операционные  системы,  с  точки  зрения  различных
  групп людей. Мартин Уорвик в начале задается вопросом -  зачем  нужна  опера-
  ционная система? Пытаясь ответить на этот вопрос,  он  приходит  к  некоторым
  выводам - какими качествами должна обладать хорошая операционная система.


                                     - 34 -
           RT-11, A step by step      Systems Languages   14-Nov-92


                               2. КАК МЫ ГОВОРИМ,

                                       или
                             Язык общения с системой

                                   Если профессионал не настаивает на точности
                                   высказываний,  является   ли  он  подлинным
                                   профессионалом?                           .
                                                                      Дж. Фокс


       Муравей нашел вкусную травку, одному не дотащить и надо сообщить прияте-
  лям, но как? Муравей обозначает дорогу определенными запахами.
       Человек еще не произошел от обезьяны и, будучи в образе обезьяны, увидел
  для себя и для других себе подобных опасность.  Как  сообщить?  Жестами  рук,
  головы и движениями тела он предупреждает своих сородичей.
       Человек встал на ноги, одел пиджак и шляпу. В парадном костюме, с  буке-
  том пришел на свидание с  прекрасной  особой  противоположного  пола.  Он  ее
  любит, она его любит. Как им передать это друг другу? Запахом цветов, жестами
  рук, головы и словами.
       Всегда, когда нужно передать информацию, используется язык общения.  Это
  может быть язык запахов, язык жестов или слов. Не важно какой язык - главное,
  чтобы и источник информации, и  приемник  одинаковым  образом  обозначали  ту
  идею, которую источник хочет передать приемнику.
       - Таким образом, Алеша,- сказал я, когда мы через несколько  дней  снова
  расположились в моей комнате,- сегодня я тебе расскажу, на каких языках мы  с
  тобой будем общаться с системой.
       - А что,- удивился Алеша,- разве русского или английского языка  нам  не
  хватит?
       - Дело не столько в том, что русский или английский  язык  должен  быть.
  Человек для каждого вида деятельности создал свой язык, и не один. Это  удоб-
  ней и, если хочешь, экономичней. Например, когда твоя мама вяжет свитер,  она
  пользуется особым языком, на котором описываются вязанные изделия  в  журнале
  мод.
       - А, я видел,- вспомнил Алеша,- это такие треугольники,  крестики,  кру-
  жочки и что-то еще.
       - Да, а музыканты создали свой язык для записи  звуков.  Поэтому  и  нам
  необходимо изучить хотя бы несколько языков системы, чтобы можно  было  рабо-
  тать. Поэтому приготовься сегодня внимательно слушать.
       Любой язык состоит из словаря, т.е. знаков, обозначающих некоторые идеи,
  и синтаксиса, т.е. правил  составления  из  этих  знаков  выражений,  которые
  являются правильными в данном языке. В области передачи данных  язык  общения
  часто называют протоколом обмена  информацией  или  интерфейсом  обмена.  Для
  успешной работы важно выделить то, что является  синтаксисом.  Не  так  важно
  знать полный словарь языка, сколько знать точные  определения  синтаксических
  правил.
       Словарь языка может расширяться в  зависимости  от  области  применения.
  Если появляется какая-нибудь новая идея, для которой нет обозначения, мы при-
  думываем для нее новый знак. Например, слово РОБОТ было придумано для обозна-
  чения механического человека. Словарь во многом определяется областью  приме-
  нений данного языка. Например, если человек говорит: "Этот  вал  люфтит",  мы
  поймем, что перед нами механик, так как термин "люфт",  "люфтит"  был  введен
  для обозначения небольшого зазора в движущихся механических конструкциях.
       Синтаксис языка определяется с помощью другого языка, который нам  поня-
  тен. Знаками этого языка могут быть слова, схемы или что-нибудь другое.  Нап-
  ример, словесное определение правила может быть таким:  "В  сложноподчиненном
  предложении причастный оборот выделяется запятыми". При этом нам должно  быть


                                     - 35 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  известно, что обозначают знаки "причастный оборот" и "запятая".
       В информатике и программировании для описания синтаксиса языков  большое
  распространение получили примитивный метаязык, называемый  "Нормальная  Форма
  Бэкуса", и синтаксические диаграммы. Мы  будем  пользоваться  обеими  формами
  описания синтаксиса для большей наглядности.






       2.0.1. Нормальная форма Бэкуса



       БНФ - Бэкуса Нормальная Форма, или Бэкуса-Науэра Форма,- является языком
  для описания (части) синтаксиса выражений других языков. Она была  предложена
  примерно в 1959 году Дж.Бэкусом,  одним  из  тринадцати  членов  комитета  по
  Алголу-60, для описания синтаксиса этого языка. Сотрудник фирмы IBM  Дж.Бэкус
  является с также одним из основных создателей языка ФОРТРАН.  С  этой  формой
  также связывается имя П.Науэра (Копенгагенский университет) благодаря предло-
  женным  им  изменениям  и  интенсивному  использованию  БНФ  в  сообщении  об
  Алголе-60, редактором которого он был. К идее такой формы  независимо  пришел
  ранее (в 1956 году) Н.Хомский, лингвист по специальности. БНФ и ее  модифика-
  ции стали средством для описания синтаксиса языков программирования.
       Для ознакомления с БНФ рассмотрим несколько примеров  ее  использования.
  Например, определение термина ОПЕРАТОР может быть следующим:

  <ОПЕРАТОР>::= ПРОПУСТИТЬ|ОТКАЗАТЬ

  и читается оно так: "Элемент  синтаксической  категории,  именуемый  ОПЕРАТОР
  (именно это обозначают забавные скобки "<"  и  ">"),  определяется  как  (это
  обозначает знак "::=") ПРОПУСТИТЬ или (это обозначает вертикальная черта "|")
  ОТКАЗАТЬ.
       Каждое определение БНФ записывается в одну строчку. Если определение  не
  укладывается в одну строчку, оно записывается  на  следующей  без  каких-либо
  знаков переноса. Каждое выражение стоящее справа от знака "::=" и заключенное
  в скобки"<" и ">" можно далее определить более подробно. Например:

  <ОПЕРАТОР>::ПРОПУСТИТЬ|ОТКАЗАТЬ|<ОПЕРАТОР ПРИСВАИВАНИЯ>

  <ОПЕРАТОР ПРИСВАИВАНИЯ>::=<ПЕРЕМЕННАЯ>:=<ВЫРАЖЕНИЕ>

  причем последнюю строчку следует читать так: "Элемент синтаксической  катего-
  рии, именуемый ОПЕРАТОР ПРИСВАИВАНИЯ, определяется как элемент синтаксической
  категории, именуемый ПЕРЕМЕННАЯ, за которым следует сначала знак присваивания
  ":=", а затем элемент синтаксической категории, именуемый ВЫРАЖЕНИЕ.
       Для построения потенциально сложных конструкций  мы  пользуемся  схемой,
  которую рекурсивно можно описать так:

  <КОНСТРУКЦИЯ>::=<ПРОСТАЯ КОНСТРУКЦИЯ>|
                  <ПРАВИЛЬНАЯ КОМПОЗИЦИЯ ЗАПИСЕЙ ВИДА:<КОНСТРУКЦИЯ>>

       Это так называемое "рекурсивное определение", поскольку одна из  альтер-
  нативных форм для синтаксической единицы, именуемой КОНСТРУКЦИЯ (а  именно  -
  вторая форма), содержит в качестве одного из своих компонентов снова  эту  же
  синтаксическую единицу, которую мы определяем.
       Мы можем упростить нашу запись, если введем специальный символ  повторе-
  ния "{" и "}". Например:


                                     - 36 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  <СПИСОК ОПЕРАТОРОВ>::=<ОПЕРАТОР>{;<ОПЕРАТОР>}

  где фигурные скобки следует читать так: "сопровождается  любым  числом  (быть
  может, нулем) экземпляров содержимого скобок.
       Подробно БНФ описана в книге: Девис Грис "Наука программирования"  (При-
  ложение 1). М., Мир, 1984. Расширенная форма Бэкуса-Науэра описана  в  книге:
  К.Йенсен, Н.Вирт "Паскаль. Руководство для пользователя", М., "Финансы и Ста-
  тистика", 1989.






       2.0.2. Синтаксические диаграммы


       Синтаксические диаграммы были введены автором  языка  Паскаль  Никлаусом
  Виртом как средство, облегчающее анализ программ. В некоторых случаях синтак-
  сические диаграммы более наглядны, чем БНФ. Возможные пути, указанные в диаг-
  рамме, соответствуют допустимым последовательностям символов. Начиная с  наз-
  вания диаграммы, путь приводит либо к другой диаграмме, если встречается пря-
  моугольник, либо к основному символу языка, если его  название  заключено  на
  диаграмме в кружок.
       Ниже приведены синтаксические диаграммы для тех определений, которые  мы
  записывали в БНФ.

  1)                  ------------
       ОПЕРАТОР--+-->( ПРОПУСТИТЬ )----->
                 !    ------------   ^
                 !                   !
                 !    ------------   !
                 +-->(  ОТКАЗАТЬ  )--+
                      ------------


  2)                  ------------
       ОПЕРАТОР--+-->( ПРОПУСТИТЬ )------>
                 !    ------------    ^
                 !                    !
                 !    ------------    !
                 +-->(  ОТКАЗАТЬ  )-->+
                 !    ------------    !
                 !                    !
                 !   +------------+   !
                 !   !  ОПЕРАТОР  !   !
                 +-->!ПРИСВАИВАНИЯ!---+
                     +------------+


  3)
                 +------------+      --    +-----------+
  ОПЕРАТОР------>! ПЕРЕМЕННАЯ !---->(:=)-->! ВЫРАЖЕНИЕ !--->
  ПРИСВАИВАНИЯ   +------------+      --    +-----------+



                                     - 37 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  4)
                               /"""""""""""""""""""""""""\
                 +----------+ /     -    +----------+     \
  СПИСОК-------->! ОПЕРАТОР !----->(+)---! ОПЕРАТОР !-------->
  ОПЕРАТОРОВ     +----------+   /   -    +----------+   \
                                \......................./






       2.1. Вавилонское столпотворение,


                                       или
                     Языки команд операционной системы RT-11

       Как было сказано выше, на любом этапе  обмена  информацией  используется
  некоторый язык. В операционной системе информация существует в различных фор-
  мах, и обмен происходит между различными устройствами и  программами.  Отсюда
  вытекает, что каждая программа может иметь свой язык обмена информацией.  Нас
  будут интересовать на данном этапе языки обмена информацией между пользовате-
  лем и программами операционной системы RT-11, или командные языки системы. Но
  сначала познакомимся с их элементами.






       2.1.1. Алфавит




       Алфавит командных языков состоит из тех символов, которые мы можем ввес-
  ти с терминала. Эти символы передаются в программу, обслуживающую терминал, в
  специальном коде для обмена информацией, утвержденном Международной Организа-
  цией по Стандартизации (ISO). Кроме того, получили распространение американс-
  кий вариант этого кода ASCII и русский  вариант  -  КОИ-7.  Определение  этих
  кодов в БНФ дано в приложении. Названия управляющих и специальных литер  дано
  в их английском написании, утвержденном ISO.  Разница  между  американским  и
  русским вариантом в том, что в качестве символов нижнего регистра используют-
  ся прописные буквы русского  алфавита  в  коде  КОИ-7  вместо  строчных  букв
  латинского алфавита в коде ASCII.
       Так как RT-11 создавалась фирмой DEC, то в ней используется  код  ASCII.
  Советские терминалы используют код КОИ-7. Это обстоятельство  надо  учитывать
  при работе с оригинальными версиями  RT-11  на  отечественных  терминалах.  В
  дальнейшем мы будем называть этот код ASCII, в  необходимых  случаях  считая,
  что пользуемся кодом КОИ-7.
       Кроме того, в программах  будет  использоваться  код  RADIX-50,  который
  является подмножеством кода ASCII и определяется следующим образом:

  <СИМВОЛЫ В КОДЕ RADIX-50>::=<RAD50>
  <RAD50>::=SPACE|<ЛАТ>|DOLLARS|PERIOD|<ЦИФРА>


       История управляющих литер начинается с эпохи телеграфа, когда необходимо


                                     - 38 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  было не только передать текст телеграммы, но и управлять телеграфным  аппара-
  том (а затем и телетайпом) у получателя. Необходимо было в отсутствие  опера-
  тора у аппарата получателя включить аппарат, передать текст и выключить аппа-
  рат. Примерно такие же функции несут управляющие литеры в вычислительной тех-
  нике и сегодня. Это литеры управления кареткой <ВК> или  <RETURN>  -  возврат
  каретки; <ПС> или <LF> - перевод строки; <ПФ>  или  <FF>  -  перевод  формата
  (переход на следующую страницу); и литеры, управляющие расположением  текста:
  <ГТ> - горизонтальная табуляция; <ВТ> - вертикальная табуляция.
       - А в пишущих машинках,- сопоставил Алеша,- это рычаг возврата  каретки,
  ручка перевода опорного валика, клавиша горизонтальной табуляции.
       Часть управляющих литер используется в операционной системе для управле-
  ния ее работой, то есть их применение в данном случае отличается  от  функций
  этих литер, определенных в стандарте ASCII. Назовем эти  символы  служебными,
  если мы вводим их с клавиатуры; если эти символы встречаются в файле, то  они
  являются управляющими для того устройства, на  которое  файл  выводится.  Для
  ввода служебных и управляющих  символов  с  клавиатуры  обычно  нужно  нажать
  одновременно две клавиши: одна из них - клавиша обычного печатного символа на
  верхнем регистре, а вторая - специальная, называемая <CONTROL>.  Эта  клавиша
  на советских терминалах обычно обозначается <СУ> или <УПР>, а на  иностранных
  - <CNTRL>. В тексте мы будем обозначать управляющие символы так:

  CTRL/C
     - это одновременное нажатие клавиши <CONTROL> и "C" - большое латинское.

       Несколько служебных символов пригодятся нам уже в следующей главе, и  мы
  определим их сейчас, остальные будем определять по мере необходимости.

  CTRL/C
     - при вводе этого символа система прекращает работу программы  пользова-
       теля и загружает клавиатурный монитор, который готов после этого  при-
       нимать команды оператора. Некоторые  программы  требуют  ввода  CTRL/C
       дважды. Этим символом можно пользоваться  для  прекращения  выполнения
       работы программы, если ее необходимо прервать посередине работы;

  CTRL/S
     - от слова STOP - позволяет приостановить вывод информации на  терминал,
       если оператор не успевает следить за информацией. При этом  информация
       не исчезает и не портится, а работа программы, осуществляющей вывод на
       терминал, приостанавливается;

  CTRL/Q
     - в противоположность предыдущему CTRL/Q (QUEUE  -  очередь,  очередной)
       позволяет продолжить приостановенный вывод с места остановки;

  CTRL/O
     - от слов OFF/ON - выключить/включить. В  отличие  от  CTRL/S  и  CTRL/Q
       работа программы не останавливается, но запрещается вывод на  терминал
       до следующего ввода CTRL/O. Выводимая информация при этом теряется. На
       терминалах 15ИЭ-00-013 этому символу соответствует клавиша <ЛАТ>, поэ-
       тому пользоваться ей следует осторожно. Этот символ в основном  приме-
       няется, когда нужно пропустить большие куски информации, которые прог-
       рамма выводит на терминал.

       Подробное описание кодов дается в приложении. Следует  только  заметить,
  что символы управления являются "непечатными",  так  как  соответствующих  им
  знаков на экране дисплея или на печатающем устройстве нет.



                                     - 39 -
           RT-11, A step by step      Systems Languages   14-Nov-92


       2.1.2. С какой стороны посмотреть,


                                       или
                               Представление чисел

       Мы будем часто пользоваться понятием "представление  числа  в  некоторой
  системе счисления", поэтому нужно поговорить об этом подробнее.
       Если мы говорим, что в некоторой ячейке памяти записано число  123,  это
  еще не значит, что кто-то записал его там, например,  карандашом.  Мы  просто
  договорились, что комбинация состояний запоминающей среды (например,  направ-
  ление намагниченности магнитных частичек на дискете) для  этой  ячейки  пони-
  мается нами как число 123. В качестве запоминающей среды могут служить  счет-
  ные палочки из первого класса. Если палочка стоит на  подставке  -  это  одно
  состояние, если лежит - это другое.
       При этом мы также договорились, что если записали этот код в  символьном
  виде без точки, то это число считается в восьмеричной системе счисления. Если
  мы захотим представить это в десятичной системе счисления,  то  после  записи
  числа будем ставить точку. Это понимает большинство программ в RT-11.
       Нам никто не мешает представить число в двоичной системе  счисления,  но
  при этом только увеличится число цифр и они могут быть только двух видов  "0"
  и "1". Такая цифра называется БИТ.

       Для примера мы покажем различные представления одного и того же числа:

       83.        - десятичное

       123        - восьмеричное

       01010011   - двоичное,

  при этом правый крайний разряд считается самым младшим.

       Для упрощения перевода из двоичной системы счисления в восьмеричную,  мы
  будем записывать двоичные числа, разделяя точкой  по  три  разряда.  Например
  так:

       01.010.011

       Так как все числа имеют какую-то максимальную длину, то и  мы  определим
  максимальную длину двоичного числа, которое у нас будет  применяться,  -  его
  длина 16 двоичных разрядов (бит). Такую запись в 16 разрядов мы назовем  сло-
  вом. Мы будем также пользоваться половинкой слова, состоящей из восьми бит  -
  байтом, определение которого мы уже давали.
       Максимальное число, которое мы можем изобразить комбинацией из  16  эле-
  ментов, принимающих только два состояния, равно 65535.:

         65535.                  - десятичное

         177777                  - восьмеричное

         1.111.111.111.111.111   - двоичное,

  Для байта эти значения будут:


                                     - 40 -
           RT-11, A step by step      Systems Languages   14-Nov-92


         255.         - десятичное

         377          - восьмеричное

         11.111.111   - двоичное,






       2.1.3. Спецификация файла



       Как мы уже говорили, спецификация файла - это адрес,  по  которому  файл
  можно найти. Так как система всегда обращается к файлу, используя его  полную
  спецификацию, мы не будем разделять спецификацию файла  на  части,  хотя  эти
  части и будут определяться самостоятельно. Мы сразу  определим  полную  форму
  принятой в RT-11 спецификации файла:

  <СПЕЦИФИКАЦИЯ ФАЙЛА>::=<SPF>
  <ИМЯ УСТРОЙСТВА>::=<DEV>
  <ИМЯ ФАЙЛА>::=<FILE>
  <ТИП ФАЙЛА>::=<TYP>

  <SPF>::=<DEV>:<FILE>.<TYP>

  <DEV>::=<RAD50>|<RAD50><RAD50>|<RAD50><RAD50><RAD50>
  <FILE>::=<RAD50>|<RAD50><RAD50>|<RAD50><RAD50><RAD50>|
           <RAD50><RAD50><RAD50><RAD50>|
           <RAD50><RAD50><RAD50><RAD50><RAD50>|
           <RAD50><RAD50><RAD50><RAD50><RAD50><RAD50>
  <TYP>::=<RAD50>|<RAD50><RAD50>|<RAD50><RAD50><RAD50>

       Смысл этих длинных записей в том, что имя устройства и тип  файла  могут
  содержать от одного до трех символов, допустимых в коде RADIX-50, а имя файла
  - от одного до шести символов. При этом имя устройства и имя файла разделяют-
  ся двоеточием (:), а имя файла и тип файла разделяются точкой. Например:

       RK1:PROBA.MAC

  является спецификацией файла, который находится на  устройстве  "RK1",  имеет
  имя "PROBA" и тип "MAC".

       Сказанное справедливо для ранних версий RT-11, но начиная с версии RT-11
  V4.0 понятия имени устройства и типа файла, а как следствие и вся  специфика-
  ция файла, было уточнено следующим образом:

     - ИМЯ УСТРОЙСТВА может содержать от одного до трех символов,  допустимых
       в коде RADIX-50, после которых следует двоеточие(:).

     - ТИП ФАЙЛА состоит из точки, за которой могут следовать от нуля до трех
       символов, допустимых в коде RADIX-50.

     - ИМЯ ФАЙЛА может содержать от одного до шести  символов,  допустимых  в
       коде RADIX-50, ни один из которых не является точкой.

  При этом точка и двоеточие являются не разделителями, а входят в состав  син-


                                     - 41 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  таксических единиц ТИП ФАЙЛА и ИМЯ УСТРОЙСТВА. Внешний вид  спецификации  при
  этом не изменился и правильно будет восприниматься в ранних версиях, но в БНФ
  это теперь будет выглядеть по-другому:

   <SPF>::=<DEV><FILE><TYP>
   <DEV>::=<RAD50>:|<RAD50><RAD50>:|<RAD50><RAD50><RAD50>:
   <TYP>::=.|.<RAD50>|.<RAD50><RAD50>|.<RAD50><RAD50><RAD50>

       Это маленькое уточнение не противоречит форме спецификации файла  преды-
  дущих версий, но дает большие преимущества при выполнении групповых  операций
  с файлами.


       Примечание. Необходимо отметить, что если  мы  обращаемся  к  устройству
  нефайловой структуры, используя только имя устройства, то мы все равно  гово-
  рим о полной спецификации файла. Конец примечания.






       2.1.4. Групповая спецификация файла



       Довольно часто необходимо выполнить одну и ту же  операцию  над  группой
  файлов, выбираемых по одному или нескольким признакам. И если сущность данной
  операции, ее логическая основа, позволяет это сделать, то операционная систе-
  ма оказывает при этом необходимую помощь. Поэтому вводится понятие  групповой
  спецификации файлов.
       Первый же взгляд на определение групповой спецификации файла в БНФ  при-
  водит в ужас - такое многообразие вариантов охватывает это понятие. Из  этого
  следует, что никакие шпаргалки не помогут, если не  вывести  общих  принципов
  групповой спецификации. Итак:
       каждый символ в имени или типе файла может быть заменен на знак процента
  "%". Это будет обозначать, что на данном месте  в  спецификации  файла  может
  стоять любой символ, допустимый в коде RADIX-50. Например, у нас имеются сле-
  дующие файлы на устройстве SRC:

       SUB.MAC
       SUB1.MAC
       SUB2.MAC
       SUB3.MAC
       SUB3.BAK
       SUB12.MAC
       SUB.DOC,

  и если мы напишем групповую спецификацию файла в следующем виде:

       SRC:SUB%.MAC,

  то указанная нами операция будет выполнена над файлами:

         SUB1.MAC
         SUB2.MAC
         SUB3.MAC,

  Файл SUB.MAC не попал в этот список, потому что его имя не  имеет  четвертого


                                     - 42 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  символа, на который должен указывать знак "%". Файл SUB12.MAC не участвовал в
  операции, так как его имя состоит из пяти символов, а задано только четыре.

       Любую группу символов в имени или типе файла можно заменить  знаком  "*"
  (звездочка). Это означает, что на данном месте может находиться  любое  число
  любых символов, допустимых в коде RADIX-50, чтобы их общее число не превышало
  предельно допустимое, т.е для имени шесть, а для типа три. Например, если для
  выполнения некоторой операции мы напишем следующую спецификацию файла:

       SRC:SUB*.*C,

  то операция будет выполнена над всеми файлами, кроме файла с типом .BAK,  так
  как у него последний символ типа отличен от "C".
       У нас хорошо получилась групповая операция с файлами, которые имеют одну
  общую часть спецификации. Но если мы имеем на устройстве две или  три  группы
  файлов и, кроме того, еще с десяток файлов,  которые  в  операции  не  должны
  участвовать, и если ранние версии терпели  крах  перед  этой  задачей,  то  с
  помощью уточненной спецификации файла мы сможем решить ее. Главное, что доба-
  вила новая форма спецификации, - это  то,  что  элементы  спецификации  стали
  перечислимыми и определяемыми своим видом, а не с помощью разделителей.  Нап-
  ример, теперь мы можем дать следующую спецификацию файла:

       SRC:(PRO*,SUB%)(.MAC,.DOC)

  Таким образом, в одних скобках собраны две группы файлов, имеющие общие приз-
  наки по именам, в других собраны типы файлов,  которые  будут  участвовать  в
  операции. Скобки здесь выполняют ту же функцию, что и в алгебраических  выра-
  жениях. Отсюда мы можем сказать, что в операции будут  участвовать  следующие
  файлы:

     - все файлы, имена которых начинаются с символов PRO и  имеют  при  этом
       типы .MAC и .DOC.

     - все файлы, имена которых имеют по четыре символа, первые три из  кото-
       рых SUB и имеющие при этом типы .MAC и .DOC.

  То, что имя устройства вынесено за скобки, указывает на  то,  что  все  файлы
  находятся на одном устройстве SRC:.
       И еще одно действие, совершенно недоступное ранним версиям RT-11:

       SRC:(SOURCE+SECOND).TXT

       Тут уже сам текст показывает, что операция, в которой будут  участвовать
  файлы SOURCE.TXT и SECOND.TXT объединяет файлы -  это  можно  указать  знаком
  плюс между именами файлов.
       В приложении можно было бы привести точный синтаксис групповой  специфи-
  кации, но громоздкость такой записи не позволяет ее быстро и точно запомнить.
  Определениями синтаксиса в БНФ нужно пользоватся  в  спорных  случаях,  когда
  что-то не получается. В остальном лучше пользоваться достаточно точными  сло-
  весными определениями отдельных элементов и специальных  символов  и  логикой
  построения списка файлов.



                                     - 43 -
           RT-11, A step by step      Systems Languages   14-Nov-92


       2.1.5. Умолчания в системе RT-11



       Наш рассказ об элементах языков RT-11 был бы неполным, если бы мы  умол-
  чали об умолчаниях в системе.

       Итак, общие правила умолчаний для спецификации файла:

     - имя устройства может не указываться, если имя, подразумеваемое  систе-
       мой или выполняющейся программой, совпадает с тем, которое требовалось
       указать;

     - имя файла может не указываться, если имя, подразумеваемое системой или
       выполняющейся программой, совпадает с тем,  которое  требовалось  ука-
       зать;

     - тип файла может не указываться, если тип, подразумеваемый системой или
       выполняющейся программой, совпадает с тем,  который  требовалось  ука-
       зать.

       Так как мы не знаем еще ни одной программы, то не знаем и  об  устройст-
  вах, именах и типах файлов, которые подразумеваются программами. Но  было  бы
  логично, если бы системе всегда было бы известно хоть какое-нибудь  устройст-
  во. И такое устройство есть - УСТРОЙСТВО, НАХОДЯЩЕЕСЯ В ИЗВЕСТНОМ  ПОЛОЖЕНИИ,
  - Dedice Keep (DK:). Если устройство в спецификации не  указано,  то  система
  будет обращаться к устройству DK:. Кроме удобств, не  всегда  очевидных,  при
  этом возникают побочные эффекты - весь мусор от всех программ будет  на  этом
  устройстве.
       Есть еще одно устройство, всегда известное системе, - это устройство,  с
  которого был загружен монитор ОС и на котором находятся системные  программы.
  Это устройство имеет имя "SY:" и изменить его  нельзя.  Для  надежной  работы
  нежелательно использовать это устройство для своих рабочих программ, файлов и
  пр.






       2.1.6. Логические и физические имена устройств



       В начале, собирая систему, мы говорили, что у каждого устройства в  сис-
  теме есть имя, совпадающее с именем программы драйвера. Эти имена мы  назовем
  физическими, потому что большинство из устройств, с которыми работают драйве-
  ры, можно пощупать руками. С другой стороны, мы только  что  познакомились  с
  именами DK: и SY:. И оказалось, что каждое устройство может иметь  физическое
  имя (например, DX0:) и несколько логических - SY:, DK:. Если  физическое  имя
  может быть только одно, то логических имен у устройства может быть несколько,
  и пользователь по своему желанию  может  назначать  любому  устройству  любое
  логическое имя. При этом в системе должно быть только одно устройство с логи-
  ческим именем SY: (оно назначается системой) и только одно устройство с логи-
  ческим именем DK: (за этим система следит). Как правило, сразу после загрузки
  системы эти имена назначены одному устройству.
       Можно воспользоваться аналогией  со  школьным  классом.  Старосту  класс
  выбирает на целый год, и, например, им будет Вася. Если Вася заболеет, он все
  равно остается старостой. Таким образом, он имеет два имени в классе - "Вася"


                                     - 44 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  (физическое имя) и "староста" (логическое имя). В классе всегда  есть  дежур-
  ный. В разные дни дежурят разные ученики. Так,  дежурным  могут  назначить  и
  Колю, и Олю, и кого-нибудь другого. Чья подошла очередь и  кто  есть  в  этот
  день в школе - является дежурным и в то же время членом школьной  редколлегии
  и вожатым у младших школьников. Таким образом, он также имеет одно физическое
  имя и несколько логических.
       О логических именах мы еще будем не раз говорить в дальнейшем и покажем,
  для чего они нужны и как ими удобно пользоваться.






       2.2. Язык интерпретатора командной строки (CSI)



       Как уже говорилось, интерпретатор командной строки является частью прог-
  раммы USR. Его задачей является прием с терминала или из программы  пользова-
  теля списка файлов, связывание этих файлов с программой пользователя и  пере-
  дача ключей и  параметров  из  командной  строки  в  программу  пользователя.
  Интерпретатор CSI сам не выполняет никаких операций ввода/вывода,  но  подго-
  тавливает ресурсы системы для работы с файлами программы пользователя. Именно
  поэтому CSI является частью программы USR, которая, как уже говорилось, зани-
  мается операциями ввода/вывода.
       Итак, элементами данного  языка  являются  спецификации  файлов,  ключи,
  параметры и знаки разделителей. Самый  естественный  знак  разделителя  между
  элементами - запятая. Действительно, перечисляя какие-нибудь вещи, мы  разде-
  ляем их названия запятой. Например:

       стол, стул, скамейка

       первый, второй, третий, четвертый.

  Таким же образом определим и список файлов.

       <СПИСОК ФАЙЛОВ>::=<LSPF>

       <LSPF>::=<SPF>{,<SPF>}

  Но файлы бывают входными, т.е. информация которых является исходной, и выход-
  ными, т.е. те, которые являются результатом работы программы. Чтобы  отделить
  входные файлы от выходных, используется знак  равенства.  И  тогда  командная
  строка CSI может быть определена в БНФ следующим образом.


                                     - 45 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  <КОМАНДНАЯ СТРОКА CSI>::=<CSI>
  <CSI>::=<СПИСОК ВЫХОДНЫХ ФАЙЛОВ>{<КЛЮЧ>}=
          <СПИСОК ВХОДНЫХ ФАЙЛОВ>{<КЛЮЧ>}
  <СПИСОК ВЫХОДНЫХ ФАЙЛОВ>::=<LOSPF>
  <СПИСОК ВХОДНЫХ ФАЙЛОВ>::=<LISPF>
  <LOSPF>::=<SPF>{<КЛЮЧ>}|<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}|
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}|
            ,<SPF>{<КЛЮЧ>}|,,<SPF>{<КЛЮЧ>}|,<SPF>{<КЛЮЧ>},|
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ}>|
            ,<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}|
            <SPF>{<КЛЮЧ>},,<SPF>{<КЛЮЧ>}
  <LISPF>::=<SPF>{<КЛЮЧ>}|<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}|
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}|
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}|
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}|
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},
            <SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>},<SPF>{<КЛЮЧ>}


       Как видно из определения, интерпретатор  командной  строки  обрабатывает
  информацию о шести входных файлах и трех  выходных.  Это  означает,  что  CSI
  передает программе пользователя список из девяти спецификаций файлов (хотя  с
  терминала может быть задано и меньше) и программа пользователя должна исполь-
  зовать первые три спецификации файлов как выходные, т.е. как результат дейст-
  вия, и следующие шесть как входные, т.е. для чтения. Если программа пользова-
  теля будет использовать спецификации файлов каким-либо другим образом, то это
  будет нарушением правил данного языка. Порядок записи спецификаций конкретных
  файлов в командной строке CSI  определяется  конкретной  программой,  которая
  будет обрабатывать эти файлы. Если какой-нибудь выходной файл не нужен, то  в
  командной строке CSI спецификация данного файла (по порядку) должна быть про-
  пущена. Это  накладывает  ограничение  на  количество  спецификаций  файла  в
  командной строке, но не всегда ограничивает количество обрабатываемых файлов.
  Каждая спецификация может быть групповой в той или иной форме.
       Как видно из определения, после каждой спецификации файла  может  следо-
  вать "ключ". Ключ уточняет, какую функцию из  того  набора  функций,  которые
  имеются в программе, необходимо выполнить.


       Примечание. Слово OPTION, которое используется в оригинальной документа-
  ции, дословно означает "право выбора". Пользователю  предоставляется  возмож-
  ность выбрать некоторую функцию из  набора,  определенного  в  программе.  Мы
  будем вместо него использовать слово КЛЮЧ, так как в этом  переводе  оно  уже
  распространилось в отечественной литературе. Конец примечания.

       В качестве дополнительной информации ключ может иметь численное значение
  или символьный аргумент (параметр). Если у ключа несколько аргументов, то они
  разделяются двоеточием. Определение ключа в БНФ довольно простое:

  <КЛЮЧ>::=<OPTION>
  <OPTION>::=/<ЛАТ>{:<ARG>}
  <ARG>::={<ЦИФРА>}|{<ЛАТ>}


       Примечание. Если в качестве аргумента используется дата, то день,  месяц
  и год считаются различными аргументами и указываются через  двоеточие.  Конец
  примечания.


                                     - 46 -
           RT-11, A step by step      Systems Languages   14-Nov-92


       При этом в RT-11 для CSI принято следующее соглашение: если ключ  указан
  после спецификации файла, то он относится только к  этому  файлу,  если  ключ
  указан в конце командной строки, то он относится ко всем  перечисленным  фай-
  лам.
       Все сказанное можно проиллюстрировать следующими примерами.

  OBJ:PROBA,LST:PROBA=SRC:PR1,SRC:PR2,SRC:PR3

  Типичная командная строка CSI, без уточнений ключами и аргументами. Как видно
  из примера, программа будет работать с тремя устройствами OBJ:,  LST:,  SRC:.
  При этом с устройства SRC: файлы будут читаться в том порядке,  в  каком  они
  указаны, а выходные файлы будут записываться на устройства OBJ: и LST:.
       Более подэробный пример может быть такой:

  OBJ:UPR803,LST:UPR803/C:S:E:M/L:TTM/N:BIN=SRC:ROS/M,SRC:UPR

  Это уже строка для реальной программы, у которой уточнения  касаются  второго
  выходного файла (это распечатка программы, а ключи указывают,  в  каком  виде
  она должна быть получена) и первого входного файла, так как он  имеет  особую
  организацию данных.
       Нужно отметить, что если ключ по смыслу может относиться только к одному
  файлу, как в приведенном примере для второго выходного файла,  то  его  можно
  записывать в конце командной строки.
       В целом длина командной строки не должна превышать размера буфера  мони-
  тора, который, как правило, равен 80 символам, т.е.  одна  строка  на  экране
  дисплея, и для ее ввода необходимо в конце нажать клавишу <RETURN> или  <ВК>.
  Так как командную строку CSI необходимо вводить целиком, то несмотря  на  то,
  что буфер монитора может быть больше 80 символов, с клавиатуры мы можем ввес-
  ти только 80 символов.
       Вызов интерпретатора командной строки возможен только из программ  поль-
  зователя. Если мы сами программу не писали, то с вызовом CSI можем встретить-
  ся, когда запускаем системную или прикладную программу  с  несистемного  уст-
  ройства. После запуска программы в качестве приглашения или  признака  готов-
  ности CSI печатает на экране звездочку в начале  строки.  После  этого  можно
  вводить командную строку со спецификациями файлов в виде, который  мы  только
  что рассмотрели.
       В общем же случае оператор общается с программами системы через мощную и
  интеллектуальную, обладающую более гибкими и широкими возможностями программу
  - KMON.






       2.3. Язык клавиатурного монитора KMON



       Язык команд клавиатурного монитора - основной инструмент оператора, т.е.
  человека, сидящего за терминалом, именно инструмент, так как хорошо зная его,
  можно экономить очень много времени. Можно подумать, что KMON всегда находит-
  ся в памяти ЭВМ, раз ему придается такое большое значение,  но  это  не  так.
  Клавиатурный монитор полностью находится под управлением резидентного монито-
  ра. Признаком того, что KMON находится в памяти  и  готов  к  приему  команд,
  является точка в начале строки, за которой  следует  курсор  -  указатель  на
  экране дисплея, показывающий, где будет высвечен следующий символ.  Командная
  строка вводится нажатием клавиш <RETURN> или <ВК>. Если командная  строка  не
  умещается на экране (т.е. больше 80 символов), то можно вводить  ее  частями.


                                     - 47 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  Иногда этот режим называют режимом подсказки. Действительно, при вводе строки
  частями система подсказывает, что нужно дальше вводить.  Однако  подсказка  -
  это для начинающих или при первом знакомстве. Главное -  это  то,  что  можно
  ввести до трех (а в отдельных случаях и больше) строк. Части,  которые  можно
  вводить отдельно разделяются любым количество пробелов или  знаками  горизон-
  тальной табуляции.
       Так как изучению KMON будут посвящены целиком несколько следующих  глав,
  то здесь мы рассмотрим только основные конструкции его языка.
       Первое, что мы должны выяснить, - это какие команды  в  командном  языке
  нам нужны, т.е. составить общую структуру  словаря  языка.  В  нашей  системе
  имеется аппаратура, т.е. устройства, независимо от того,  в  каком  виде  они
  реализованы, и этими устройствами необходимо управлять.
       Значит, нам необходимы команды управления системой. Эти команды устанав-
  ливают и изменяют некоторые параметры и  состояния  устройств.  Например,  мы
  можем сказать системе, чтобы она при выводе  на  печать  преобразовывала  все
  символы нижнего регистра в символы верхнего, или о том, что устройство печати
  не  умеет  автоматически  переводить  страницу.  Для  удобства   назовем   их
  <SYSCNTRL>, и так как каждая команда из этой группы имеет свой синтаксис,  то
  изучение этих команд будет происходить по мере необходимости их применения.
       В системе, если она не выключена и не остановлена, все время выполняется
  какя-нибудь программа. Более того, в общем случае в RT-11 может  одновременно
  находиться в памяти и выполняться  до  восьми  программ,  каждая  из  которых
  выполняет определенную задачу. Их принято называть заданиями (JOB). Но  конк-
  ретная программа нас не всегда будет интересовать, более важно ее положение в
  иерархии системы. Действительно, когда мы будем говорить: "Выполняется опера-
  тивное задание", нас не будет интересовать, какая именно программа выполняет-
  ся. Важно, что при распределении ресурсов системы (в основном временных, нап-
  ример время использования процессора) она имеет наиболее  высокий  приоритет,
  на это может указывать название - "оперативное задание".  Поэтому  необходимо
  иметь команды управления заданиями. Эти команды также имеют свой индивидуаль-
  ный синтаксис, мы назовем их <JOBCNTRL> и также будем рассматривать  по  мере
  необходимости их использования.
       И наконец, еще одна большая и совершенно необходимая группа команд - это
  команды управления файлами (<FILECNTRL>). Они необходимы для вызова  программ
  обработки файлов и передачи им информации о файлах на языке CSI. Эти  команды
  имеют общий синтаксис, хотя и с небольшими исключениями. Здесь мы будем расс-
  матривать только общую часть.
       То, что делают программы под управлением  рассматриваемых  команд  KMON,
  можно сделать и с помощью CSI. Для этого необходимо вызвать программу,  кото-
  рая выполняет соответствующую функцию, и описать ей файлы на языке  CSI.  Это
  не всегда удобно. Во-первых, не всегда  помнишь,  какая  программа  выполняет
  данную функцию. Во-вторых, ключи, уточняющие функцию в CSI, состоят из  одной
  буквы, что затрудняет запоминание соответствия ключа и буквы. А это  приводит
  к ошибкам. Ключи KMON - это полные  слова,  определяющие  требуемую  функцию.
  KMON понимает эти слова по первым буквам. Пятая  версия  RT-11  (и  далее)  в
  отличие от других, особенно приближается к естественному английскому языку. И
  наконец, самое важное, что в CSI не всегда возможны групповые операции и дли-
  на вводимой строки не может быть более 80 символов. Всегда,  когда  мы  будем
  описывать команды KMON, в конце каждой главы будет показано, как  приведенные
  примеры можно выполнить с помощью CSI.

       Итак, общий синтаксис командной строки  для  команд  управления  файлами
  выглядит следующим образом.

  <FILECNTRL>::=<COMMAND>{<КЛЮЧ>} { }
                <LISPF>{<КЛЮЧ}> { }<OUTSPF>{<КЛЮЧ>}
  <КЛЮЧ>::=/<ЛАТ>{<ЛАТ>}{:<ARG>}


                                     - 48 -
           RT-11, A step by step      Systems Languages   14-Nov-92


       Примечание. Пробелы входят в синтаксис командной строки и являются  раз-
  делителями. Там, где допускается один пробел, возможно их любое число.  Конец
  примечания.

       Мы видим, что расположение входных и выходных файлов в командной  строке
  противоположное по сравнению с командной строкой CSI.  Кроме  того,  выходной
  файл может быть только один.
       Для примера приведем командную строку, бессмысленную в своей основе,  но
  которая при определенных условиях, может выполнится в  RT-11  V5.0,  так  как
  синтаксис этой строки совершенно правильный.

  .LOVE JOHN/GOOD MERY

       Как бы вы прочитали эту фразу по  английски:  "любит  Джон  Мери".  Ключ
  /GOOD в данном случае уточняет команду "любить". Но это в  обычной  жизни,  в
  разговорной речи. А как поймет эту фразу KMON RT-11 V5.0?

       Команда LOVE в таблице KMON отсутствует,  соответственно  отсутствует  и
  имя программы, которая выполняет эту функцию. Поэтому KMON  ищет  в  каталоге
  системного устройства файл LOVE.SAV и если находит, то, считая  его  програм-
  мой, загружает в память и запускает на выполнение, передав ему в случае вызо-
  ва CSI информацию о файлах JOHN, MERY и ключ GOOD в формате CSI.

       Что в результате будет сделано? То,  для  чего  предназначена  программа
  LOVE.SAV.

       Какую функцию определяет ключ GOOD? Ту,  какая  для  него  определена  в
  программе LOVE.SAV.

       Где находятся файлы? На устройстве DK:.

       Какие должны быть типы входного и выходного файлов? Такие, какие опреде-
  лены по умолчанию в программе LOVE.SAV.

       При этом мы должны отметить, что файл JOHN является входным, а  преобра-
  зованная из него информация записывается в выходной файл MERY.

       Как мы видим, KMON просто позволяет приблизить язык команд к разговорно-
  му английскому языку, не выполняя никаких операций над файлами. KMON  находит
  программу, которая будет выполнять данную операцию, формирует командную стро-
  ку в формате CSI и контролирует информацию, необходимую для групповых  опера-
  ций. Однако мы видим, что в строке KMON только один выходной файл, а в строке
  CSI - три. Какой выход из этого положения?
       Первый выход напрашивается сам собой - система должна помочь. Если  KMON
  знает о необходимости второго и третьего файлов, то для каждой  команды  есть
  ключи, например /LIST, /OUTPUT и другие, у которых спецификация  файла  пере-
  дается в виде параметра. Например:

  .MACRO/LIST:DX1:PROGRM.LST DX1:PROGRM.MAC

  Возможен другой вариант. KMON передает CSI командную строку, введенную с тер-
  минала, освободив ее от информации, предназначенной ему, преобразовав  какую-
  то информацию в форму, необходимую  для  CSI,  известным  образом.  Остальную
  информацию KMON передает без преобразования.  Отсюда  есть  еще  один  способ
  передачи спецификации файлов CSI - записать спецификации  выходных  файлов  в
  виде списка. При этом необходимо знать, на каком месте в строке должен стоять
  каждый файл. Например, предыдущий пример можно записать следующим образом.

  .MACRO DX1:PROGRM.MAC DK:PROGRM.OBJ,DX1:PROGRM.LST


                                     - 49 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  Здесь мы видим, что файл DK:PROGRM.OBJ, который создавался по  умолчанию,  мы
  должны указывать явно. Поэтому, задавая в таком виде командную  строку  KMON,
  мы выполняем за него работу.
       Поэтому как для запоминания, так и для исследования возможностей системы
  всегда нужно искать соответствия между операцией, которую нужно выполнить,  и
  ее описанием в английском языке. Отсюда и общее правило работы с KMON:

     - выразить на русском языке смысл операции,  которую  необходимо  выпол-
       нить;

     - перевести это на английский язык;

     - уточнить в соответствии с синтаксисом KMON.


       Примечание. Для запоминания общей формы строки  CSI  можно  руководство-
  ваться фразой: "выходной файл равен входному". А для строки KMON такой фразой
  может быть "сделай операцию над входным файлом и получи в результате выходной
  файл". Или можно запомнить направление передачи информации.
       Например, для CSI

      LOSPF  =  LISPF
       ^          !
       !----<<<---+

  для KMON направление будет обратное:

  <COMMAND>{<КЛЮЧ>}  <LISPF>{<ключ>}  <OUTSPF>{<КЛЮЧ>}
      !                 /\                ^
      !                /  \               !
      +------>>>-------    ------->>>-----+

  Конец примечания.

       Используя дальше полученные сведения, будем исследовать имеющуюся у  нас
  систему и начнем работать. Подробный синтаксис каждой команды приведен в при-
  ложении.






       2.4. Сообщения об ошибках



       Сообщения об ошибках в RT-11 составляют свой особый язык,  зная  который
  можно быстро находить виноватого, не обращаясь за помощью к  справочникам.  В
  RT-11 принята следующая форма сообщений

  ?<имя программы>-<признак завершения работы>-<текст сообщения>

  при этом

  ?
       - указание на ошибку

  <имя программы>


                                     - 50 -
           RT-11, A step by step      Systems Languages   14-Nov-92


       - задано при написании программы и позволяет определить, во время выпол-
  нения какой программы была обнаружена ошибка.

  <признак завершения работы>
       - одна буква, указывающая насколько серьезна ошибка.  Буквы  могут  быть
  следующими:
     - I - информационное сообщение;
     - E - ошибка данных при выполнении прикладной программы, при этом работа
       программы была завершена нормально;
     - W - предупреждение. Системная программа не смогла выполнить какую-либо
       операцию или при выполнении возникла  ошибка,  позволяющая  продолжать
       работу;
     - F - фатальная ошибка. Работа программы не может  быть  продолжена  при
       возникновении данной ошибки;
     - U - фатальная ошибка. Работа программы не может  быть  продолжена  при
       возникновении данной ошибки.

  <текст сообщения>
       - текст раскрывает  сущность  ошибки,  обнаруженной  данной  программой.
  Задается при написании программы.


       Примечание. Разница в ошибках "F" и "U" заключается в следующем.  Ошибка
  типа "F" определяется либо до  выполнения  операции,  либо  после  завершения
  некоторой элементарной операции, но  работа  программы  может  быть  аварийно
  завершена. При возникновении ошибки типа "U" программа, как  правило,  теряет
  управление и сообщение выдается монитором. Конец примечания.

       В заключение скажем только, что в ОС RT-11 есть еще несколько языков для
  общения оператора с системой. Это язык управления заданиями BATCH и язык про-
  цессора командных файлов IND. Кроме того, начиная с версии V5.1, пользователь
  может сам определить свой командный язык. Все это множество языков в  системе
  призвано сделать работу пользователя более эффективной.


  Dитература:

  1) Кондильяк.
     Опыт о происхождении человеческих знаний.
     часть 2 "О языке и методе".
     В книге: Кондильяк, Сочинения в 2-х томах
     том 1. М., Мысль, 1980
  2) Локк Дж.
     Опыт о человеческом разумении, книга третья.
     В книге: Локк Дж., Сочинения в 3-х томах.
     том 1. М., Мысль, 1985

       Конечно, чтение философских трактатов - занятие не  легкое,  но  история
  возникновения языка как средства общения заслуживает того. Кроме того,  найдя
  истину вслед за выдающимися мыслитселями и приобретя опыт, легче будет искать
  истину самим.

  3) Фомин С.В.
     Системы счисления.
     М., Наука, 1975
       О том, как лучше считать - на двух или десяти пальцах,  мы  говорить  не
  будем, именно поэтому предлагаем прочитать эту брошуру.


                                     - 51 -
           RT-11, A step by step      Systems Languages   14-Nov-92


  4) Англо-русский словарь: 20 000 слов.
     под ред. О.С.Ахмановой и Е.А.Уилсон.
     М., Русский язык, 1983.
  5) Русско-английский словарь: 25 000 слов.
     под ред. О.С.Ахмановой и Е.А.Уилсон.
     М., Русский язык, 1983.

       Эти словари необходимы как рабочая документация по системе.  Они  доста-
  точно малы, чтобы находиться всегда под рукой, и достаточно полны,  чтобы  не
  лазить каждую минуту в большие словари. Если имеется специальный  словарь  по
  вычислительной технике, он окажет большую помощь.



                                     - 52 -
           RT-11, A step by step              DIRectory   14-Nov-92


                         3. ВЫСОКО СИЖУ, ДАЛЕКО ГЛЯЖУ,

                                       или
                              Исследование системы
                                                     ... Анализ - единственный
                                                 ключ  к открытиям,  но  могут
                                                 спросить, что является ключем
                                                 к анализу? - СВЯЗЫВАНИЕ ИДЕЙ.
                                                                     Кондильяк



                                 ВМЕСТО ВВЕДЕНИЯ


       Наконец Алеша дождался счастливого дня, когда он сможет познакомиться  с
  компьютерами лично. Лето - время отпусков, поэтому у нас в машинном зале тихо
  и немноголюдно, и я договорился с начальником машинного зала Александром Ген-
  надьевичем, что Алеша поработает на ДВК, если они будут свободны.
       То, что будет делать на ДВК или на других машинах Алеша  (я  постараюсь,
  чтобы мое руководство было минимальным), отражает  ситуацию,  когда  человек,
  купивший компьютер, и совершенно с ним не знакомый, достал его из  коробки  и
  начинает работать. Не все Алеша будет делать правильно, но это лишняя возмож-
  ность поучиться на чужих ошибках.
       Не следует пытаться запомнить все команды  и  ключи  -  это  практически
  невозможно. Мы специально не будем  пользоваться  документацией,  чтобы  было
  понятно, какие потребности пользователя привели  к  появлению  тех  или  иных
  команд. Предлагаемый путь исследования не единственный, но достаточно  эффек-
  тивный. Пользуясь аналогией из математики, важно запоминать не готовые  реше-
  ния, а методы их получения. Единственное, что нам известно, то, что язык кла-
  виатурного монитора близок к естественному английскому языку. Поэтому  основ-
  ной нашей документацией будут русско-английский и англо-русский словари.
       Кроме того, у нас  будут  встречаться  термины  ПОЛЬЗОВАТЕЛЬ  (например,
  программа пользователя) и ОПЕРАТОР. Понятия эти весьма близкие. Оператор ста-
  новится пользователем, используя систему для выполнения прикладных  программ.
  Пользователь становится оператором, садясь за терминал. В тех  случаях  когда
  трудно будет разделить эти понятия, будем считать, что роль  оператора  будет
  выполнять Алеша.

       - Ну что, Алеша, пошли работать,- говорю я когда, мы пришли в наш вычис-
  лительный центр.
       Алеша, несколько притихший от обилия вычислительных машин  и  незнакомой
  обстановки, вступил в машинный зал.


                                     - 53 -
           RT-11, A step by step              DIRectory   14-Nov-92


                              ПЕРВЫЕ ШАГИ В СИСТЕМЕ


       Первое, что нам понадобится, - это машинное время. Продукт, несмотря  на
  свое название, весьма ощутимый, осязаемый и имеющий свое качество. Под машин-
  ным временем понимается возможность работать в вычислительной  системе.  Если
  при попытке распечатать текст в две-три странички мы полчаса заправляем бума-
  гу или меняем красящую ленту на печатающем устройстве, то качество  машинного
  времени плохое. Но это самые легкие  неприятности.  Программное  обеспечение,
  входящее в вычислительную систему, тоже влияет на качество машинного времени.
  Каким образом - это мы познаем на собственном опыте. Школы, которые  получили
  комплекты учебной вычислительной техники на базе ДВК,  имеют  машинное  время
  достаточное хотя бы для факультативных занятий. Некоторые школы имеют возмож-
  ность привести своих учеников в вычислительные центры у шефов. Если при  этом
  имеется возможность поработать в ОС RT-11  на  машинах  "Электроника-100/25",
  "Электроника-79" или СМ-4, то,  как  правило,  количество  машинного  времени
  меньше, но качество его существенно выше. Если есть возможность поработать на
  ДВК-4 или "Электроника-85" да еще и в  более  спокойной  обстановке,  то  это
  будет совсем прекрасно.
       Второе, что нам необходимо, - это машинные носители информации. В  школы
  для ДВК поставляется некоторое количество дискет, но его,  конечно,  мало.  У
  шефов бывает и хуже, и лучше. В комиссионных магазинах  иногда  можно  купить
  импортные дискеты, но они дорогие. Есть надежда, что в дальнейшем положение с
  носителями улучшится. Начальник машинного зала нашего  ВЦ  -  Александр  Ген-
  надьевич - человек запасливый, выдал Алеше две дискеты диаметром 203мм и ска-
  зал, что они подготовлены для работы.


       Примечание. Для ДВК-2М, ДВК-3,  ДВК-4  и  "Электроники-85"  используются
  дискеты диаметром 133мм. Конец примечания.

       И третье - нам необходима операционная система RT-11.  Опять  на  помощь
  Алеше пришел Александр Геннадьевич. Сам он не программист, но знает у кого из
  программистов, работающих в зале, что есть. Алеша сбегал к машине, на которую
  показал Александр Геннадьевич, и через пять минут прибегает.
       - Вот, записали! RT-11 версия пять точка ноль,- уже переходя на програм-
  мистский жаргон, сказал Алеша.
       Да, Алеше записали RT-11 V05.00, однозадачный монитор RT11SJ.SYS,  базо-
  вый вариант, поставляемый фирмой DEC, и минимальный набор программ, необходи-
  мых для работы. Если Алеша будет так оперативно работать, то он  будет  иметь
  все необходимые программы.
       - Ну, а как ее запускать, ты спросил?- спрашиваю я Алешу.
       - А как же! Дима говорит,- кивнул Алеша в конец машинного зала,-  садись
  за второй ДВК, сунь ее в левый карман, набери на  клавиатуре  "сто  семьдесят
  три тысячи", "гоу" и вперед.
       Конечно, возбуждению Алеши не было предела. Но здесь необходимо  сделать
  некоторые пояснения. Первые ДВК поставлялись только с накопителями ГМД-70 или
  ГМД-7012, и единственный способ загрузки системы состоял в том, что необходи-
  мо было набрать на клавиатуре терминала адрес программы  аппаратной  загрузки
  173000 и команду "G" (от английского слова GO  -  идти).  При  этом  загрузка
  будет происходить только с нулевого привода. Этот способ осуществим также  на
  большинстве моделей ЭВМ PDP-11, LSI-11 фирмы DEC. В  последних  выпусках  ДВК
  появился дополнительный сервис. Для загрузки системы необходимо набрать  сим-
  вол "D" для накопителей типа ГМД-70 или ГМД-7012,  или  "X"  для  накопителей
  НГМД-6022 и номер накопителя, в который вставлена системная дискета. Для СОТ-
  КИ дело еще проще. На клавишах пульта нужно набрать число 173000 (в  двоичном
  виде), нажать клавиши "ЗАНЕСЕНИЕ АДРЕСА" и "ПУСК". На экране появится  символ
  "$", после чего нужно набрать на терминале имя и номер накопителя, с которого
  будет загружаться система, и нажать клавишу <ВК>.


                                     - 54 -
           RT-11, A step by step              DIRectory   14-Nov-92


       Примечание. В стандарте на код ASCII символ "$"  называется  "DOLLAR"  и
  имеет соответствующее  изображение,  в  отечественной  документации  -  "знак
  денежной единицы", а программисты часто  называют  его  "солнышко",  "бычок",
  "жучок", "клоп" или "шкраколыжка" - слово столь же непонятное, сколь непонят-
  но изображение самого символа. Конец примечания.

       Для ДВК-3 и ДВК-4 после включения нужно набрать символ "B" и после появ-
  ления символа "$" набрать имя накопителя с системной дискетой.
       Для "Электроники-85" еще проще - нужно вставить дискету в любой  накопи-
  тель, закрыть карман рычажком и включить питание.  При  этом  загрузка  будет
  выполняться в следующей последовательности:
       - с устройства DZ0:, если в нем есть системная дискета, ИНАЧЕ
       - с устройства DZ1:, если в нем есть системная дискета, ИНАЧЕ
       - с устройства DW0: ("Винчестер"), если на нем установлена  операционная
  система.
       Если аппаратный загрузчик не найдет нигде операционную  систему,  то  он
  нарисует на экране изображение дискеты.
       В случае ошибок при загрузке системы,  вместо  текстовых  сообщений,  на
  экране появляется изображение системного блока и два числа. Первое зависит от
  версии операционной системы (для версии 5.1В оно равно 51124), второе являет-
  ся кгод кодом текстового сообщения. Ниже приведены соответствия между кодом и
  сообщением.
     - 7 - "NO KT11"
     - 11 - "SWAP.SYS NOT FOUND"
     - 3 - "HANDLER FILE NOT FOUND2
     - 10 - "SWAP FILE TOO SMALL"
     - 6 - "MONITOR FILE NOT FOUND"
     - 2 - "CONFLICTING SYSGEN OPTIONS"

       Но для того чтобы начать работу, нам необходимо познакомиться  с  нашими
  руками и глазами - ведь именно через них мы будем отдавать команды системе  и
  получать от нее информацию. У терминала  VDT-52130  практически  нет  средств
  управления (в нашем случае) - нужно только  нажать  клавишу  "LINE"  или  "ON
  LINE", чтобы загорелся индикатор "ON LINE" и терминал оказался подключенным к
  ЭВМ.
       Для терминала 15ИЭ-00-013 есть целая управляющая строка. Для  управления
  режимами дисплея курсор необходимо переместить в управляющую строку  нажатием
  клавиши <СДВ>. Движение курсора по этой строке осуществляется клавишами "<=="
  и "==>". Каждую цифру, под которой может быть установлен курсор, можно  изме-
  нить нажатием клавиши "!" ("стрелка вниз с  точкой"  на  дополнительном  поле
  клавиатуры - не путать с  восклицательным  знаком).  После  установки  нужных
  режимов клавишу <СДВ> необходимо отжать. Мы пока не будем обсуждать все режи-
  мы дисплея. Покажем только, какая управляющая строка должна быть на экране.


  9600 0010 1110 0000 09 15 00
  ----   ^  ^^^       \ часы /
    ^    !  !!!
    !    !  !!+----------------------- система команд N2
    !    !  !!
    !    !  !+------------------------ отсутствие звукового сигнала
    !    !  !                                   при нажатии клавиши
    !    !  +------------------------- отсутствие звукового сигнала
    !    !                                     в 72 позиции курсора
    !    +---------------------------- код КОИ-7 Н0/1
    +------------------ Скорость обмена информацией терминала с ЭВМ


       Следует отметить, что часы на экране терминала только отображают текущее


                                     - 55 -
           RT-11, A step by step              DIRectory   14-Nov-92


  время работы терминала и не могут использоваться программами. Для удобства их
  можно установить также, как и режимы, управляющие работой терминала.
       В рабочем режиме должны быть нажаты клавиши "ЛИН", "РЕД", "ДУП", осталь-
  ные фиксируемые клавиши должны быть отжаты.

       Пока мы с вами разговаривали, Алеша уже включил ДВК и все устройства,  к
  нему подключенные, вставил дискету, на которую ему записали систему, в  левый
  дисковод и набрал на клавиатуре.

  +---------------
  !  @173000G<ВК>
  !  -
  !


       Примечание. Для того чтобы отличать то, что набирали мы, и то,  что  нам
  выдавала на экране система, в тех случаях, когда  это  необходимо,  сообщения
  системы будут подчеркнуты, а экран будет условно изображаться в виде угла.  В
  оригинале все сообщения системы начиная с версии  V4.0  выводятся  маленькими
  латинскими буквами, которые в кодировке КОИ-7_Н0/1 или  КОИ-7Н2,  принятой  в
  отечественных терминалах, отображаются большими русскими. Кроме того, в  пер-
  вый раз при описании команды и в тех случаях, когда это может быть неясно, мы
  будем явно указывать, что ввод команды должен  завершаться  нажатием  клавиши
  <ВК>, обозначая ее в угловых скобках. Курсор в таких случаях будем обозначать
  "^". Конец примечания.

       В накопителе что-то защелкало, и на экране появилось первое сообщение.

  +---------------
  !      RT11SJ  (S) V05.00
  !      ------------------
  !  ?MON-F-File not found SY:STARTS.COM
  !  -----------------------------------
  !  .^
  !  -
  !

  Мы не знаем, что система не поняла и что это за загадочный файл, который  она
  не нашла. Так как машинное время дорого, то начинаем работать. Первое, что мы
  должны исследовать, - это внешние запоминающие устройства.






       3.1. Дома, дома, дома ...


                                       или
                         Внешние запоминающие устройства


       Внешняя память необходима, когда не хватает оперативной памяти процессо-
  ра или необходимо долговременное хранение  информации.  Много  есть  способов
  хранения информации. Это и отверстия, пробитые в  определенной  комбинации  в
  бумажной ленте или картонной карте, и тем или иным образом намагниченные час-
  тички железа в магнитных лентах или дисках. В любом из перечисленных  случаев
  имеется носитель информации и устройство для ее чтения или записи.


                                     - 56 -
           RT-11, A step by step              DIRectory   14-Nov-92


       Перенесясь в мир наших обычных ощущений, в качестве носителя  информации
  можно представить кинопленку. Каждый ее отрезок, идущий на экране около полу-
  тора часов, называют серией, дают ей номер и название. Или, например,  книги.
  Произведение, которое не умещается в обычный (удобный для пользования) размер
  книги, делится на несколько томов, каждый из которых имеет свое название  или
  номер или то и другое одновременно. Отсюда важный признак каждого носителя  -
  идентификатор тома.


       Примечание. Идентификатор - от английского "Identification" - отождеств-
  ление, опознание, установление личности. В нашем случае это признак, по кото-
  рому можно установить, какую информацию содержит том. Конец примечания.

       Подписывая книги, наклеивая экслибрис на обложку  книги,  мы  определяем
  еще одну важную характеристику тома - имя владельца.

       И самая главная характеристика носителя информации, как и у книги, - это
  оглавление, или каталог, тома. Как и в оглавлении книги,  так  и  в  каталоге
  тома указаны названия глав (имена и типы файлов) и страницы, где они находят-
  ся (номера блоков).


       Примечание. Мы говорили о том, что минимально адресуемый элемент  данных
  в системе - блок. Для того чтобы найти нужный блок на устройстве, мы их  про-
  нумеруем. Конец примечания.

       И наконец, информацию с носителя мы можем  прочитать  с  помощью  особых
  устройств. Для того чтобы посмотреть фильм, мы вставляем пленку в  кинопроек-
  тор. Гибкий магнитный диск (дискету) мы должны вставить в  привод  накопителя
  на гибких магнитных дисках, магнитную ленту мы должны поставить  на  магнито-
  фон. Каждое устройство, на котором  можно  прочитать  носитель  определенного
  типа, имеет свое название и, соответственно, свое имя в системе, состоящее из
  двух букв. Если в системе есть несколько устройств одного  типа,  то  каждому
  устройству присваивают номер от 0 до 7. По умолчанию используется  устройство
  с нулевым номером.
       Итак, в системе существуют устройства для работы с носителями информации
  различных типов. Каждое устройство имеет свое физическое имя и номер в систе-
  ме.






       3.2. Домовая книга,


                                       или
                      Каталог устройства файловой структуры


       На экране в начале строки стоит точка. Как мы  уже  знаем,  это  признак
  того, что KMON находится в памяти и готов к приему команд.
       - Ну, Алеша,- спрашиваю я его,- ты загрузил операционную систему, а  что
  ты хочешь узнать в первую очередь?
       - Наверное, посмотреть, что у меня есть на дискете,- отвечает Алеша,- то
  есть нужно прочитать каталог устройства.
       - Тогда действуй.
       Алеша посмотрел в русско-английский словарь и  узнал,  что  каталог  по-


                                     - 57 -
           RT-11, A step by step              DIRectory   14-Nov-92


  английски - DIRECTORY, и, помня, что язык клавиатурного монитора очень близок
  к английскому, попробуем набрать это слово в качестве  команды.  Поразмыслив,
  мы добавляем через пробел (знак разделителя) имя устройства, каталог которого
  мы хотим прочитать (ведь система не может знать все наши желания). Итак:

  +---------------
  !  .DIRECTORY DX1:<ВК>
  !  -
  !

  Алеша нажал клавишу <ВК>, в накопителе что-то зашевелилось и  мы  получили  в
  ответ на экране следующую надпись.

  +---------------
  !  ?DIR-F-Error reading directory
  !  ------------------------------
  !  .^
  !  -
  !


  Посмотрев в словарь, мы узнаем, что эта фраза означает "ошибка чтения катало-
  га". Это неприятно, но один положительный результат все-таки есть. Мы узнали,
  что в нашем распоряжении есть программа DIR, ведь именно она выдала сообщение
  об ошибке.
       Мы не смогли прочитать каталог носителя,  установленного  на  устройстве
  DX1:. А почему? Например, плохая дискета или она вообще не вставлена в диско-
  вод. Дискета у нас одна, с нее загружалась система - значит  она  хорошая.  А
  вот правый дисковод, который называется DX1:, действительно пустой. Системная
  дискета вставлена в левый дисковод, который именуется DX0:.
       - Тогда попробуем прочитать каталог устройства  DX0:,-  исправляет  свою
  ошибку Алеша.

  +---------------
  !  .DIRECTORY DX0:<ВК>
  !  -
  !

  И это удачно, потому что на экране появилась следующая таблица.

   SWAP  .SYS    26P 13-Jan-84        RT11SJ.SYS    73P 10-Mar-84
   TT    .SYS     2P 10-Mar-84        DX    .SYS     3P 10-Mar-84
   SL    .SYS    13P 10-Mar-84        LP    .SYS     2P 10-Mar-84
   MX    .SYS    10P 10-Mar-84        NL    .SYS     2P 10-Mar-84
   RK    .SYS     3P 10-Mar-84        MT    .SYS     9P 10-Mar-84
   DP    .SYS     3P 10-Mar-84        LD    .SYS     8P 10-Mar-84
   PIP   .SAV    29  06-Feb-84        DUP   .SAV    45  06-Feb-84
   DIR   .SAV    19  06-Feb-84        DUMP  .SAV     9  06-Feb-84
    16 Files,   256 Blocks
    230 Free blocks

       Это очень здорово. Мы увидели знакомые имена файлов. Но сразу  возникают
  некоторые вопросы: во-первых, около каждого файла (точнее, напротив его  спе-
  цификации) стоит какая-то дата. Что она  означает?  По  здравому  смыслу  это
  может быть либо дата создания файла, либо дата его копирования.  Но  так  как
  файлы нам копировали сегодня, а дата указывает на 1984 год,  то  единственное
  разумное объяснение, что это дата создания файла.


                                     - 58 -
           RT-11, A step by step              DIRectory   14-Nov-92


       Примечание. По некоторым (техническим) причинам в каталоге  устройств  с
  последовательным доступом, например накопителей на  магнитной  ленте,  указы-
  вается дата копирования файла. Конец примечания.

       Второй вопрос, который возникает, - можно ли  найти  соответствие  между
  списком файлов, который мы получили, и порядком расположения файлов  на  уст-
  ройстве. А именно: как читать этот каталог? По строчкам слева направо или  по
  столбцам, сначала один потом другой. Может  быть,  те  цифры,  которые  стоят
  рядом с именами файлов, нам помогут. Начнем анализ. Указанные в конце катало-
  га итоговые цифры говорят нам, что наши 16 файлов занимают на устройстве  256
  блоков. Если мы просуммируем цифры, стоящие рядом с именами файлов, то  полу-
  чим также 256 блоков. Это означает, что данные цифры указывают на размер фай-
  ла в блоках. Отсюда можно сделать вывод, что данная форма справочника говорит
  только о наличии файлов на устройстве, но не об их  расположении.  А  как  же
  быть?
       - А наверное, у нас не полная форма каталога,- догадывается Алеша,-  раз
  нет таких важных сведений, как расположение файлов на устройстве. Помня,  что
  KMON любит разговаривать по-английски и система позволяет делать нам  некото-
  рые ошибки, я попробую применить ключ /FULL (полный).

  +---------------
  !  .DIRECTORY/FULL DX0:<ВК>
  !  -
  !

  Полученный результат:

   SWAP  .SYS    26P 13-Jan-84        RT11SJ.SYS    73P 10-Mar-84
   TT    .SYS     2P 10-Mar-84        DX    .SYS     3P 10-Mar-84
   SL    .SYS    13P 10-Mar-84        LP    .SYS     2P 10-Mar-84
   MX    .SYS    10P 10-Mar-84        NL    .SYS     2P 10-Mar-84
   RK    .SYS     3P 10-Mar-84        MT    .SYS     9P 10-Mar-84
   DP    .SYS     3P 10-Mar-84        LD    .SYS     8P 10-Mar-84
   PIP   .SAV    29  06-Feb-84        DUP   .SAV    45  06-Feb-84
   DIR   .SAV    19  06-Feb-84        DUMP  .SAV     9  06-Feb-84
   < UNUSED >   230
    16 Files,   256 Blocks
    230 Free blocks

       Информации добавилось немного. Используя как главную документацию англо-
  русский словарь, мы быстро определяем, что <UNUSED> означает  неиспользуемый,
  т.е. не занятые пользователем для файлов зоны на устройстве. Более того, ито-
  говые цифры, которые сопровождают распечатку каталога, всякий раз показывают,
  что из 486 имеющихся у нас блоков - 230 свободны.
       - Но мы не получили главное, что хотели,- говорит Алеша,- порядок распо-
  ложения файлов на устройстве.
       Будем рассуждать. Что означает - знать порядок  расположения  файлов  на
  устройстве? Какая информация в дополнение к  существующей  позволила  бы  нам
  точно сказать, в каком порядке расположены файлы на устройстве? По всей види-
  мости, это должна быть какая-нибудь монотонно меняющаяся величина, либо моно-
  тонно возрастающая, либо  монотонно  убывающая.  Это  могут  быть,  например,
  порядковые номера файлов.


       Примечание. В устройствах с  последовательным  доступом  по  техническим
  причинам используются именно последовательные номера  файлов,  которые  назы-
  ваются позицией. Конец примечания.

       Или это могут быть номера блоков на  устройстве,  с  которых  начинаются


                                     - 59 -
           RT-11, A step by step              DIRectory   14-Nov-92


  файлы. Вот и попробуем в качестве ключа использовать слово "BLOCKS".

  +---------------
  !  .DIRECTORY/BLOCKS DX0:<ВК>
  !  -
  !

  Мы достигли, чего хотели.

   SWAP  .SYS   26P 13-Jan-84   8     RT11SJ.SYS   73P 10-Mar-84  34
   TT    .SYS    2P 10-Mar-84 107     DX    .SYS    3P 10-Mar-84 109
   SL    .SYS   13P 10-Mar-84 112     LP    .SYS    2P 10-Mar-84 125
   MX    .SYS   10P 10-Mar-84 127     NL    .SYS    2P 10-Mar-84 137
   RK    .SYS    3P 10-Mar-84 139     MT    .SYS    9P 10-Mar-84 142
   DP    .SYS    3P 10-Mar-84 151     LD    .SYS    8P 10-Mar-84 154
   PIP   .SAV   29  06-Feb-84 162     DUP   .SAV   45  06-Feb-84 191
   DIR   .SAV   19  06-Feb-84 236     DUMP  .SAV    9  06-Feb-84 255
    16 Files,   256 Blocks
    230 Free blocks

  В конце каждой записи о файле стоит номер начального блока файла.  Несложными
  расчетами мы можем убедиться в этом.

       Однако мы говорили о таких  важных  характеристиках,  как  идентификатор
  тома и имя владельца. Поискав в словаре и найдя слово "VOLUME" -  том,  попы-
  таемся использовать его в качестве ключае.

  +---------------
  !  .DIRECTORY/VOLUME DX0:<ВК>
  !  -
  !

  И опять мы оказались правы и можем посмотреть на экране следующую таблицу.

   Volume ID:  RT11SJ V5.00
   Owner    :  Ашарина И.В.
  SWAP  .SYS    26P 13-Jan-84          RT11SJ.SYS    73P 10-Mar-84
  TT    .SYS     2P 10-Mar-84          DX    .SYS     3P 10-Mar-84
  SL    .SYS    13P 10-Mar-84          LP    .SYS     2P 10-Mar-84
  MX    .SYS    10P 10-Mar-84          NL    .SYS     2P 10-Mar-84
  RK    .SYS     3P 10-Mar-84          MT    .SYS     9P 10-Mar-84
  DP    .SYS     3P 10-Mar-84          LD    .SYS     8P 10-Mar-84
  PIP   .SAV    29  06-Feb-84          DUP   .SAV    45  06-Feb-84
  DIR   .SAV    19  06-Feb-84          DUMP  .SAV     9  06-Feb-84
   16 Files,   256 Blocks
   230 Free blocks

  Мы убедились в том, что на данной дискете записана операционная система RT-11
  V5.00 с однозадачным монитором SJ и принадлежит дискета Ашариной.
       Неугомонный Алеша не хочет ждать, пока на  экран  будет  выведен  полный
  каталог.
       - Мне ведь часто нужно посмотреть только  идентификатор  тома,-  говорит
  он,- слово ТОЛЬКО по-английски будет ONLY, и я попробую ввести  это  слово  в
  качестве параметра:

  +---------------
  !  .DIRECTORY/VOLUME:ONLY DX0:<ВК>
  !  -
  !


                                     - 60 -
           RT-11, A step by step              DIRectory   14-Nov-92


  А меня она любит,- засмеялся Алеша, увидев  на  экране  только  идентификатор
  тома.

    Volume ID:  RT11SJ V5.00
    Owner    :  Ашарина И.В.

       Теперь вернемся назад, к простому. Мы смогли получить полный каталог.  А
  что представляет собой минимальная информация о файлах на устройстве? В  про-
  тивоположность полному каталогу то, что  мы  хотим  получить,  можно  назвать
  кратким каталогом. Вот и попробуем это слово -  BRIEF  (краткий)  в  качестве
  ключа команды.

  +---------------
  !  .DIRECTORY/BRIEF DX0:<ВК>
  !  -
  !

  и получили:

   SWAP  .SYS   RT11SJ.SYS   TT    .SYS   DX    .SYS   SL    .SYS
   LP    .SYS   MX    .SYS   NL    .SYS   RK    .SYS   MT    .SYS
   DP    .SYS   LD    .SYS   PIP   .SAV   DUP   .SAV   DIR   .SAV
   DUMP  .SAV
    16 Files,   256 Blocks
    230 Free blocks

       Мы получили очень интересный результат. Оказывается, минимальная  инфор-
  мация - это только имена и типы файлов и итоговые цифры. Второе, что мы долж-
  ны отметить, - это то, что список расположился в пять колонок (или столбцов).


       Примечание. Точно такой же результат можно получить, если использовать в
  качестве ключа слово FAST - скорый, быстрый. Конец примечания.

       Полученный результат наводит на мысль:  мы  смогли  получить  распечатку
  каталога в две и пять колонок. А можем ли мы получить распечатку  каталога  в
  любое число колонок? И если можем, то как и во сколько? Скорее  всего,  нужно
  использовать ключ, обозначающий колонки, и в качестве параметра указать необ-
  ходимое число колонок. И опять нам поможет словарь.

  +---------------
  !  .DIRECTORY/BRIEF/COLUMNS:3 DX0:<ВК>
  !  -
  !

  то, что мы получили

   SWAP  .SYS   RT11SJ.SYS   TT    .SYS
   DX    .SYS   SL    .SYS   LP    .SYS
   MX    .SYS   NL    .SYS   RK    .SYS
   MT    .SYS   DP    .SYS   LD    .SYS
   PIP   .SAV   DUP   .SAV   DIR   .SAV
   DUMP  .SAV
    16 Files,  256 Blocks
    230 Free blocks

  подтвердило нашу догадку. Ну, а сколько же колонок  можно  получить?  Давайте
  подумаем и посчитаем. Если нам вдруг удастся получить распечатку каталога  на
  бумаге, то максимальная длина строки будет примерно 140 символов (стандарт  -


                                     - 61 -
           RT-11, A step by step              DIRectory   14-Nov-92


  132 символа). В краткой форме имя и тип файла занимают 10 символов,  расстоя-
  ние между колонками 3-4 символа. Итого на бумаге может  уместиться  не  более
  10-11 колонок. Что мы и попробуем получить:

  +---------------
  !  .DIRECTORY/COLUMNS:11. DX0:<ВК>
  !  -
  !

  И нам программа DIR ответила:

  +---------------
  !  ?DIR-F-Invalid parametr
  !  -----------------------
  !  .^
  !  -
  !

  Мы должны быть благодарны системе за подсказку. В качестве параметра  исполь-
  зуется количество колонок и раз он неправильный, то количество колонок задано
  больше допустимого. Проведя несколько таких проб, мы узнаем, что допустимо от
  одной до девяти колонок.
       - Вот здорово,- говорит Алеша,- теперь, когда мне надо,  я  буду  делать
  распечатку в одну колонку, а если бумага широкая, то можно и  в  четыре.  Как
  мне будет удобней для работы, так я и буду делать.
       Однако еще одним полем распечатки каталога мы не  умеем  управлять.  При
  распечатке полного каталога (с ключем /FULL) мы видели запись  <UNUSED>.  Как
  мы тогда определили - это неиспользуемая область.  Было  бы  очень  интересно
  распечатывать каталог только  неиспользуемых  областей.  Идя  по  проторенной
  дорожке, используем в качестве ключа это же слово:

  +---------------
  !  .DIRECTORY/UNUSED DX0:<ВК>
  !  -
  !

  Опять она ругается,- сказал Алеша, увидев появившуюся на экране строчку:

  +---------------
  !  ?KMON-F-Invalid option
  !  ----------------------
  !  .^
  !  -
  !


       Примечание. В версии V05.10 вместо этого может появиться сообщение:

       ?KMON-F-Invalid option for program

  что означает: "неверный ключ для программы". Конец примечания.

       И опять займемся анализом. Используя слово "UNUSED" мы следовали здраво-
  му смыслу. И раз нас постигла неудача, надо искать  синоним  к  этому  слову.
  Ведь синонимы бывают не только на русском языке.
       Итак, слово UNUSED буквально означает НЕИСПОЛЬЗУЕМЫЙ, т.е. свободный  от
  полезной информации. Пустой эту область назвать, наверно, нельзя. Ведь какая-
  то информация в ней есть. Поэтому попробуем в качестве ключа слово FREE (сво-
  бодный)


                                     - 62 -
           RT-11, A step by step              DIRectory   14-Nov-92


  +---------------
  !  .DIRECTORY/FREE DX0:<ВК>
  !  -
  !

  и на этот раз получили:

   < UNUSED >  230
    16 Files,  256 Blocks
    230 Free blocks

       Мы научились распечатывать полный и краткий каталог, показывая свободные
  зоны и не показывая их. А теперь зададимся вопросом -  всегда  ли  нам  нужна
  десятичная система счисления. Многие программы используют восьмеричную систе-
  му счисления. А раз так, можно ли выводить информацию  о  размерах  файлов  в
  восьмеричной системе счисления? Наверное, для этого  мы  должны  использовать
  ключ, включающий в свое имя ВОСЕМЬ в той или иной форме.
       Алеша быстро набрал слово EIGHT (ВОСЕМЬ).

  +---------------
  !  .DIRECTORY/EIGHT DX0:<ВК>
  !  -
  !

  И в ответ получили:

  +---------------
  !  ?DIR-F-Invalid option
  !  ---------------------
  !  .^
  !  -
  !

  то есть неправильный ключ.
       Попытка не удалась, но отчаиваться нельзя. Ищем  аналогии  в  окружающем
  нас мире. Фигуру с тремя углами называют треугольник, тело с восемью вершина-
  ми называют ОКТАЭДР. Не в этом ли решение нашей загадки. Попробуем  удостове-
  риться в этом

  +---------------
  !  .DIRECTORY/OCTAL DX0:<ВК>
  !  -
  !

  И так как мы получили результат

    Octal
  SWAP  .SYS   32P 13-Jan-84       RT11SJ.SYS  111P 10-Mar-84
  TT    .SYS    2P 10-Mar-84       DX    .SYS    3P 10-Mar-84
  SL    .SYS   15P 10-Mar-84       LP    .SYS    2P 10-Mar-84
  MX    .SYS   12P 10-Mar-84       NL    .SYS    2P 10-Mar-84
  RK    .SYS    3P 10-Mar-84       MT    .SYS   11P 10-Mar-84
  DP    .SYS    3P 10-Mar-84       LD    .SYS   10P 10-Mar-84
  PIP   .SAV   35  06-Feb-84       DUP   .SAV   55  06-Feb-84
  DIR   .SAV   19  06-Feb-84       DUMP  .SAV   11  06-Feb-84
   16 Files,  400 Blocks
   346 Free blocks

  то уже это показывает, что система нас поняла. Однако она для нас же  сделала


                                     - 63 -
           RT-11, A step by step              DIRectory   14-Nov-92


  предупреждение, напечатав вверху слово "Octal". Несложными расчетами мы можем
  убедиться, что все числа в данной  распечатке  даны  в  восьмеричной  системе
  счисления. Только число файлов по-прежнему осталось в десятичной. Это  объяс-
  няется тем, что программа DIR показывает не общее число файлов на  устройстве
  или на носителе, а только то, которое получилось в распечатке каталога. А это
  число нигде в других программах использовано быть не может.






       3.2.1. А что можно сделать еще?




       - А что, мы так и будем смотреть каталог на экране?-  сказал  недовольно
  Алеша.- Ведь это неудобно. А если его вывести на бумагу?  Должен  же  я  дома
  показать, чем занимался целый день. Да и для  памяти  надо  что-то  оставить,
  вдруг пригодится.
       Недовольство Алеши можно понять. Да и система была бы плохая, если бы не
  позволяла фиксировать каким-нибудь образом такую  важную  информацию.  Скорее
  всего, нужно найти соответствующий ключ. Как найти его, мы уже  знаем:  печа-
  тающее устройство по-английски называется PRINTER  или  LINEPRINTER.  Поэтому
  используем это слово в качестве ключа.

  +---------------
  !  .DIRECTORY/PRINTER DX0:<ВК>
  !  -
  !

  Выведенный на бумагу каталог, знакомый нам по предыдущей работе, убедил нас в
  правильности наших действий.


       Примечание. По аналогии вывод на терминал, установленный  по  умолчанию,
  указывается ключем /TERMINAL. Конец примечания.

       Ну, а более сложный вопрос, можем ли мы вывести каталог в текстовый файл
  на любое устройство для того, чтобы его потом можно  было  отредактировать  и
  вставить в другой текст, например в эту  книгу.  Наверное,  необходимо  найти
  слово, означающее вывод куда-либо и, наверное, в качестве  параметра  указать
  спецификацию файла для вывода, как мы об этом говорили во второй главе.
       - Попробуем в качестве ключа  слово  OUTPUT  (вывод  наружу),-  уверенно
  говорит Алеша, набирая командную строку:

  +---------------
  !  .DIRECTORY/OUTPUT:DX0:DX0FIL DX0:<ВК>
  !  -
  !

  Тип файла Алеша не указал, понадеявшись на саму программу DIR, точнее на сог-
  лашения об умолчаниях в системе. Система немного призадумалась, пожевала нашу
  команду и скушала. На экране появилась точка. С одной стороны, это  указывает
  на то, что система нас поняла. Но с другой - нам бы хотелось в этом  убедить-
  ся. Для этого посмотрим каталог на устройстве DX0: обычным  образом,  как  мы
  это уже умеем.


                                     - 64 -
           RT-11, A step by step              DIRectory   14-Nov-92


  +---------------
  !  .DIRECTORY DX0:<ВК>
  !  -
  !

  И увидев в каталоге новый файл, с указанным нами именем

   SWAP  .SYS    26P 13-Jan-84       RT11SJ.SYS    73P 10-Mar-84
   TT    .SYS     2P 10-Mar-84       DX    .SYS     3P 10-Mar-84
   SL    .SYS    13P 10-Mar-84       LP    .SYS     2P 10-Mar-84
   MX    .SYS    10P 10-Mar-84       NL    .SYS     2P 10-Mar-84
   RK    .SYS     3P 10-Mar-84       MT    .SYS     9P 10-Mar-84
   DP    .SYS     3P 10-Mar-84       LD    .SYS     8P 10-Mar-84
   PIP   .SAV    29  06-Feb-84       DUP   .SAV    45  06-Feb-84
   DIR   .SAV    19  06-Feb-84       DUMP  .SAV     9  06-Feb-84
   DX0FIL.DIR     2
    17 Files,  258 Blocks
    228 Free blocks

  успокаиваемся, потому что больше мы пока ничего сделать не можем.
       - А почему у этого файла нет даты?- спрашивает Алеша,- Ведь все  осталь-
  ные файлы имеют, как мы сказали, дату создания. А мы создаем файл без даты.
       Скорее всего, даты нет. Она неизвестна системе, или, как  говорят,  дата
  не установлена.






       3.2.1.1. Время бежит, время стоит




       Если мы не знаем, кто устанавливает дату, то хотелось  хотя  бы  посмот-
  реть, какая дата установлена. А как? Чтобы не  быть  многословными  попробуем
  просто сказать системе:

  +---------------
  !  .DATE<ВК>
  !  -
  !

  и система ответила:

  +---------------
  !  ?KMON-W-No date
  !  ---------------
  !  .^
  !  -
  !

       - Нет даты,- быстро перевел Алеша.
       И действительно, дата в системе не установлена (ее никто и не устанавли-
  вал). Но если сказать системе текущую дату следующим образом?


                                     - 65 -
           RT-11, A step by step              DIRectory   14-Nov-92


  +---------------
  !  .DATE 29-JUL-86<ВК>
  !  -
  !

  Система скушала нашу команду и поставила точку. И, как ни странно, ничего  не
  сказала.
       - А если теперь спросить дату,- Алеша набрал команду:

  +---------------
  !  .DATE<ВК>
  !  -
  !  29-Jul-86
  !  ---------
  !  .^
  !  -
  !

  и увидим, что все в порядке.
       - О, наверное, так и время можно установить,- радостно воскликнул  Алеша
  и быстро набрал:

  +---------------
  !  .TIME 10:45:00<ВК>
  !  -
  !  .TIME<ВК>
  !  -
  !  10:45:03
  !  --------
  !  .^
  !  -
  !

  И все оказалось так просто. Мы чуть-чуть  поуправляли  системой.  Однако  при
  повторной загрузке системы дату и время необходимо устанавливать снова. Прав-
  да, в "Электронике-85 если для часов установлен аккумулятор или батарейка, то
  система сама будет спрашивать время у процессора службы времени.






       3.2.2. Продолжим работу с каталогами




       Теперь, когда мы знаем про дату и сами  ее  установили,  нам  захотелось
  посмотреть список файлов с какой-нибудь датой. Попробуем ввести команду

  +---------------
  !  .DIRECTORY/DATE DX0:<ВК>
  !  -
  !


                                     - 66 -
           RT-11, A step by step              DIRectory   14-Nov-92


  и ничего не получилось. На экране только размер свободной зоны.

        29-Jul-86

      0 Files,    0 Blocks
     228 Free blocks

  Правда, теперь при выводе каталога будет распечатываться дата - это хорошо. А
  как же быть с нашей командой?
       - Так ведь у нас нет ни одного файла с текущей системной датой,-  сказал
  Алеша.
       Тогда нужно создать файл с текущей системной датой. А как? Пока мы умеем
  делать это только одним способом:

  +---------------
  !  .DIRECTORY/OUTPUT:DX0:DXFILE.DIR DX0:<ВК>
  !  -
  !

  Посмотрев каталог обычным образом, мы можем убедиться, что  появившийся  файл
  имеет дату, которую мы недавно установили. Вот теперь  мы  можем  попробовать
  выделить его из каталога.

  +---------------
  !  .DIRECTORY/DATE DX0:<ВК>
  !  -
  !

  То, что мы увидели

        29-Jul-86

       DXFILE.DIR     2  29-Jul-86
       1 Files,   2 Blocks
       226 Free blocks

  показывает, что мы были правы.


       Примечание. Такой же эффект можно получить,  используя  ключ  /NEWFILES,
  т.е. новые файлы, или файлы, созданные сегодня, с  сегодняшней  датой.  Конец
  примечания.

       Вот теперь можно раскладывать каталог по полочкам. А  именно:  мы  хотим
  увидеть файлы с указанной датой создания и попробуем это сделать так:

  +---------------
  !  .DIRECTORY/DATE:06:FEB:84 DX0:<ВК>
  !  -
  !

  Мы должны вспомнить, что несколько параметров для  одного  ключа  разделяются
  двоеточием. А так как описание даты состоит из разнородных данных -  чисел  и
  текста, то для облегчения анализа и единства языка день, месяц и год считают-
  ся различными параметрами.


                                     - 67 -
           RT-11, A step by step              DIRectory   14-Nov-92


  А система молча выполнила наше желание.

   29-Jul-86

  PIP   .SAV   29  06-Feb-84       DUP   .SAV   45  06-Feb-84
  DIR   .SAV   19  06-Feb-84       DUMP  .SAV    9  06-Feb-84
    4 Files,  102 Blocks
    226 Free blocks

       Тогда, вооружившись русско-английским словарем, посмотрим  каталог  фай-
  лов, созданных до указанной даты, и используем для  этого  ключ  /BEFORE  (до
  того, в отношении времени).

  +---------------
  !  .DIRECTORY/BEFORE:06:FEB:84 DX0:<ВК>
  !  -
  !

  Мы опять попали в точку:

    29-Jul-86

   SWAP  .SYS   26P 13-Jan-84
    1 Files,  26 Blocks
    226 Free blocks

       А теперь, естественно, как капризные дети, мы  хотим  посмотреть  список
  файлов после указанной даты. Найдя в словаре слово SINCE (после того, в отно-
  шении времени), используем его в качестве ключа

  +---------------
  !  .DIRECTORY/SINCE:10:MAR:84 DX0:<ВК>
  !  -
  !

  и получим:

    29-Jul-86

  RT11SJ.SYS   73P 10-Mar-84       TT    .SYS    2P 10-Mar-84
  DX    .SYS    3P 10-Mar-84       SL    .SYS   13P 10-Mar-84
  LP    .SYS    2P 10-Mar-84       MX    .SYS   10P 10-Mar-84
  NL    .SYS    2P 10-Mar-84       RK    .SYS    3P 10-Mar-84
  MT    .SYS    9P 10-Mar-84       DP    .SYS    3P 10-Mar-84
  LD    .SYS    8P 10-Mar-84       DXFILE.DIR    2  29-Jul-86
   12 Files,  132 Blocks
   226 Free blocks

       Мы разложили каталог нашей единственной дискеты  по  полочкам,  т.е.  по
  датам. А как можно по-другому выбрать информацию о файлах из каталога? Напри-
  мер, мы хотим посмотреть каталог начиная с некоторого файла. Самое простое  -
  записать команду следующим образом

  +---------------
  !  .DIRECTORY/BEGIN DX0:PIP.SAV<ВК>
  !  -
  !

  т.е. ключ /BEGIN - начало, и  в  качестве  спецификации  устройства,  каталог


                                     - 68 -
           RT-11, A step by step              DIRectory   14-Nov-92


  которого мы хотим посмотреть, дать  полную  спецификацию  файла,  с  которого
  начинать распечатку каталога.
       И вот результат:

    29-Jul-86

  PIP   .SAV   29  06-Feb-84       DUP   .SAV   45  06-Feb-84
  DIR   .SAV   19  06-Feb-84       DUMP  .SAV    9  06-Feb-84
  DX0FIL.DIR    2                  DXFILE.DIR    2  29-Jul-86
    6 Files,  106 Blocks
    226 Free blocks

       - А если я не хочу смотреть на весь каталог целиком,- говорит Алеша,- мы
  ведь в качестве спецификации указывали только имя  устройства,  а  его  объем
  может быть очень большим. Что  будет,  если  мы  укажем  полную  спецификацию
  файла?

  +---------------
  !  .DIRECTORY DX0:PIP.SAV<ВК>
  !  -
  !

  Ругаться система не стала, а выдала на экран следующее:

    29-Jul-86

  PIP   .SAV   29  06-Feb-84
   1 Files,  29 Blocks
   226 Free blocks

  Оказывается, таким образом мы без всякого поиска можем  посмотреть,  есть  ли
  указанный файл на устройстве.
       Но тогда мы можем применить групповую спецификацию файла. А именно:

  +---------------
  !  .DIRECTORY DX0:.SYS<ВК>
  !  -
  !

  и система показала нам только файлы с типом .SYS:

    29-Jul-86

  SWAP  .SYS   26P 13-Jan-84       RT11SJ.SYS   73P 10-Mar-84
  TT    .SYS    2P 10-Mar-84       DX    .SYS    3P 10-Mar-84
  SL    .SYS   13P 10-Mar-84       LP    .SYS    2P 10-Mar-84
  MX    .SYS   10P 10-Mar-84       NL    .SYS    2P 10-Mar-84
  RK    .SYS    3P 10-Mar-84       MT    .SYS    9P 10-Mar-84
  DP    .SYS    3P 10-Mar-84       LD    .SYS    8P 10-Mar-84
    12 Files,  154 Blocks
    226 Free blocks

  или, например

  +---------------
  !  .DIRECTORY DX0:%%<ВК>
  !  -
  !


                                     - 69 -
           RT-11, A step by step              DIRectory   14-Nov-92


  т.е. показать только файлы, у которых имя состоит из двух букв.

    29-Jul-86

  TT    .SYS    2P 10-Mar-84       DX    .SYS    3P 10-Mar-84
  SL    .SYS   13P 10-Mar-84       LP    .SYS    2P 10-Mar-84
  MX    .SYS   10P 10-Mar-84       NL    .SYS    2P 10-Mar-84
  RK    .SYS    3P 10-Mar-84       MT    .SYS    9P 10-Mar-84
  DP    .SYS    3P 10-Mar-84       LD    .SYS    8P 10-Mar-84
    10 Files,  60 Blocks
    226 Free blocks

       Но если нам легче сказать, какие файлы не нужно  включать  в  распечатку
  каталога, чем нужные спецификации файлов собирать в группы, то будем искать в
  словаре слово для ключа, позволяющего исключить указанные файлы из распечатки
  каталога. По-русски мы уже это слово сказали. Поэтому скажем его более  точно
  по-русски, а на клавиатуре наберем по-английски - "Показать на  экране  ката-
  лог, исключая", - а далее групповую спецификацию файлов.

  +---------------
  !  .DIRECTORY/EXCLUDE DX0:.SAV<ВК>
  !  -
  !

  Мы увидим на экране:

    29-Jul-86

  SWAP  .SYS   26P 13-Jan-84       RT11SJ.SYS   73P 10-Mar-84
  TT    .SYS    2P 10-Mar-84       DX    .SYS    3P 10-Mar-84
  SL    .SYS   13P 10-Mar-84       LP    .SYS    2P 10-Mar-84
  MX    .SYS   10P 10-Mar-84       NL    .SYS    2P 10-Mar-84
  RK    .SYS    3P 10-Mar-84       MT    .SYS    9P 10-Mar-84
  DP    .SYS    3P 10-Mar-84       LD    .SYS    8P 10-Mar-84
  DX0FIL.DIR    2                  DXFILE.DIR    2  29-Jul-86
    14 Files,  158 Blocks
    226 Free blocks

       Остался необясненный только символ "P" после размера файла. Скорее  все-
  го, это какой-нибудь признак состояния файла, причем слово в английском  язы-
  ке, обозначающее это состояние, начинается с буквы "P". Какие признаки  могут
  быть у файла? Постоянный? Временный? Неиспользуемый?  Но  мы  можем  работать
  только с постоянными файлами, и это состояние не  нужно  специально  выделять
  для какой-то группы файлов. Из всех слов, которые мы смогли  найти  в  англо-
  русском словаре - а это около полутора десятков,  -  с  достаточной  степенью
  вероятности можно предположить, что это слово PROTECT - защитное приспособле-
  ние. Т.е. имеется, видимо, какая-то возможность защищать файл от чего-то. Для
  проверки попробуем использовать это слово в качестве ключа и  посмотрим,  что
  из этого выйдет. После набора строки:

  +---------------
  !  .DIRECTORY/PROTECT DX0:<ВК>
  !  -
  !


                                     - 70 -
           RT-11, A step by step              DIRectory   14-Nov-92


  мы увидим на экране следующий список файлов:

    29-Jul-86

  SWAP  .SYS   26P 13-Jan-84       RT11SJ.SYS   73P 10-Mar-84
  TT    .SYS    2P 10-Mar-84       DX    .SYS    3P 10-Mar-84
  SL    .SYS   13P 10-Mar-84       LP    .SYS    2P 10-Mar-84
  MX    .SYS   10P 10-Mar-84       NL    .SYS    2P 10-Mar-84
  RK    .SYS    3P 10-Mar-84       MT    .SYS    9P 10-Mar-84
  DP    .SYS    3P 10-Mar-84       LD    .SYS    8P 10-Mar-84
    12 Files,  154 Blocks
    226 Free blocks

  В нем указаны только те файлы, которые имеют признак "P". Мы  убедились,  что
  слово угадали правильно, но что означает это состояние, пока узнать не можем.

       - А если попробовать обратную операцию,- говорит Алеша,- прочитать ката-
  лог незащищенных файлов.
       Здесь подсказку надо искать в английском языке. Например, в  виде  прис-
  тавки, обозначающей обратное или противоположное действие. А именно - PROTECT
  ==> NOPROTECT, и попробуем это слово в качестве ключа:

  +---------------
  !  .DIRECTORY/NOPROTECT DX0:<ВК>
  !  -
  !

  Полученный каталог

    29-Jul-86

  PIP   .SAV   29  06-Feb-84       DUP   .SAV   45  06-Feb-84
  DIR   .SAV   19  06-Feb-84       DUMP  .SAV    9  06-Feb-84
  DX0FIL.DIR    2                  DXFILE.DIR    2  29-Jul-86
    6 Files,  104 Blocks
    226 Free blocks

  показывает, что мы часто стали угадывать нужные нам слова.






       3.2.3. По порядку номеров рассчитайсь,


                                       или
                               Сортировка каталога


       - Ну, больше с каталогами, наверное, ничего не сделаешь,- устало  сказал
  Алеша,- по крайней мере  такое  разнообразие  распечаток  каталогов  начинает
  утомлять.
       - Да, конечно, ни одна из однопользовательских систем  не  предоставляет
  так много возможностей пользователю. Но ведь это еще не все.
       - Как не все? - удивился Алеша.
       - Ну, если ты устал, то давай поиграем в кубики.
       - В какие кубики?- Алеша недоуменно закрутил головой.- Ведь мы  работаем


                                     - 71 -
           RT-11, A step by step              DIRectory   14-Nov-92


  в системе, да и нас, наверное, скоро попросят освободить ДВК.
       - Ну, а если представить себе, что вместо файлов у нас кубики. Большие и
  маленькие, разных цветов и, наверное, разного веса. Что мы с такими  кубиками
  сможем сделать? Мы сможем их расставить на столе в некотором порядке, в соот-
  ветствии с каким-нибудь признаком - размером, цветом и т.п. Этот процесс час-
  то называют сортировкой. Итак, начнем сортировку?

       Не сочтем за особую привередливость желание, чтобы записи  о  файлах,  в
  показываемом нам каталоге, были расположены в удобном для нас виде. Например,
  в алфавитном порядке. Но алфавит - это по-русски, а как  будет  по-английски?
  Вспомним, что алфавит - это русифицированное  произношение  первых  греческих
  букв АЛЬФА и БЕТА (слово АЗБУКА имеет то же происхождение), и запишем его по-
  английски - ALPHABET. Тогда команда будет выглядеть следующим образом:

  ,+---------------
  !  .DIRECTORY/COLUMNS:1/ALPHABET DX0:<ВК>
  !  -
  !

  посмотрев полученный каталог

              29-Jul-86

            DIR   .SAV    19  06-Feb-84
            DP    .SYS     3P 10-Mar-84
            DUMP  .SAV     9  06-Feb-84
            DUP   .SAV    45  06-Feb-84
            DX    .SYS     3P 10-Mar-84
            DXFILE.DIR     2  29-Jul-86
            DX0FIL.DIR     2
            LD    .SYS     8P 10-Mar-84
            LP    .SYS     2P 10-Mar-84
            MT    .SYS     9P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            PIP   .SAV    29  06-Feb-84
            RK    .SYS     3P 10-Mar-84
            RT11SJ.SYS    73P 10-Mar-84
            SWAP  .SYS    26P 13-Jan-84
            SL    .SYS    13P 10-Mar-84
            TT    .SYS     2P 10-Mar-84
             18 Files, 260 Blocks
             226 Free blocks


  мы убедились, что файлы расположились в алфавитном порядке.


       Примечание. Для удобства и  наглядности  процесса  сортировки  мы  будем
  выводить распечатку каталога в одну колонку. При выводе распечатки в несколь-
  ко колонок порядок расположения файлов (по сравнению с распечаткой без сорти-
  ровки) иной. Каталог теперь читается по столбцам  -  сначала  первый  столбец
  сверху вниз, затем второй и т.д. Конец примечания.

       А если мы хотим рассортировать файлы по датам или  по  размерам  или  по
  типам - тогда как? Сомнительно, чтобы для  каждого  такого  случая  был  свой
  ключ. Скорее всего, ключ будет один, но с различными параметрами,  соответст-
  вующими тем признакам, по которым сортируется каталог. Название  этого  ключа
  мы упоминали уже несколько раз: сортировка - /SORT. Попробуем:


                                     - 72 -
           RT-11, A step by step              DIRectory   14-Nov-92


  +---------------
  !  .DIRECTORY/COLUMNS:1/SORT DX0:<ВК>
  !  -
  !

  получив знакомую картинку:

              29-Jul-86

            SWAP  .SYS    26P 13-Jan-84
            RT11SJ.SYS    73P 10-Mar-84
            TT    .SYS     2P 10-Mar-84
            DX    .SYS     3P 10-Mar-84
            SL    .SYS    13P 10-Mar-84
            LP    .SYS     2P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            RK    .SYS     3P 10-Mar-84
            MT    .SYS     9P 10-Mar-84
            DP    .SYS     3P 10-Mar-84
            LD    .SYS     8P 10-Mar-84
            PIP   .SAV    29  06-Feb-84
            DUP   .SAV    45  06-Feb-84
            DIR   .SAV    19  06-Feb-84
            DUMP  .SAV     9  06-Feb-84
            DX0FIL.DIR     2
            DXFILE.DIR     2  29-Jul-86
             18 Files, 260 Blocks
             226 Free blocks

  мы понимаем, что по умолчанию файлы сортируются по порядку их расположения на
  устройстве (а точнее, не сортируются никак). Но с другой стороны,  этот  ключ
  должен иметь параметр, а мы его опустили. Откуда  система  узнает  по  какому
  признаку сортировать файлы.


       Примечание. Такие же результаты можно получить, используя ключ  "/ORDER"
  с такими же параметрами. Конец примечания.

       Будем искать параметры для этого ключа. Начали мы разговор с  даты,  как
  слово ДАТА пишется по-английски мы знаем и, не задумываясь, вводим команду:

  +---------------
  !  .DIRECTORY/COLUMNS:1/SORT:DATE DX0:<ВК>
  !  -
  !


                                     - 73 -
           RT-11, A step by step              DIRectory   14-Nov-92


  и, получив:

              29-Jul-86

            DX0FIL.DIR     2
            SWAP  .SYS    26P 13-Jan-84
            DIR   .SAV    19  06-Feb-84
            DUMP  .SAV     9  06-Feb-84
            DUP   .SAV    45  06-Feb-84
            PIP   .SAV    29  06-Feb-84
            DP    .SYS     3P 10-Mar-84
            DX    .SYS     3P 10-Mar-84
            LD    .SYS     8P 10-Mar-84
            LP    .SYS     2P 10-Mar-84
            MT    .SYS     9P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            RK    .SYS     3P 10-Mar-84
            RT11SJ.SYS    73P 10-Mar-84
            SL    .SYS    13P 10-Mar-84
            TT    .SYS     2P 10-Mar-84
            DXFILE.DIR     2  29-Jul-86
             18 Files, 260 Blocks
             226 Free blocks


  убеждаемся в том, что параметр подобран правильно, и сразу отмечаем, что если
  дата не указана, то считается, что файл создан в  доисторические  времена,  и
  запись о нем попадает в начало распечатки каталога.
       Следующий элемент спецификации  файла,  по  которому  можно  сортировать
  каталог, - это имя файла. Наиболее подходящее английское слово для  параметра
  ключа - NAME - даже переводить не надо.

  +---------------
  !  .DIRECTORY/COLUMNS:1/SORT:NAME DX0:<ВК>
  !  -
  !


                                     - 74 -
           RT-11, A step by step              DIRectory   14-Nov-92


  В результате мы получили уже знакомую нам картинку:

              29-Jul-86

            DIR   .SAV    19  06-Feb-84
            DP    .SYS     3P 10-Mar-84
            DUMP  .SAV     9  06-Feb-84
            DUP   .SAV    45  06-Feb-84
            DX    .SYS     3P 10-Mar-84
            DXFILE.DIR     2  29-Jul-86
            DX0FIL.DIR     2
            LD    .SYS     8P 10-Mar-84
            LP    .SYS     2P 10-Mar-84
            MT    .SYS     9P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            PIP   .SAV    29  06-Feb-84
            RK    .SYS     3P 10-Mar-84
            RT11SJ.SYS    73P 10-Mar-84
            SL    .SYS    13P 10-Mar-84
            SWAP  .SYS    26P 13-Jan-84
            TT    .SYS     2P 10-Mar-84
             18 Files, 260 Blocks
             226 Free blocks

       Но если мы хотим, чтобы типы файлов располагались в алфавитном  порядке,
  то можно сделать и это. Естественно, что параметр ключа будет TYPE.

  +---------------
  !  .DIRECTORY/COLUMNS:1/SORT:TYPE DX0:<ВК>
  !  -
  !

  Убедившись в этом

              29-Jul-86

            DXFILE.DIR     2  29-Jul-86
            DX0FIL.DIR     2
            DIR   .SAV    19  06-Feb-84
            DUMP  .SAV     9  06-Feb-84
            DUP   .SAV    45  06-Feb-84
            PIP   .SAV    29  06-Feb-84
            DP    .SYS     3P 10-Mar-84
            DX    .SYS     3P 10-Mar-84
            LD    .SYS     8P 10-Mar-84
            LP    .SYS     2P 10-Mar-84
            MT    .SYS     9P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            RK    .SYS     3P 10-Mar-84
            RT11SJ.SYS    73P 10-Mar-84
            SL    .SYS    13P 10-Mar-84
            SWAP  .SYS    26P 13-Jan-84
            TT    .SYS     2P 10-Mar-84
             18 Files, 260 Blocks
             226 Free blocks

  продолжаем играть дальше.


                                     - 75 -
           RT-11, A step by step              DIRectory   14-Nov-92


       Каждый файл занимает на устройстве какое-то место и имеет некоторый раз-
  мер, выраженный в блоках. Свободные зоны (а часто нас интересуют именно  они)
  рассматриваются системой также, как файлы, но пустые. Поэтому интересно расс-
  тавить файлы в распечатке каталога в порядке увеличения их  размеров.  Скорее
  всего, английское слово SIZE - размер, объем - и будет необходимым параметром
  ключао

  +---------------
  !  .DIRECTORY/COLUMNS:1/SORT:SIZE DX0:<ВК>
  !  -
  !

  И здесь мы угадали:

              29-Jul-86

            DXFILE.DIR     2  29-Jul-86
            DX0FIL.DIR     2
            LP    .SYS     2P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            TT    .SYS     2P 10-Mar-84
            DP    .SYS     3P 10-Mar-84
            DX    .SYS     3P 10-Mar-84
            RK    .SYS     3P 10-Mar-84
            LD    .SYS     8P 10-Mar-84
            DUMP  .SAV     9  06-Feb-84
            MT    .SYS     9P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            SL    .SYS    13P 10-Mar-84
            DIR   .SAV    19  06-Feb-84
            SWAP  .SYS    26P 13-Jan-84
            PIP   .SAV    29  06-Feb-84
            DUP   .SAV    45  06-Feb-84
            RT11SJ.SYS    73P 10-Mar-84
             18 Files, 260 Blocks
             226 Free blocks

       Но кроме размера, файлы располагаются на устройстве в некотором  порядке
  (это тот вопрос, над которым мы так долго бились в начале), и мы  хотим  ука-
  зать системе, чтобы файлы в распечатке каталога располагались в том же поряд-
  ке, что и на устройстве. Так как здесь мы не говорим о начальных номерах бло-
  ков, а только о позициях файлов, то и параметр назовем POSITION

  +---------------
  !  .DIRECTORY/COLUMNS:1/SORT:POSITION DX0:<ВК>
  !  -
  !


                                     - 76 -
           RT-11, A step by step              DIRectory   14-Nov-92


  и получили опять знакомую картинку.

              29-Jul-86

            SWAP  .SYS    26P 13-Jan-84
            RT11SJ.SYS    73P 10-Mar-84
            TT    .SYS     2P 10-Mar-84
            DX    .SYS     3P 10-Mar-84
            SL    .SYS    13P 10-Mar-84
            LP    .SYS     2P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            RK    .SYS     3P 10-Mar-84
            MT    .SYS     9P 10-Mar-84
            DP    .SYS     3P 10-Mar-84
            LD    .SYS     8P 10-Mar-84
            PIP   .SAV    29  06-Feb-84
            DUP   .SAV    45  06-Feb-84
            DIR   .SAV    19  06-Feb-84
            DUMP  .SAV     9  06-Feb-84
            DX0FIL.DIR     2
            DXFILE.DIR     2  29-Jul-86
             18 Files, 260 Blocks
             226 Free blocks

       Вот мы и перепробовали все возможности  сортировки.  Просто  нет  больше
  признаков, по которым можно сортировать каталог. А так ли это?  Все,  что  мы
  делали, можно назвать прямой сортировкой. А если все, что мы делали с катало-
  гом, сделать наоборот? Например, чтобы файлы в распечатке каталога располага-
  лись не в порядке увеличения размеров, а  в  порядке  уменьшения.  Английское
  слово REVERSE - поворот назад, обратно - наверняка нам подойдет, но использо-
  вать его нужно не как параметр, а как ключ, так как он влияет на любой  пара-
  метр ключа /SORT.

  +---------------
  !  .DIRECTORY/COLUMNS:1/SORT:SIZE/REVERSE DX0:<ВК>
  !  -
  !


                                     - 77 -
           RT-11, A step by step              DIRectory   14-Nov-92


  Теперь мы быстро найдем самый большой файл.

              29-Jul-86

            RT11SJ.SYS    73P 10-Mar-84
            DUP   .SAV    45  06-Feb-84
            PIP   .SAV    29  06-Feb-84
            SWAP  .SYS    26P 13-Jan-84
            DIR   .SAV    19  06-Feb-84
            SL    .SYS    13P 10-Mar-84
            MX    .SYS    10P 10-Mar-84
            DUMP  .SAV     9  06-Feb-84
            MT    .SYS     9P 10-Mar-84
            LD    .SYS     8P 10-Mar-84
            DP    .SYS     3P 10-Mar-84
            DX    .SYS     3P 10-Mar-84
            RK    .SYS     3P 10-Mar-84
            DX0FIL.DIR     2
            DXFILE.DIR     2  29-Jul-86
            LP    .SYS     2P 10-Mar-84
            NL    .SYS     2P 10-Mar-84
            TT    .SYS     2P 10-Mar-84
             18 Files, 260 Blocks
             226 Free blocks






       3.2.4. Как веревочке не виться...


                                       или
                              Все ли мы попробовали


       Даже при самой богатой фантазии трудно придумать, что еще можно  сделать
  с каталогом. Но это только потому, что мы еще не имеем опыта работы с  систе-
  мой. У нас только одна дискета и то наполовину пустая, да и работаем мы толь-
  ко первый день. Поэтому дальше приводятся дополнительные возможности програм-
  мы DIR, о которых мы не могли догадаться сами.
       Во-первых, мы можем посмотреть суммарную структуру каталога. Правда,  мы
  пока в ней не сможем разобраться, но, имея эту информацию, мы сможем в  даль-
  нейшем разобраться в некоторых  особенностях  файловой  системы.  Итак,  ключ
  /SUMMARY.

  +---------------
  !  .DIRECTORY/SUMMARY DX0:<ВК>
  !  -
  !


                                     - 78 -
           RT-11, A step by step              DIRectory   14-Nov-92


  То, что мы увидели

             29-Jul-86

               18 Files in segment 1
               1 Available segments, 1 in use

             18 Files, 260 Blocks
             226 Free blocks

  нам действительно непонятно. Оказывается, как переводит нам  Алеша,  в  нашем
  распоряжении один сегмент, он используется и в нем 18 файлов. Знакомые итого-
  вые цифры подтверждают количество файлов. Информации мало, но это пока у  нас
  маленькая система. Намотаем себе это на ус, чтобы скоро об этом вспомнить.
       Мы не могли этого ожидать, но в некоторых случаях  мы  можем  посмотреть
  каталог удаленных файлов. В некоторых, потому что не всегда  удается  увидеть
  достоверную информацию об удаленных файлах. Когда и что мы видим, как в  этом
  разобраться, мы поймем после изучения файловой системы. А  пока  сделаем  для
  памяти  распечатку  на  бумаге  каталога  удаленных  файлов,  используя  ключ
  /DELETED - удалить.

  +---------------
  !  .DIRECTORY/COLUMNS:1/OCTAL/PRINT/DELETED DX0:<ВК>
  !  -
  !

  То, что мы увидели, действительно выглядит странно:

              29-Jul-86

             BOOCK.DPR    342  03-Mar-86    414
              0 Files, 0 Blocks
              342 Free blocks

  оказывается на дискете был еще какой-то файл.
       - Я эту распечатку отнесу домой,- говорит Алеша,- для памяти. И еще одну
  очень хитрую распечатку каталога надо вывести.  Все  может  понадобиться,-  и
  Алеша набрал следующую команду:

  +---------------
  !  .DIRECTORY/FULL/BLOCKS/OCTAL/COLUMNS:1/PRINT/VOLUMEID DX0:<ВК>
  !  -
  !


                                     - 79 -
           RT-11, A step by step              DIRectory   14-Nov-92


  распечатка получилась хорошая, и ее действительно нужно сохранить, так как по
  ней мы будем изучать файловую систему.

              29-Jul-86 Octal

             Volume ID: RT11SJ V5.00
             Owner    : Ашарина И.В.
            SWAP  .SYS    32P 13-Jan-84     10
            RT11SJ.SYS   111P 10-Mar-84     42
            TT    .SYS     2P 10-Mar-84    153
            DX    .SYS     3P 10-Mar-84    155
            SL    .SYS    15P 10-Mar-84    160
            LP    .SYS     2P 10-Mar-84    175
            MX    .SYS    12P 10-Mar-84    177
            NL    .SYS     2P 10-Mar-84    211
            RK    .SYS     3P 10-Mar-84    213
            MT    .SYS    11P 10-Mar-84    216
            DP    .SYS     3P 10-Mar-84    227
            LD    .SYS    10P 10-Mar-84    232
            PIP   .SAV    35  06-Feb-84    242
            DUP   .SAV    55  06-Feb-84    277
            DIR   .SAV    23  06-Feb-84    354
            DUMP  .SAV    11  06-Feb-84    377
            DX0FIL.DIR     2               410
            DXFILE.DIR     2  29-Jul-86    412
            < UNUSED >   342               414
             18 Files, 404 Blocks
             342 Free blocks

       В последствии, когда мы познакомимся с дисциплиной распределения  памяти
  на носителе, мы узнаем, что часто система предоставляет для  выходного  файла
  только половину наибольшей области. А если ее не хватает для файла  каталога,
  и нужно чуть больше? Для этого существует ключ /ALLOCATE  -  зарезервировать.
  Например:

  +---------------
  !  .DIRECTORY/OUTPUT:DX0:DFILE/ALLOCATE:6 DX0:<ВК>
  !  -
  !

  Для выходного файла будет зарезервировано 6 блоков, но при закрытии файла его
  размер будет определяться по действительному наличию информации.






       3.2.5. Некоторые подробности


                                       или
             Ключи и сокращения для интерпретатора командной строки


       Вот и все, что мы можем сделать с помощью программы DIR. Именно програм-
  мы, а не команды. К команде DIRECTORY мы еще вернемся,  когда  будем  изучать
  другие программы. Именно в этом и состоит главная  обязанность  клавиатурного
  монитора - вызвать нужную программу для выполнения заданной команды и расска-


                                     - 80 -
           RT-11, A step by step              DIRectory   14-Nov-92


  зать ей, что нужно сделать. Однако мы обещали рассказать, как можно выполнить
  работу клавиатурного монитора самим. Когда это может понадобиться?  Например,
  когда на системном устройстве нет места, допустим, для программы DIR.
       В таком случае необходимо в первую очередь  запустить  программу  DIR  с
  того устройства, где она имеется. Для этого придумаем смешную команду  RUN  -
  бежать. Так пусть наша программа DIR побежит.

  +---------------
  !  .RUN DX0:DIR.SAV<ВК>
  !  -
  !  *^
  !  -
  !

  И в ответ мы увидели звездочку, а неугомонный Алеша сразу нажал клавишу <ВК>.
  Программа DIR подумала, что мы не знакомы, и представилась:

  +---------------
  !  *<ВК>
  !  -
  !  DIR   V05.00
  !  ------------
  !  *^
  !  -
  !

       А дальше надо подумать. Мы знаем, что если в начале строки  стоит  звез-
  дочка, то программа вызвала интерпретатор командной строки (CSI) и  требуется
  ввести командную строку в формате CSI. И так как по умолчанию вывод  каталога
  происходит на терминал, то мы можем просто указать  имя  устройства,  каталог
  которого мы хотим посмотреть.

  +---------------
  !  *DX0:<ВК>
  !  -
  !

       Тот же эффект мы получим, если введем командную строку полностью:

  +---------------
  !  *TT:=DX0:<ВК>
  !  -
  !

  где вместо имени устройства для вывода информации "TT:"  может  стоять  любое
  другое, например "LP:", или полностью спецификация выходного файла.

       Таким образом, то, что мы делали с помощью команды

  +---------------
  !  .DIRECTORY/PRINT DX0:<ВК>
  !  -
  !

  можно сделать следующим образом:


                                     - 81 -
           RT-11, A step by step              DIRectory   14-Nov-92


  +---------------
  !  *LP:=DX0:<ВК>
  !  -
  !

  А то, что мы делали с помощью команды

  +---------------
  !  .DIRECTORY/OUTPUT:DX0:DX0FIL DX0:<ВК>
  !  -
  !

  можно сделать следующим образом:

  +---------------
  !  *DX0:DX0FIL=DX0:<ВК>
  !  -
  !

       Однако ключ /ALLOCATE мы не сможем явно передать в командной строке CSI.
  Для резервирования места на устройстве для выходного файла нужно  сопроводить
  спецификацию выходного файла числом, указывающим необходимое количество  бло-
  ков, заключенным в квадратные скобки, как это показано ниже.

  +---------------
  !  *DX0:DFILE[6]=DX0:<ВК>
  !  -
  !

  Будьте внимательны - здесь квадратные  скобки  являются  частью  спецификации
  выходного файла, а не означают необязательность элемента спецификации файла.
       А как же быть с остальными ключами? Совсем просто, если обладаешь  хоро-
  шей памятью или имеешь специальную табличку, которую мы приведем  ниже.  Ключ
  для CSI состоит из одного символа с  теми  же  аргументами,  которые  были  в
  командах KMON, но сокращенными до трех символов. Например,  вывод  распечатки
  каталога с ключем /SORT:NAME можно осуществить так:

  +---------------
  !  *DX0:/S:NAM<ВК>
  !  -
  !

       Так же, как название команды DIRECTORY можно сократить до трех символов,
  название каждого ключа программы DIR может быть существенно меньше тех, кото-
  рые мы использовали при работе с KMON. Ниже мы приводим таблицу ключей  прог-
  раммы DIR, используемых в KMON с командой DIRECTORY, их сокращений и значений
  этих ключей в CSI.

      +--------------------------------------------------------+
      !     Ключ         !    Сокращение    !    Значение      !
      !                  !    для   KMON    !    ключа CSI     !
      !------------------+------------------+------------------!
      !  PROTECTION             PRO                T           !
      !  BLOCKS                 BL                 B           !
      !  POSITION               PO                 B           !
      !  BRIEF                  BR                 F           !
      !  FAST                   FA                 F           !
      !  FULL                   FU                 E           !
      !  PRINTER                PRI                -           !


                                     - 82 -
           RT-11, A step by step              DIRectory   14-Nov-92


      !  TERMINAL               TE                 -           !
      !  OUTPUT                 OU                 -           !
      !  SUMMARY                SU                 N           !
      !  COLUMNS                C                  C:DVAL      !
      !  ORDER                  OR                 S:VAL       !
      !  SORT                   SO                 S:VAL       !
      !  EXCLUDE                EX                 P           !
      !  ALPHABETIZE            ALP                A           !
      !  OCTAL                  OC                 O           !
      !  NEWFILES               NE                 D           !
      !  DATE                   DA                 D:DVAL      !
      !  SINCE                  SI                 J:DVAL      !
      !  BEFORE                 BEF                K:DVAL      !
      !  FREE                   FR                 M           !
      !  VOLUMEID               VO                 V:VAL       !
      !  DELETED                DEL                Q           !
      !  REVERSE                REV                R           !
      !  BEGIN                  BEG                G           !
      !  NOPROTECTION           NOPRO              U           !

       Следует только отметить, что несколько ключей можно  применять  одновре-
  менно, если они по смыслу  не  противоречат  друг  другу.  Порядок  ключей  в
  командной строке как для KMON, так и для CSI не имеет значения.
       Ну вот и все. Осталось только вспомнить, как прервать  работу  программы
  DIR и вернуться опять в KMON.
       - Я помню,- сказал Алеша,- нужно одновременно нажать  клавиши  "CTRL"  и
  "C" большое латинское.
       И действительно, на экране появилась  точка.  Для  завершения  работы  в
  RT-11 никаких специальных действий не требуется. Нужно вынуть дискету, выклю-
  чить накопители, затем выключить все остальные устройства.



                                     - 83 -
           RT-11, A step by step                   DUMP   14-Nov-92


                           4. ПРОТИВ ЛОМА НЕТ ПРИЕМА,



                                       или
                                 Программа DUMP



       - Здравствуйте, Александр Геннадьевич,- поздоровался Алеша, придя  снова
  в машинный зал,- где мне можно сегодня поработать?
       Мы ушли в прошлый раз не попрощавшись, и это было неверно с нашей сторо-
  ны. Начальник машинного зала или Администратор -  человек,  отвечающий  и  за
  работоспособность вверенных ему ЭВМ, и за их  полноценную  загрузку.  Поэтому
  необходимо уважать его нелегкий труд. Можно подумать, что  такие  нравоучения
  уже наскучили. Да и если у нас будет личная ЭВМ, то нам некого будет уважать.
  Однако это не так. Вежливость, уважение к другим людям важны для любого чело-
  века, как часть его культуры. Программист - а особенно - системный - не  ува-
  жающий других, приносит вред не только моральный, но и материальный. Накапли-
  вая опыт работы в системе, мы не раз получим возможность убедиться в этом.
       - Здравствуй, Алеша!- сказал Александр Геннадьевич,- второй ДВК  сегодня
  до обеда будет свободен. Так что можешь занимать его до 13 часов.
       - Спасибо,- поблагодарил Алеша, включил ДВК, и минуты через полторы сис-
  тема опять с обидой сказала, что не нашла какой-то файл. Алеша, не обращая на
  это внимания, вместо приветствия ввел сегодняшнюю дату и время начала работы.

  +---------------
  !  .DATE 12-AUG-87<ВК>
  !  -
  !  .TIME 9:10<ВК>
  !  -
  !

       - Сегодня мы продолжим работу с глазами системы,- сказал Алеша,-  у  нас
  на очереди программа DUMP.
       - А что такое DUMP?- спрашиваю я Алешу.
       - Вопрос, конечно, интересный,- сказал Алеша,- я перерыл громадное коли-
  чество книг. В основном это были книги по большим ЭВМ (есть, например,  серия
  книг фирмы IBM по ЭВМ серии IBM-360/370, переведенная  на  русский  язык),  а
  также наш любимый англо-русский словарь. И вот что я узнал.
       Англо-русский словарь толкует это слово как "свалка", "куча  мусора".  И
  вроде бы это далеко от действительного смысла в нашем случае. Но это не  сов-
  сем так. В первых ЭВМ, когда не было средств отладки  программ,  единственной
  возможностью программиста было распечатать на бумаге  содержимое  оперативной
  памяти в двоичных или восьмеричных кодах. Ужасающее количество чисел  в  этих
  распечатках необходимо было для того, чтобы найти среди  них  одно  неверное,
  которое убило программу. А потом эта бумага шла в корзину и на свалку. Посте-
  пенно слову DUMP стали придавать смысл "посмертный снимок  памяти",  то  есть
  распечатка содержимого памяти, когда программа уже умерла, не работает.  Сей-
  час в таких системах, как RT-11, RSX-11 и других, дампом называют не  столько
  распечатку оперативной памяти, сколько распечатку  содержимого  запоминающего
  устройства или файла. Для распечатки содержимого оперативной  памяти  исполь-
  зуется возможность сохранить заданный участок памяти в виде файла на  внешнем
  запоминающем устройстве.
       Алеша хорошо поработал. И мы вместе с ним посмотрим, в каком виде  можно
  иметь дамп в RT-11.
       - А что мы должны увидеть?- спрашиваю я Алешу.- Примерный вид  выводимой
  информации или хотя бы примерное количество бумаги, которое нам может  потре-
  боваться, или сколько времени информация будет выводиться на  экран  дисплея.


                                     - 84 -
           RT-11, A step by step                   DUMP   14-Nov-92


  (Оценку необходимых ресурсов пользователь должен делать всегда, если не хочет
  заснуть у экрана дисплея или утонуть в ворохе бумаги. А  можно  и  просто  не
  получить никакого результата и проклинать при этом ни в чем не повинную  сис-
  тему.)
       - А это можно приблизительно подсчитать,- уверенно  сказал  Алеша,каждое
  16-ти разрядное слово в восьмеричной системе счисления отображается 6  симво-
  лами, и в качестве разделителя используется символ  <ПРОБЕЛ>.  Блок  содержит
  256. слов - значит на каждый блок, содержимое которого мы  хотим  посмотреть,
  программа DUMP должна выдать нам не менее 1800 символов, что составляет  одну
  стандартную машинописную страницу. Так как скорость вывода на  экран  состав-
  ляет около 960 символов в секунду, то один блок на  экране  появится  за  две
  секунды. На маленьких файлах и уснуть не успеешь. А остальное давайте посмот-
  рим на практике.
       Предположим, что имя программы и имя команды совпадают (а  мы  говорили,
  что в большинстве случаев это так), и введем с клавиатуры команду:

  +---------------
  !  .DUMP<ВК>
  !  -
  !

  как видно, система не все поняла, потому что задала вопрос:

  +---------------
  !   Device or files?
  !   -----------------
  !

  то есть она спрашивает, что нам нужно показать -  содержимое  устройства  или
  файла. Это и есть режим подсказки. Конечно, содержимое файла  всегда  меньше,
  чем содержимое устройства, на котором он находится. Поэтому для пробы выберем
  файл поменьше и назовем его.

  +---------------
  !   Device or files? DX0:DX0FIL.DIR<ВК>
  !   -----------------
  !

  Система проглотила нашу команду, и из ТПУ поползла голубая бумага, на которой
  темно-синими буквами изображены какие-то таблицы чисел.
       Ввиду большого размера мы не будем  приводить  в  тексте  всех  примеров
  полученных распечаток. В приложении к  этой  главе  мы  приведем  распечатки,
  которые нам потребуются в дальнейшем, а читателю предлагается самому получить
  те распечатки, которые Алеша будет делать себе для памяти.
       - Ну что же Алеша,- говорю я,- давай разбираться в этой куче чисел.
       - Первое,- начал Алеша,- в начале распечатки указана спецификация файла.
  Это хорошо для идентификации распечатки в дальнейшем.
       - А второе?- спрашиваю я.
       - А во-вторых,- продолжает Алеша,- в начале каждой таблицы указан  номер
  блока и какие-то числа в начале каждой строки. Так как мы распечатывали  дамп
  файла, а номера начинаются с нуля, то это  номер  блока  относительно  начала
  файла.
       - А числа в начале строки?
       - Ну, если сосчитать количество чисел в таблице,- предположительно гово-
  рит Алеша,- то это, наверное, номер байта в начале строки. Тогда номера  (или
  адреса) слов вдоль строки должны быть 0, 2, 4, 6, 10, 12, 14, 16 (они не рас-
  печатываются в виде заголовка). В подтверждение этого в начале каждой  строки
  номер увеличивается на 20.
       - А что за красная полоса идет сверху вниз на распечатке?


                                     - 85 -
           RT-11, A step by step                   DUMP   14-Nov-92


       - Но эта полоса проведена как-то по-другому,- замечает Алеша,- программа
  DUMP здесь ни при чем,- и открыв крышку ТПУ Алеша воскликнул,- так ведь бума-
  га кончилась, а красная полоса предупреждает об этом.
       Алеша взял у Александра Геннадьевича новый рулон бумаги и заправил его в
  ТПУ. При этом он с грустью заметил:
       - Так на нас бумаги не напасешься. Наверное, есть способ выводить инфор-
  мацию на терминал. Будем действовать по образу и подобию,- повеселев, говорит
  Алеша,- то, что в программе DIR было по  умолчанию,  здесь  нужно  сказать  в
  явной форме:

  +---------------
  !  .DUMP/TERMINAL DX0:DX0FIL.DIR<ВК>
  !  -
  !

  Действительно,- удовлетворенно замечает Алеша,- на экране точно такая же кар-
  тинка, какая была на бумаге.






       4.1. Где начало, где конец?


                                       или
                              Как управлять дампом?


       Теперь, когда мы можем экономить бумагу, можно немного поиграть  и  нау-
  читься управлять распечаткой.
       - И во-первых,- уверенно заявляет Алеша,- нам необходимо явно  указывать
  конец выводимой распечатки. Мы знаем, что минимально адресуемый элемент  дан-
  ных в системе - блок. И уже полученные распечатки подтверждают, что программа
  DUMP работает с блоками устройства или файла. Конец по-английски - END, номер
  блока, скорее всего, будет параметром, и, чтобы не расходовать зря бумагу,  в
  качестве устройства для вывода я укажу терминал.

  +---------------
  !  .DUMP/TERMINAL/END:6 DX0:RT11SJ.SYS<ВК>
  !  -
  !

  А там, в одном из блоков,- заметил Алеша,- целые фразы по-английски. Эту рас-
  печатку я сделаю на бумаге и дома разберусь, что к чему.
       - Ну кончить посередине,- говорю я,- ты  научился.  А  для  того,  чтобы
  начать с нужного блока, что нужно сделать?
       - Наверное, начать,- не задумываясь отвечает  Алеша,-  слово  "BEGIN"  -
  начало, должно нам подойти.

  +---------------
  !  .DUMP/TERMINAL/BEGIN:2 DX0:DX.SYS<ВК>
  !  -
  !  ?KMON-F-Invalid option for programm
  !  -----------------------------------
  !

  А она ругается,- сказал Алеша,- наверное, потжому что я не подумал.


                                     - 86 -
           RT-11, A step by step                   DUMP   14-Nov-92


       Примерно такую же функцию несет слово START - попробуем его  в  качестве
  ключа.

  +---------------
  !  .DUMP/TERMINAL/START:2 DX0:DX.SYS<ВК>
  !  -
  !

  Ура,- обрадовался Алеша, увидев на экране распечатку,- теперь она меня  поня-
  ла.
       - Ну, а если,- продолжаю я пытать Алешу,- тебе  понадобится  распечатать
  информацию только об одном блоке?
       - А это совсем просто,- говорит Алеша,- мы уже знаем слово ТОЛЬКО и сме-
  ло можем его использовать.

  +---------------
  !  .DUMP/TERMINAL/ONLY:6 DX0:<ВК>
  !  -
  !

       Все, что мы сейчас делали, было направлено на управление процессом выво-
  да распечатки дампа. Теперь можно заняться и исследованием того, в какой фор-
  ме выводится информация. Нас будет  интересовать  не  что  обозначает  каждое
  конкретное число, а, скорее, его форма - длинное оно  (т.е.  16-ти  разрядное
  слово) или короткое (8-ми разрядный байт). Или, например, как относятся  друг
  к другу числа и символы в полученных нами распечатках. Мы уже видели в распе-
  чатке два поля - числа в восмеричной системе счисления  и  какие-то  символы,
  которые иногда складываются в разумные слова  и  фразы.  Как  управлять  этой
  информацией?
       - О числах я, кажется,  догадался,-  говорит  Алеша,-  мы  распечатывали
  информацию по словам, а, наверное, можно и по байтам. Об  этом  просто  нужно
  сказать в команде.

  +---------------
  !  .DUMP/TERMINAL/BYTE DX0:DXFILE.DIR<ВК>
  !   -
  !

  А теперь мы видим,- обрадовался Алеша,- что  символы,  которые  печатались  в
  правом поле распечатки, - это попытка отобразить байты в кодах ASCII.  Навер-
  ное, в этом есть подсказка, как отказаться от этого  поля  распечатки.  Будем
  отрицать коды ASCII.

  +---------------
  !  .DUMP/TERMINAL/NOASCII DX0:DXFILE.DIR<ВК>
  !  -
  !

       - Но, Алеша,- спрашиваю я,- мы говорили и  о  коде  RADIX-50.  Если  она
  пытается перевести байты в код ASCII, то пусть попытается перевести  слова  в
  коды RADIX-50.
       - И то правда,- ответил Алеша,- наверное, ей нужно так и сказать:

  +---------------
  !  .DUMP/TERMINAL/RAD DX0:/START:6/END:7<ВК>
  !  -
  !

  О, в этой распечатке есть максимум информации, которую можно получить за один


                                     - 87 -
           RT-11, A step by step                   DUMP   14-Nov-92


  раз,- обрадовался Алеша,- и, кроме того, там знакомые имена файлов. Вот ее-то
  я и распечатаю для домашней работы (а мы ее приведем  в  приложении),  только
  начну с нулевого блока.

  +---------------
  !  .DUMP/RAD50/END:10 DX0:<ВК>
  !  -
  !






       4.2. А как быть с выходным файлом




       Программа DUMP по умолчанию выводит информацию на  устройство  печати  -
  принтер. Однако по нашему желанию она вывела ту же  информацию  на  терминал.
  Нам бы очень хотелось, как и в случае с программой DIR,  выводить  информацию
  на любое устройство.
       Для того чтобы лучше понять наши возможности, повторим все  наши  дейст-
  вия, но другим способом.
       - Также, как мы делали с программой DIR,- напомнил Алеша.
       - Да,- подтверждаю я,- например, вывод на терминал.

  +---------------
  !  .DUMP/OUTPUT:TT: DX0:DXFILE.DIR<ВК>
  !  -
  !

       - готово,- сказал Алеша, набрав команду,- на экране  появилась  знакомая
  картинка. Но так же можно вывести информацию и  на  принтер,  отменив  всякие
  умолчания.

  +---------------
  !  .DUMP/OUTPUT:LP: DX0:DXFILE.DIR<ВК>
  !  -
  !

  И все тоже самое повторилось на принтере,- обрадовался Алеша,- я  все  понял.
  Таким же образом мы можем вывести информацию в любой  файл.  Нужно  только  в
  качестве параметра для ключа /OUTPUT: полностью указать спецификацию выходно-
  го файла.
       - И не забыть,- добавляю я,- указать спецификацию устройства или  файла,
  который мы хотим посмотреть.

  +---------------
  !  .DUMP/OUTPUT:DX0:DX0FIL DX0:DX0FIL.DIR<ВК>
  !  -
  !

       Что-то в накопителе зашевелилось, и на экране появилась  точка.  Единст-
  венный, пока доступный нам способ узнать, произошло ли что-нибудь в  системе,
  - это посмотреть каталог DX0:.


                                     - 88 -
           RT-11, A step by step                   DUMP   14-Nov-92


  +---------------
  !  .DIR DX0:<ВК>
  !  -
  !

  Появилась знакомая картинка, и в каталоге добавился новый файл DX0FIL.DMP.

   12-Aug-86
  SWAP  .SYS    26P 13-Jan-84        RT11SJ.SYS    73P 10-Mar-84
  TT    .SYS     2P 10-Mar-84        DX    .SYS     3P 10-Mar-84
  SL    .SYS    13P 10-Mar-84        LP    .SYS     2P 10-Mar-84
  MX    .SYS    10P 10-Mar-84        NL    .SYS     2P 10-Mar-84
  RK    .SYS     3P 10-Mar-84        MT    .SYS     9P 10-Mar-84
  DP    .SYS     3P 10-Mar-84        LD    .SYS     8P 10-Mar-84
  PIP   .SAV    29  06-Feb-84        DUP   .SAV    45  06-Feb-84
  DIR   .SAV    19  06-Feb-84        DUMP  .SAV     9  06-Feb-84
  DX0FIL.DIR     2                   DXFILE.DIR     2  29-Jul-86
  DX0FIL.DMP    11  12-Aug-86
   19 Files, 271 Blocks
   215 Free blocks

  Этот файл текстовой, но посмотреть мы его пока не умеем. Отметим только,  что
  тип файла .DMP программа DUMP задает по умолчанию.

       Но кроме указанных, есть еще возможности, которые мы  пока  показать  не
  можем, но назвать должны.
       Как в случае с получением каталога устройства в виде файла по ключу OUT-
  PUT, мы можем зарезервировать место на носителе для выходного файла,  исполь-
  зовав совместно с ним ключ ALLOCATE и параметр, указывающий  размер  будущего
  файла в блоках. Например:

  +---------------
  !  .DUMP/OUTPUT:DX0:DMP1.DMP/ALLOCATE:30. DX0:DX0FIL.DIR<ВК>
  !  -
  !

       Следующий ключ FOREGN - ВНЕШНИЙ, позволяет посмотреть содержимое магнит-
  ной ленты, записанной в произвольном формате, то есть не так, как это принято
  в RT-11. Вот пример его использования.

  +---------------
  !  .DUMP/TERMINAL/FOREGN MT0:<ВК>
  !  -
  !


       Примечание. Так как магнитофон у нас подключен только к СОТКЕ, то мы  не
  сможем использовать этот ключ при работе на ДВК. Однако есть варианты систем,
  в которых магнитофон подключен и к ДВК. Конец примечания.

       Последний, но самый важный ключ программы DUMP - /IGNORE. Как  видно  из
  его названия, он позволяет игнорировать ошибки аппаратуры или носителя инфор-
  мации. К счастью (или нет?), у нас пока все работает хорошо. Но если мы ввели
  следующую командную строку:

  +---------------
  !  .DUMP/TERMINAL/IGNORE DX0:<ВК>
  !  -
  !


                                     - 89 -
           RT-11, A step by step                   DUMP   14-Nov-92


  то можем посмотреть содержимое всего устройства, несмотря на возможные плохие
  блоки и отдельные неполадки аппаратуры.
       - Все это интересно,- говорит Алеша,- но зачем все это нужно?
       - Конечно, не  зная  системы,  трудно  воспользоваться  такой  подробной
  информацией, да еще в таком большом объеме. Однако эта же информация  поможет
  нам при исследовании системы. И поэтому сформулируем основные формы использо-
  вания программы DUMP:
       - распечатывая подробную информацию о файле, мы можем использовать полу-
  ченный текст (из кода ASCII или RADIX-50)  или  некоторые  стандартные  формы
  файлов при определении назначения файла или способа его использования;
       - можно использовать текстовый  файл,  полученный  с  помощью  программы
  DUMP, для поиска определенных кодов  в  исходном  файле  с  помощью  программ
  редактирования текстов;
       - если по каким-то причинам испортился каталог тома, то, определив физи-
  ческое положение файлов на томе, мы сможем восстановить доступ к  информации.
  При подготовке этой книги из-за неисправности аппаратуры был испорчен каталог
  у двух диск-пакетов по 20 Мбайт каждый. В результате 80 тысяч блоков информа-
  ции (это примерно 20 тысяч страниц машинописного текста) стали не доступны. И
  только с помощью программы DUMP удалось спасти информацию.
       На этом вроде бы и можно закончить рассказ о программе DUMP.
       - Нет, мы забыли про некоторые подробности,- напоминает Алеша.






       4.3. Некоторые подробности,


                                       или
             Ключи и сокращения для интерпретатора командной строки


       - А как вызвать программу DUMP, мы уже знаем,- торопится Алеша  и  сразу
  набирает на клавиатуре командную строку.

  +---------------
  !  .RUN DX0:DUMP<ВК>
  !  -
  !

  и в ответ видит звездочку.
       Мы уже знаем, что язык CSI значительно беднее KMON, и если мы уже вызва-
  ли программу DUMP,  то  нужно  набрать  спецификацию  выходного  файла,  знак
  равенства и спецификацию входного файла.
       - Все, как для программы DIR,- заметил Алеша,- только если мы не  укажем
  спецификацию выходного файла, то вывод информации будет на устройство  печати
  (ПРИНТЕР), а не на терминал.
       Раз мы уже все знаем, то просто приведем знакомую нам  таблицу,  но  уже
  для программы DUMP. А читателю предлагается попробовать все, что мы делали  в
  KMON, проделать, используя ключи CSI.


                                     - 90 -
           RT-11, A step by step                   DUMP   14-Nov-92


  +-----------------------+-----------------+--------------------+
  !     Ключ в KMON       !   Сокращение    !   Значение         !
  !                       !   для   KMON    !   для  CSI         !
  !-----------------------+-----------------+--------------------!
  !    /ASCII                   AS                -              !
  !    /WORDS                   W                 W              !
  !    /BYTES                   BY                B              !
  !    /RAD50                   R                 X              !
  !    /ONLY:BLOCK              ON                O:VAL          !
  !    /START:BLOCK             ST                S:VAL          !
  !    /END:BLOCK               EN                E:VAL          !
  !    /IGNORE                  IG                G              !
  !    /FOREIGN                 FO                T              !
  !    /PRINTER                 PRI               -              !
  !    /TERMINAL                TE                -              !
  !    /OUTPUT:SPCFIL           OU                -              !
  !    /ALLOCATE:SIZE           ALL               -              !
  !    /NOASCII                 NOAS              N              !
  !

       Время наше закончилось, проверив, вся  ли  аппаратура  выключена,  Алеша
  побежал прощаться с Александром Геннадьевичем, а мы напоследок приведем  рас-
  печатку, которую обещали. Напомним, что получали мы ее командой:

  +---------------
  !    .DUMP/RAD/END:10 DX0:
  !

                                     - 91 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000000
000/ 000240 000413 000000 000000 000000 000000 000120 000340 * ...........P.`.
      D      F$                                 B      EX
020/ 000070 000340 000000 041420 116020 000400 116067 000056 *8.`....C....7...
      AP     EX           J/H    X82     FP    X91     AF
040/ 000066 011706 012702 000200 005000 000446 000000 013407 *6.F.B.....&.....
      AN    CFV    CSJ     CH    AX      GN           C$O
060/ 000000 000000 000000 000000 005714 001776 100762 000002 *........L.~.r...
                                 A5T     YV    T1Z      B
100/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
120/ 012704 177170 010405 012725 000000 000004 010315 000004 *D.x~..U.....M...
     CSL    :.X    B.7    CS/             D    B$U      D
140/ 010015 000004 012714 000003 000004 105714 100350 111522 *....L.....L.h.R.
     BV/      D    CST      C      D    VN.    TY     WV4
160/ 005301 003372 005002 000770 010601 005200 011703 000003 *A.z...x.....C...
     A.3    ADZ    AXB     LX    B2A    A$H    CFS      C
200/ 122323 000003 122323 000003 032767 000020 177712 001173 *S$..S$..w5..J.{.
     ZN5      C    ZN5      C    HYO      P    :7B     O5
220/ 005000 000571 012737 000167 000150 012737 000214 000152 *..y._.w.h._...j.
     AX      IQ    CS9     B9     BX    CS9     CT     BZ
240/ 012737 000300 004730 012737 000416 000020 005037 000044 *_.@.X._.......$.
     CS9     D2    AW     CS9     F0      P    AX1      6
260/ 005767 000346 001405 013703 004722 116367 000056 177630 *w.f...C.R.w.....
     A6W     E0     SM    C2C    AV4    YDW     AF    :52
300/ 006300 006300 006301 010046 010003 010004 005000 000402 *@.@.A.&.........
     BAX    BAX    BAY    BWN    BVS    BVT    AX      FR
320/ 162703 000027 005200 162704 000032 100372 022704 177762 *Ce....De..z.D%r.
     60S      W    A$H    60T      Z    TYR    FA.    :8B
340/ 006103 162703 000032 100375 062703 000033 000003 012600 *C.Ce..}.Ce......
     A8S    60S      Z    TYU    PKK      $      C    CQX
360/ 005200 005701 003350 000207 005714 001776 100533 105714 *..A.h...L.~.[.L.
     A$H    A5I    ADH     CO    A5T     YV    T$5    VN.
400/ 100011 111522 005301 003370 012702 000001 000765 005714 *..R.A.x.B...u.L.
     TSQ    WV4    A.3    ADX    CSJ      A     LU    A5T
420/ 100521 001775 000002 000000 000000 000000 000000 000000 *Q.}.............
     T$Y     YU      B                                   
440/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
460/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
500/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
520/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
540/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
560/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
600/ 000000 000000 000000 012706 010000 010046 012700 000002 *......F...&.@...
                          CSN    BVP    BWN    CSH      B
620/ 012701 002000 012702 001000 005027 000001 004767 177364 *A...B.......w.t~
     CSI     YX    CSJ     L2    AXW      A    AW1    :1.
640/ 012737 000300 004730 012737 016300 004716 012637 004722 *_.@.X._.@.N...R.
     CS9     D2    AW     CS9    DX     AV0    CRO    AV4
660/ 000137 001000 004167 000002 000766 012700 000746 004167 *_...w...v.@.f.w.
      BO     L2    ANG      B     LV    CSH     LF    ANG
700/ 000030 012100 004167 000022 012700 000762 004167 000012 *..@.w...@.r.w...
       X    CIX    ANG      R    CSH     LR    ANG      J
720/ 000005 000000 000776 112037 177566 105737 177564 100375 *....~...v._.t.}.
       E            L0    W$9    :48    VOG    :46    TYU
740/ 105710 001371 000201 005015 041077 047517 026524 026525 *H.y.....?BOOT-U-
     VNX     SA     CI    AXM    JW9    L$W    GJD    GJE
760/ 000200 005015 000012 027511 020117 071145 067562 000162 *......I/O error.
      CH    AXM      J    GVY    EF1    RLE    Q3J     B4


                                     - 92 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000001
000/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
020/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
040/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
060/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
100/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
120/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
140/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
160/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
200/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
220/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
240/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
260/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
300/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
320/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
340/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
360/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
400/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
420/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
440/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
460/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
500/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
520/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
540/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
560/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
600/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
620/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
640/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
660/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
700/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
720/ 000000 000001 000006 107123 052122 030461 045123 053040 *......S.RT11SJ V
              A      F    V05    MSZ    G43    K5$    M1H
740/ 027065 030060 071141 060550 063556 066145 065563 065151 *5.00arhangelskij
     GO/    G.P    RLA    OWP    PU8    QM/    QG$    QAA
760/ 042504 051103 030524 040461 020040 020040 000000 000000 *DECRT11A    ....
     KCL    MFS    G5.    JQI    EEX    EEX              


                                     - 93 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000002
000/ 012737 003440 000100 005037 000102 005003 011367 003714 *_. .@...B...w.L.
     CS9    AEX     AX    AX1     AZ    AXC    CAO    AI6
020/ 005023 005023 012713 001070 000407 013704 177570 042704 *....K.8...D.x.DE
     AXS    AXS    CSS     NH     FW    C2D    :5     KFT
040/ 003777 020427 160000 103410 005004 062704 004000 020427 *...!.`....De...!
     AKG    EK1    53X    UXH    AXD    PKL    AKH    EK1
060/ 170000 001402 011414 000771 012713 003436 011337 000010 *.p....y.K..._...
     8P      SJ    CA6     LY    CSS    AEV    C 1      H
100/ 010405 000241 006005 006205 006205 006205 006205 006205 *..!.............
     B.7     DA    A67    B E    B E    B E    B E    B E
120/ 010527 000000 012705 004716 011500 010001 162700 000050 *W...E.N.@...@e(.
     B09           CSM    AV0    CCH    BVQ    60P     A 
140/ 103374 160115 012515 066745 003622 012701 003706 010100 *|.M`M.em..A.F.@.
     UW6    55U    CPM    QWM    AHR    CSI    AI0    BX 
160/ 005737 177776 000240 042140 005737 177546 000240 052110 *_.~. .`D_.f. .HT
     A59    :8N     D     J7X    A59    :4V     D     MSP
200/ 001003 005737 000001 000240 052110 170000 052110 005737 *.._... .HT.pHT_.
      L5    A59      A     D     MSP    8P     MSP    A59
220/ 172000 000240 052110 005737 172540 000240 052110 005046 *.t .HT_.`u .HT&.
     9AX     D     MSP    A59    9JP     D     MSP    AX8
240/ 010046 004767 002364 005000 000007 004736 010066 000002 *&.w.t.....^.6...
     BWN    AW1     1.    AX       G    AWF    BW0      B
260/ 012600 022627 000004 001403 021527 062240 001003 042710 *...%....W# d..HE
     CQX    F W      D     SK    EZG    PD      L5    KFX
300/ 040004 005011 005740 005037 172032 000240 052110 005037 *.@..`....t .HT..
     JI.    AXI    A6     AX1    9BJ     D     MSP    AX1
320/ 177746 000240 052110 005737 177760 000240 052110 012703 *f. .HT_.p. .HTC.
     :70     D     MSP    A59    :8      D     MSP    CSK
340/ 000003 070303 022703 000011 001401 005011 052110 013702 *..CpC%......HTB.
       C    RA$    FA$      I     SI    AXI    MSP    C2B
360/ 177570 000240 052110 012737 000000 177570 000240 052110 *x. .HT_...x. .HT
     :5      D     MSP    CS9           :5      D     MSP
400/ 032767 004000 002276 001005 010046 076600 000100 012600 *w5..>...&..}@...
     HYO    AKH     0N     L7    BWN    TCH     AX    CQX
420/ 051110 005721 010146 010046 010446 005004 076052 012604 *HRQ.f.&.&...*|..
     MFX    A5Y    BX8    BWN    B/0    AXD    S4Z    CQ.
440/ 012600 012601 052110 052110 005037 000004 005037 000010 *....HTHT........
     CQX    CQY    MSP    MSP    AX1      D    AX1      H
460/ 005046 005046 005046 012700 000001 012703 007006 006300 *&.&.&.@...C...@.
     AX8    AX8    AX8    CSH      A    CSK    BI0    BAX
500/ 022020 012701 001000 004767 002104 103530 012701 005016 *.$A...w.D.X.A...
     E02    CSI     L2    AW1     $L    UZH    CSI    AXN
520/ 012100 010102 032722 002000 001463 022762 075273 000004 *@.B.R5..3.r%;z..
     CIX    BXB    HXR     YX     TS    FB4    SYS      D
540/ 001057 012205 020567 003154 001005 021267 003150 001002 */...w!l...7"h...
      M9    CKM    ENG    AAD     L7    EVG    AA      L4
560/ 010016 000446 020527 075131 001011 021227 062000 001006 *..&.W!Yz...".d..
     BV0     GN    EMO    SWA     MA    EUO    P       L8
600/ 010067 002142 016167 000010 002132 000432 005712 001030 *7.b.w...Z...J...
     BW1     .B    DVG      H     $4     GB    A5R     MP
620/ 020567 003072 001006 010066 000002 016166 000010 000004 *w!:...6...v.....
     ENG     94     L8    BW0      B    DVF      H      D
640/ 000417 020327 007202 103014 166742 003120 012205 020527 *..W ....bmP...W!
      F1    EJG    BL4    UQ6    8BR    A P    CKM    EMO
660/ 006250 001406 162705 000050 101375 001002 014223 010023 *(...Ee(.}.......
     BA      SN    60U     A     T8M     L4    C7K    BV5
700/ 032711 004000 001007 066100 000010 062701 000016 066701 *I5....@l..Ae..Am
     HXI    AKH     L9    QL2      H    PKI      N    QVQ
720/ 003072 000677 016700 003060 001262 005013 012603 001413 *:.?.@.0.2.......
      94     KG    D0P     9X     QJ    AXK    CQ$     SS
740/ 012600 001406 005767 001776 001013 004137 000672 004024 *....w.~..._.:...
     CQX     SN    A6W     YV     MC    AMW     KB    AK.
760/ 004137 000672 004047 004137 000672 004160 000137 000664 *_.:.'._.:.p._.4.
     AMW     KB    ALG    AMW     KB    AN      BO     J6


                                     - 94 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000003
000/ 010427 000000 012601 010467 002720 000301 001117 010402 *......7.P.A.O...
     B/O           CQY    B0G     7H     D3     N1    B.4
020/ 160102 103514 160102 103512 020227 011000 103507 004767 *B`L.B`J.. ..G.w.
     55J    UY6    55J    UY4    EHW    B5H    UY1    AW1
040/ 001560 103754 010205 062705 000176 004767 001554 005735 *p.l...Ee~.w.l.].
      V     U/6    BY/    PKM     CF    AW1     U6    A57
060/ 000240 103412 005725 001403 004767 001424 103405 062705 * ...U...w.....Ee
      D     UXJ    A5/     SK    AW1     S.    UXE    PKM
100/ 177656 021567 002670 001403 004237 000672 004207 004736 *..w#8.....:...^.
     :6N    EZ9     6X     SK    AOG     KB    ANW    AWF
120/ 014546 014546 014546 010046 005216 062702 001000 010200 *f.f.f.&...Be....
     DBV    DBV    DBV    BWN    A$V    PKJ     L2    BYX
140/ 061502 014244 020200 101375 010405 010300 062700 000005 *Bc$.. }...@.@e..
     O5J    C7.    EH     T8M    B.7    B$H    PKH      E
160/ 012701 000306 004767 001426 103701 062700 000001 010003 *A.F.w...A.@e....
     CSI     D8    AW1     S0    U.3    PKH      A    BVS
200/ 062703 000020 016701 002526 160104 103420 006001 010402 *Ce..A.V.D`......
     PKK      P    D0Q     4F    55L    UXP    A63    B.4
220/ 020227 010000 103016 020227 001000 103410 162701 010000 *. ..... ....Ae..
     EHW    BVP    UQ8    EHW     L2    UXH    60Q    BVP
240/ 010300 062702 020000 020227 010000 103003 004137 000672 *@.Be. . ...._.:.
     B$H    PKJ    ED2    EHW    BVP    UQ$    AMW     KB
260/ 005576 004767 001334 103642 162704 006000 010502 062705 *~.w.\.".De..B.Ee
     A3V    AW1     RL    U.B    60T    A62    B0R    PKM
300/ 000006 010564 044574 010564 036770 012201 100003 006301 *..t.|It.x=....A.
       F    B1.    K0L    B1.    I6X    CKI    TSK    BAY
320/ 060102 012201 001406 004767 001126 010211 062221 012211 *B`....w.V....d..
     OPB    CKI     SN    AW1     N8    BY3    PCY    CKQ
340/ 000770 012664 037132 012664 037212 016764 002342 036710 *x.4.Z>4..>t.b.H=
      LX    CR6    I9B    CR6    J J    D1.     1J    I5P
360/ 016764 002410 036412 011664 037272 012664 036534 012664 *t....=4.:>4.\=4.
     D1.     2H    I0Z    CFD    JAR    CR6    I2.    CR6
400/ 037052 012746 026006 020003 001006 005064 041242 005064 **>f..,. ..4."B4.
     I74    CTF    GA0    ED5     L8    AYL    JZR    AYL
420/ 044412 012716 026022 060416 016764 001312 045360 010364 *.IN..,.at.J.pJt.
     K$R    CSV    GBB    OUF    D1.     Q4    K9X    B.T
440/ 044122 012746 000340 004767 000766 004737 005366 004736 *RHf.`.w.v._.v.^.
     KV4    CTF     EX    AW1     LV    AWG    A0F    AWF
460/ 016764 176436 036420 056764 001212 036300 056764 001202 *t..}.=t]..@<t]..
     D1.    :S8    I02    OAL     PJ    I.2    OAL     PB
500/ 036370 005767 002226 001010 012703 005000 012364 036320 *x<w.....C...t.P<
     I0H    A6W     /N     M     CSK    AX     CND    I/H
520/ 012364 036322 011364 036262 012700 004722 042710 177770 *t.R<t.2<@.R.HEx.
     CND    I/J    CAL    I.R    CSH    AV4    KFX    :8H
540/ 111064 036275 016701 002150 062001 062701 000036 010164 *4.=<A.h..dAe..t.
     WO.    I./    D0Q     .H    P A    PKI      0    BYL
560/ 036616 010164 036620 012064 036406 012064 036410 012720 *.=t..=4..=4..=P.
     I38    BYL    I4     CIL    I0V    CIL    I0X    CSX
600/ 003562 012001 012703 005360 012341 060411 005713 001374 *r...C.p.a..aK.|.
     AGZ    CHA    CSK    A0     CMY    OUA    A5S     SD
620/ 012700 036004 060400 012720 100002 005020 012720 177777 *@..<.aP.....P...
     CSH    IXD    OT2    CSX    TSJ    AXP    CSX    :8O
640/ 005020 105020 116710 002052 005046 004767 000562 104355 *....H.*.&.w.r.m.
     AXP    VCX    YI2     ZZ    AX8    AW1     IJ    U6M
660/ 005067 000322 012703 007004 005723 012701 036766 060401 *7.R.C...S.A.v=.a
     AYO     EJ    CSK    BI.    A5$    CSI    I6V    OT3
700/ 012302 001526 005005 022127 177777 001433 016100 177716 *B.V...W$....@.N.
     CL4     UN    AXE    E2W    :8O     S5    DT2    :7F
720/ 001003 005705 001001 010105 026700 001764 001007 005761 *..E...E.@-t...q.
      L5    A5M     L3    BXE    GL2     YL     L9    A6Q
740/ 177776 001004 005061 177716 005000 000765 020200 001353 *~...1.N...u.. k.
     :8N     L6    AYI    :7F    AX      LU    EH      R$
760/ 014102 056102 000142 001340 000407 112767 000177 000207 *B.B\b.`...w.....
     C5J    N0R     BR     RP     FW    W91     CG     CO


                                     - 95 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000004
000/ 000733 010501 001772 005741 011300 010146 012701 000400 *[.A.z.a.@.f.A...
      K5    B0Q     YR    A6A    C      BX8    CSI     FP
020/ 004767 000572 012601 103450 026767 002032 001740 001035 *w.z...(.w-..`...
     AW1     IR    CQY    UY     GNG     ZJ     X2     MU
040/ 012705 005204 004767 000562 005735 000240 103425 005715 *E...w.r.]. ...M.
     CSM    A$L    AW1     IJ    A57     D     UXU    A5U
060/ 001403 004767 000432 103420 004736 005213 011361 000142 *..w.....^...q.b.
      SK    AW1     GB    UXP    AWF    A$S    CAI     BR
100/ 012702 005060 012261 000222 012261 000302 012261 000062 *B.0.1...1.B.1.2.
     CSJ    AYH    CLQ     CZ    CLQ     D4    CLQ     AJ
120/ 016361 177776 177720 000660 004736 026127 177720 006250 *q.~.P.0.^.W,P.(.
     DYI    :8N    :7H     J2    AWF    GC1    :7H    BA 
140/ 001653 005061 177720 000650 012700 004122 104351 000644 *+.1.P.(.@.R.i.$.
      WS    AYI    :7H     JX    CSH    AMJ    U6I     JT
160/ 010146 012100 001017 005761 000140 001407 026127 177716 *f.@...q.`...W,N.
     BX8    CIX     MG    A6Q     BP     SO    GC1    :7F
200/ 045640 001367 105227 000000 000764 005061 177716 105267 * Kw.....t.1.N.7.
     LD      R9    VF9            LT    AYI    :7F    VG1
220/ 177765 000757 005200 001355 012601 105767 177751 100610 *u.o...m...w.i...
     :8E     LO    A$H     R/    CQY    VO1    :73    T/ 
240/ 012100 001776 020027 177777 001406 020064 036770 001770 *@.~.. ....4 x=x.
     CIX     YV    EEO    :8O     SN    EFD    I6X     YP
260/ 060461 177776 000765 005000 104354 026727 000446 000032 *1a~.u...l.W-&...
     OVA    :8N     LU    AX     U6L    GMO     GN      Z
300/ 103464 105767 177700 001403 112737 000040 000512 052737 *4.w.@..._. .J._U
     UYL    VO1    :62     SK    W9G      2     HJ    M/W
320/ 004000 000044 005727 000000 001003 012700 004740 104351 *..$.W.....@.`.i.
     AKH      6    A51            L5    CSH    AWH    U6I
340/ 005764 037130 001003 012700 003762 104351 005727 000000 *t.X>..@.r.i.W...
     A6T    I9      L5    CSH    AJ4    U6I    A51       
360/ 001403 052764 002000 036366 005727 000000 001403 052764 *..tU..v<W.....tU
      SK    M0D     YX    I0F    A51            SK    M0D
400/ 000004 036366 012701 120000 046701 000270 001006 012737 *..v<A.. AM8..._.
       D    I0F    CSI    YX     LQY     DX     L8    CS9
420/ 000001 177546 012737 000100 177546 005000 104350 005011 *..f._.@.f...h...
       A    :4V    CS9     AX    :4V    AX     U6H    AXI
440/ 000002 052766 000001 000002 000002 004137 000672 004076 *..vU......_.:.>.
       B    M0F      A      B      B    AMW     KB    AL0
460/ 004567 000036 005201 006201 010102 042701 177774 006202 *w.......B.AE|...
     ATW      0    A$I    B A    BXB    KFQ    :8L    B B
500/ 006202 060402 156162 003514 036326 000207 030300 001414 *...ar\L.V<..@0..
     B B    OT4    5J4    AF.    I/N     CO    G2      ST
520/ 010546 010446 010346 010246 010146 010046 010546 016605 *f.&.f.&.f.&.f...
     B1N    B/0    B.F    BZV    BX8    BWN    B1N    D.7
540/ 000014 004736 012600 012601 012602 012603 012604 012605 *..^.............
       L    AWF    CQX    CQY    CQZ    CQ$    CQ.    CQ/
560/ 000207 010067 000164 012700 003750 012710 004000 010260 *..7.t.@.h.H...0.
      CO    BW1     B6    CSH    AJX    CSP    AKH    BZ2
600/ 000004 010160 000006 005060 000010 104375 000207 012702 *..p...0...}...B.
       D    BYH      F    AYH      H    U6/     CO    CSJ
620/ 005006 004567 177674 000177 001076 013767 000004 000026 *..w.<...>.w.....
     AXF    ATW    :6.     CG     NN    C3O      D      V
640/ 012737 003442 000004 013767 000010 000020 012737 003442 *_."...w....._.".
     CS9    AEZ      D    C3O      H      P    CS9    AEZ
660/ 000010 004736 012737 000000 000004 012737 000000 000010 *..^._....._.....
       H    AWF    CS9             D    CS9             H
700/ 000207 000000 004000 004000 020000 100000 000100 000004 *......... ..@...
      CO           AKH    AKH    ED2    TSH     AX      D
720/ 040000 001000 000001 040000 000400 000004 000010 100000 *.@.....@........
     JIX     L2      A    JIX     FP      D      H    TSH
740/ 000200 000020 177777 000000 000000 000000 000000 000000 *................
      CH      P    :8O                                   
760/ 000000 041077 047517 026524 026527 047111 040526 044514 *..?BOOT-W-INVALI
            JW9    L$W    GJD    GJG    LUA    JRF    K/D


                                     - 96 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000005
000/ 020104 051117 046440 051511 044523 043516 052040 027124 *D OR MISSING TT.
     EFT    MF1    LMX    MMA    K/K    KPN    MRP    GPT
020/ 054523 000123 053523 050101 051456 051531 047040 052117 *SYS.SWAP.SYS NOT
     NK$     BC    M85    L3Y    MLN    MMQ    LT     MSW
040/ 043040 052517 042116 044000 047101 046104 051105 043040 * FOUND.HANDLER F
     KH2    MY9    J7F    KT2    LT3    LHD    MFU    KH2
060/ 046111 020105 047516 020124 047506 047125 000104 053523 *ILE NOT FOUND.SW
     LHI    EFU    L$V    EF6    L$N    LUM     A.    M85
100/ 050101 043040 046111 020105 047524 020117 046523 046101 *AP FILE TOO SMAL
     L3Y    KH2    LHI    EFU    L$.    EF1    LN5    LHA
120/ 000114 041077 047517 026524 026527 051105 047522 020122 *L.?BOOT-W-ERROR 
      A6    JW9    L$W    GJD    GJG    MFU    L$Z    EF4
140/ 042522 042101 047111 020107 040510 042116 042514 000122 *READING HANDLER.
     KCZ    J63    LUA    EFW    JQ2    J7F    KCT     BB
160/ 047515 044516 047524 020122 044506 042514 047040 052117 *MONITOR FILE NOT
     L$U    K/F    L$.    EF4    K.8    KCT    LT     MSW
200/ 043040 052517 042116 041400 047117 046106 041511 044524 * FOUND.CONFLICTI
     KH2    MY9    J7F    J.2    LUG    LHF    J0Y    K/L
220/ 043516 051440 051531 042507 020116 050117 044524 047117 *NG SYSGEN OPTION
     KPN    ML     MMQ    KCO    EF0    L39    K/L    LUG
240/ 000123 000000 000000 000000 000000 000000 000000 000000 *S...............
      BC                                                 
260/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
300/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
320/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
340/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
360/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
400/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
420/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
440/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
460/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
500/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
520/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
540/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
560/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
600/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
620/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
640/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                        
660/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
700/ 000000 000000 000000 000000 000000 000000 000000 016300 *..............@.
                                                      DX 
720/ 000000 007354 071677 142302 000224 000000 000000 040142 *..l.?sBD......b@
            BOT    RT1    1SJ     C.                  JLB
740/ 005015 052122 030455 051461 020112 053040 032460 030056 *..RT-11SJ  V05.0
     AXM    MSZ    G4/    MLQ    EFZ    M1H    HTP    G.N
760/ 020060 013440 000000 000000 000000 000000 000000 000000 *0  .............
     EF     C.                                           


                                     - 97 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000006
000/ 000001 000000 000001 000000 000010 102000 075131 062000 *............Yz.d
       A             A             H    UD2    SWA    P  
020/ 075273 000032 000000 002654 102000 071677 142302 075273 *;z....,...?sBD;z
     SYS      Z            6L    UD2    RT1    1SJ    SYS
040/ 000111 000000 006514 102000 100040 000000 075273 000002 *I...L... ...;z..
      A3           BED    UD2    TT            SYS      B
060/ 000000 006514 102000 016300 000000 075273 000003 000000 *..L...@...;z....
            BED    UD2    DX            SYS      C       
100/ 006514 102000 074240 000000 075273 000015 000000 006514 *L... x..;z....L.
     BED    UD2    SL            SYS      M           BED
120/ 102000 046600 000000 075273 000002 000000 006514 102000 *...M..;z....L...
     UD2    LP            SYS      B           BED    UD2
140/ 052400 000000 075273 000012 000000 006514 102000 054540 *.U..;z....L...`Y
     MX            SYS      J           BED    UD2    NL 
160/ 000000 075273 000002 000000 006514 102000 071070 000000 *..;z....L...8r..
            SYS      B           BED    UD2    RK        
200/ 075273 000003 000000 006514 102000 052140 000000 075273 *;z....L...`T..;z
     SYS      C           BED    UD2    MT            SYS
220/ 000011 000000 006514 102000 015600 000000 075273 000003 *....L.......;z..
       I           BED    UD2    DP            SYS      C
240/ 000000 006514 102000 045640 000000 075273 000010 000000 *..L... K..;z....
            BED    UD2    LD            SYS      H       
260/ 006514 002000 062570 000000 073376 000035 000000 004314 *L...xe..~v....L.
     BED     YX    PIP           SAV      /           APL
300/ 002000 016130 000000 073376 000055 000000 004314 002000 *..X...~v-...L...
      YX    DUP           SAV     AE           APL     YX
320/ 015172 000000 073376 000023 000000 004314 002000 016125 *z...~v....L...U.
     DIR           SAV      S           APL     YX    DUM
340/ 062000 073376 000011 000000 004314 002000 016336 023364 *.d~v....L...^.t&
     P      SAV      I           APL     YX    DX0    FIL
360/ 015172 000002 000001 000000 002000 016306 035045 015172 *z.........F.%:z.
     DIR      B      A            YX    DXF    ILE    DIR
400/ 000002 000000 017656 001000 007347 012170 015622 000342 *........g.x...b.
       B           EB0     L2    BOO    CK     DPR     EZ
420/ 000000 006156 004000 007347 012170 015622 000161 000000 *..n...g.x...q...
            A9V    AKH    BOO    CK     DPR     B3       
440/ 006156 004000 026676 140700 015533 000160 000000 031655 *n...>-@A[.p...-3
     A9V    AKH    GL0    1      DOC     B2           HJ/
460/ 004000 026676 140700 015533 000160 000000 031655 004000 *..>-@A[.p...-3..
     AKH    GL0    1      DOC     B2           HJ/    AKH
500/ 016125 062000 073376 000335 000000 026715 004000 000000 *U..d~v]...M-....
     DUM    P      SAV     EU           GME    AKH       
520/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
540/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
560/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
600/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
620/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
640/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
660/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
700/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
720/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
740/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
760/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         


                                     - 98 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000007
000/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
020/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
040/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
060/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
100/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
120/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
140/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
160/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
200/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
220/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
240/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
260/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
300/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
320/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
340/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
360/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
400/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
420/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
440/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
460/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
500/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
520/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
540/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
560/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
600/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
620/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
640/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
660/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
700/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
720/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
740/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         
760/ 000000 000000 000000 000000 000000 000000 000000 000000 *................
                                                         


                                     - 99 -
           RT-11, A step by step                   DUMP   14-Nov-92
BLOCK NUMBER  000010
000/ 064142 062157 066551 006557 073412 070171 066157 064556 *bhodimo..wypolni
     P.B    PB1    QTI    BE9    SA4    Q93    QM9    P40
020/ 074164 006456 027012 047101 006504 070012 071145 073545 *tx....AND..perew
     SJ6    BDN    GNZ    LT3    BD6    Q7B    RLE    SDE
040/ 071545 064564 076040 067564 067040 020141 067141 066147 *esti |to na angl
     RRU    P46    S4P    Q3L    QX2    EGI    QZQ    QM1
060/ 065151 065563 065151 070440 074572 027153 005015 040456 *ijskij qzyk....A
     QAA    QG$    QAA    RD     SQR    GQC    AXM    JQF
100/ 042116 005015 072165 077157 064556 074164 073440 071440 *ND..uto~nitx w s
     J7F    AXM    RYM    TIG    P40    SJ6    SBP    RP2
120/ 067557 073564 072145 072163 064567 020151 020163 064563 *ootwetstwii s si
     Q3G    SDT    RX7    RYK    P49    EGQ    EG$    P45
140/ 072156 065541 064563 067563 027155 005015 040456 052124 *ntaksisom....ATT
     RYF    QGI    P45    Q3K    GQE    AXM    JQF    MS.
160/ 005015 066144 020161 060572 067560 064555 060556 064556 *..dlq zapominani
     AXM    QM.    EGY    OW4    Q3H    P4/    OWV    P40
200/ 020161 061157 062575 020152 067546 066562 020171 072163 *q ob}ej formy st
     EGY    O/9    PIU    EGR    Q28    QTR    EG3    RYK
220/ 067562 064553 041440 044523 066440 073157 067556 005015 *roki CSI movno..
     Q3J    P4$    J/X    K/K    QRP    R79    Q3F    AXM
240/ 072562 067553 067567 071544 073564 073557 072141 071570 *rukowodstwowatxs
     R1Z    Q3C    Q3O    RRT    SDT    SDO    RX3    RS 
260/ 020161 071146 075141 065157 020072 073442 064171 062157 *q frazoj: "wyhod
     EGY    RLF    SWI    QAG    EFJ    SBR    P.Y    PB1
300/ 067556 020152 060546 000000 010704 104346 000415 005046 *noj fa..D.f...&.
     Q3F    EGR    OWN           B3.    U6F     F/    AX8
320/ 014144 001376 020107 103405 020106 001372 010406 005726 *d.~.G ..F z...V.
     C6D     SF    EFW    UXE    EFV     SB    B.8    A50
340/ 000767 010001 060016 000207 024444 006300 103421 062707 *w....`..$)@...Ge
      LW    BVQ    ON0     CO    FWL    BAX    UXQ    PKO
360/ 030000 010401 060004 032777 010000 025530 001406 061104 *.0...`.5..X+..Db
     G$H    B.3    ONT    HYW    BVP    F7P     SN    O.6
400/ 061101 060077 025606 060067 004720 004767 177700 000445 *Ab?`.+7`P.w.@.%.
     O.3    OO9    F8V    OO1    AV2    AW1    :62     GM
420/ 010703 062703 000234 004767 003324 004417 062704 000254 *C.Ce..w.T...De,.
     B3$    PKK     C6    AW1    AC.    AQ9    PKL     DL
440/ 011601 062701 030000 014441 020403 001375 011604 017716 *..Ae.0!..!}...N.
     CD3    PKI    G$H    D 3    EKK     SE    CD6    ECV
460/ 025442 010146 010401 060004 103107 020427 001000 103504 *"+f....`G..!..D.
     F6B    BX8    B.3    ONT    USO    EK1     L2    UY.
500/ 004736 042726 167777 001411 060077 025500 060067 004612 *^.VE.o..?`@+7`..
     AWF    KF8    8O9     SQ    OO9    F62    OO1    AUB
520/ 011103 012124 162703 000002 001374 010346 004267 000056 *C.T.Ce..|.f.7...
     B65    CJD    60S      B     SD    B.F    AO1     AF
540/ 147214 152104 147130 156232 147334 155234 000000 024516 *.NDTXN.\\N.Z..N)
     3A6    38T    3 X    5K4    3C6    49D           FXN
560/ 022366 022420 022114 023650 022560 022554 023570 026056 *v$.%L$('p%l%x'.,
     E6V    E7H    E2L    FM2    E9X    E9T    FLX    GB0
600/ 026642 026700 023742 025206 026622 000000 060013 012203 *"-@-b'.*.-...`..
     GLB    GL2    FOJ    F2F    GKZ           ON$    CKK
620/ 001375 012203 001403 060703 060013 000773 060067 015002 *}.....Ca.`{.7`..
      SE    CKK     SK    OY$    ON$     L$    OO1    DFR
640/ 012602 012603 060027 000000 104347 060016 000207 010603 *.....`..g..`....
     CQZ    CQ$    ON9           U6G    ON0     CO    B2C
660/ 005046 012124 001376 020107 101004 020103 001372 010406 *&.T.~.G ..C z...
     AX8    CJD     SF    EFW    T2D    EFS     SB    B.8
700/ 000770 060016 000207 000000 000167 002652 004767 017374 *x..`....w.*.w.|.
      LX    ON0     CO            B9     6J    AW1    D8L
720/ 004767 005146 005077 021362 005077 022436 013703 000054 *w.f.?.r"?..%C.,.
     AW1    AZV    AYW    EWZ    AYW    E7V    C2C     AD
740/ 005063 006306 017777 177576 177570 042737 050000 000044 *3.F...~.x._E.P$.
     AYK    BA0    ED1    :5F    :5     KGG    L2       6
760/ 042777 000340 025136 005067 025706 005067 014636 010663 *.E`.^*7.F+7...3.
     KG9     EX    F1F    AYO    G F    AYO    DC8    B3K




                                     - 100 -
           RT-11, A step by step            File System   14-Nov-92


                              5. ФАЙЛОВАЯ СИСТЕМА



                           5.1. Все может случиться,
                                       или
                              Что нужно для работы


       - Здравствуйте,  Александр  Геннадьевич,-  уже  с  порога   поздоровался
  Алеша,- а что это сегодня так тихо и пусто?
       - Электричество отключили, вот они и не работают,- Александр Геннадьевич
  взглядом показал на машины. - Ну, мне-то всегда есть чем заняться - и  профи-
  лактика, и ремонт, а тебе, к сожалению, ничем сегодня помочь не могу.
       - А я пойду домой,- говорит Алеша,- у меня там распечатки, полученные  в
  прошлые разы, и я буду в них разбираться. Ведь для того, чтобы их понять,  не
  всегда нужна ЭВМ. Иногда нужно просто удобное кресло и спокойная обстановка.
       Еще ближайшие десяток-другой лет у программистов не  будет  времени  для
  безделья. В любой обстановке найдется дело.
       Придя домой, мы прежде всего решили подготовиться к работе. Программисты
  - те же писатели (а пока мы больше писатели, чем программисты), и им требует-
  ся найти удобный для себя распорядок и уютную окружающую обстановку.  То  что
  нельзя начинать работу, если в доме гости,- это, конечно, справедливо. И  все
  же дома настолько спокойнее, чем в любом учреждении, что и  дел  делается  во
  много раз больше. Может быть, вы предпочтете какие-нибудь другие условия.  Не
  оставляйте поисков, пока не найдете для себя действительно удобной  обстанов-
  ки, а потом поймите, каким образом ее воспроизвести всякий раз,  когда  рабо-
  таете.
       Мы с Алешей устроились на диване  и  запаслись  достаточным  количеством
  бумаги. Кроме того, нам необходимы те распечатки, которые мы получали раньше.
       - У меня есть распечатка каталога удаленных файлов,- сказал Алеша,  дос-
  тавая из стола папку с распечатками,- в одну колонку, да еще и в восьмеричной
  форме. Эту распечатку мы получали командой

    DIRECTORY/COLUMNS:1/OCTAL/PRINT/DELETED DX0:

       - Эта распечатка нам пригодится,- говорю я,- но пока отложим ее в сторо-
  ну.
       - А вот еще распечатка каталога,- говорит Алеша, разбирая  распечатки  в
  папке,- она самая полная - с указанием свободных областей и начальных блоков,
  также в восьмеричной форме и с указанием идентификатора тома. Ее мы  получали
  командой

    DIRECTORY/FULL/BLOCKS/OCTAL/COLUMNS:1/VOLUMEID/PRINT DX0:

       - Вот это уже то, что нам надо,- замечаю я,-  но  у  нас  там  были  еще
  дампы?
       - А дампов у нас много,- говорит  Алеша,  и  начинает  перечислять,  во-
  первых - это распечатка начальных блоков монитора, которую мы получали коман-
  дой

    DUMP/RAD50/END:6 SY:RT11SJ.SYS

       мы также делали распечатку драйвера DX.SYS командой


                                     - 101 -
           RT-11, A step by step            File System   14-Nov-92


    DUMP/RAD50 SY:DX.SYS

       и, наконец, распечатки первых восьми блоков системного тома, так  громко
  мы можем назвать нашу единственную дискету,- засмеялся Алеша.
       Так много распечаток, что пришлось поставить рядом еще два  стула.  Ведь
  хочется, чтобы распечатки можно было охватить одним  взглядом.  Теперь  можно
  начинать работу.






       5.2. Как устроен том?




       Мы так долго занимались глазами системы, что у нас  зарябило  в  глазах.
  Каталоги во всех видах, таблицы чисел и символов, которые  почему-то  назвали
  дампом. И для чего все это нужно? Попробуем применить все это на практике.

       - Ну, с чего же мы начнем?- спрашиваю я Алешу.
       - Наверное, нужно плясать от печки,- пошутил Алеша, внимательно рассмат-
  ривая распечатки,- я как раз и пытаюсь эту печку отыскать.  Файловая  система
  организована на томе, поэтому за основу  я  возьму  распечатку  дампа  первых
  восьми блоков тома. Остальные распечатки будут нам помогать.
       Цифры нам пока мало о чем говорят, мы будем мыть золотой песок потихонь-
  ку, то есть искать то, что нам понятно.
       - Алеша, давай по порядку, по одному блоку. Например, что можно  сказать
  о нулевом блоке?
       - Во-первых, в нулевом блоке мы видим только одну членораздельную запись
  в конце блока, которая начинается с адреса 750: -  "?BOOT-U-",  и  второй  ее
  кусочек: - "I/O ERROR".
       - Что о ней можно сказать?
       - Мне понятен только конец записи,- говорит Алеша,- ERROR означает ошиб-
  ка, I/O - типовое сокращение от слов INPUT/OUTPUT (ввод/вывод),  поэтому  это
  сообщение означает "ошибка ввода/вывода".
       - Но тогда объяснение начала записи,- подсказываю  я,-  нужно  искать  в
  сообщениях об ошибках.
       - Это я понимаю,- говорит Алеша,- также понятно, что это фатальная ошиб-
  ка, после которой система не может  завершить  работу.  Совершенно  непонятно
  слово BOOT, что в переводе с английского означает - "ботинок".
       - Тебе не понятно, что означает это жаргонное слово?- спрашиваю я.
       - И что означает,- говорит Алеша,- и особенно интересно откуда оно  взя-
  лось.
       - Ну что же. Для начала нужно узнать  значение  слова  BOOT.  Для  этого
  возьми пожалуйста "Словарь по компьютерам"  под  редакцией  Фрэнка  Гэлланда.
  Нашел?
       - Да,- говорит Алеша,- тут несколько слов, начинающихся с BOOT. Вот  то,
  что нам нужно:

  BOOT
     - (1) операция загрузки операционной системы и, возможно,  другого  сис-
       темного программного обеспечения (с магнитной ленты  или  диска).  Она
       бывает ложной для возникновения или, вернее, для востановления  систе-
       мы.

       - А также BOTTSTRAP,- переводит Алеша,- но это слово  совсем  непонятно.


                                     - 102 -
           RT-11, A step by step            File System   14-Nov-92


  Ведь дословно оно означает "ремешок от ботинка". Тут, правда, есть  разъясне-
  ние, из которого ясно, что это начальная загрузка программы.
       - Во-первых, обрати внимание, что Гэлланд различает  BOOT  -  как  общая
  загрузка операционной системы или ее  восстановление  -  и  BOOTSTRAP  -  как
  начальный ввод (first inputting) программы или операционной системы,-  говорю
  я Алеше,- ведь именно слово "BOOTSTRAP" породило весь набор понятий,  связан-
  ных с загрузкой. Ты правильно сказал, что "bootstrap" - это ремешек от  боти-
  нок. Делали раньше, а иногда и сейчас на заднике ботинка ремешок в виде  пет-
  ли, чтобы удобнее было его натягивать на ногу. А теперь  вспомни,  как  барон
  Мюнхгаузен вытащил себя из болота?
       - За волосы,- отвечает Алеша,- он взял себя за волосы и вытащил из боло-
  та. Но ведь это сказка?
       - Конечно, сказка,- говорю я,- но в каждой сказке есть доля истины. Ска-
  жи, как можно загрузить в память ЭВМ программу, когда в ней еще нет ни  одной
  программы?
       - А ведь и правда,- засмеялся Алеша,- это все равно, что поднять себя за
  волосы.
       - Или "поднять самого себя за ремешки от ботинок", как говорят  англича-
  не.
       - Теперь ясно,- говорит Алеша,- что нулевой блок содержит загрузчик  ОС.
  А во-вторых, этот блок совпадает  в  основном  с  последним  блоком  драйвера
  DX.SYS. Значит, это не просто загрузчик системы,  а  загрузчик  с  устройства
  DX:. А так как он стоит в начале тома,  то  мы  можем  предположить,  что  он
  является начальным.
       - И на этом загрузчик кончается?- спрашиваю я.
       - Нет, есть и дальше,- говорит Алеша,- но тогда нужно перескочить  через
  один блок, потому что блоки со 2-го  по  5-й  практически  не  отличаются  от
  начальных блоков монитора и в них тоже встречается слово BOOT.
       - Тогда зафиксируй,- говорю я Алеше,- то, что мы уже узнали.
       - Конечно,- Алеша взял чистый лист бумаги и написал:

     - 1. Нулевой блок системного тома содержит начальный загрузчик  системы,
       который копируется в него из последнего блока драйвера системного уст-
       ройства.

       Начиная со второго блока идут какие-то числа. Команд  мы  не  знаем,  мы
  только пытаемся выбрать из этих чисел такие, которые могут быть переведены  в
  связный набор печатных символов. Именно таким  связным  набором  (словами)  и
  заканчивается эта программа (другого мы предположить не можем). То,  что  это
  сообщения загрузчика монитора, мы уже можем сказать точно. Приведем их здесь,
  переведем на русский язык и прокомментируем.

  ?BOOT-W-Invalid or missing TT.SYS
     - неправильный или отсутствующий драйвер терминала
       Система работать будет, потому что драйвер системного терминала находит-
  ся в резидентном мониторе, но при указании терминала, как устройства в специ-
  фикации файла, будет выдаваться сообщение, что такое устройство отсутствует.

  ?BOOT-W-SWAP.SYS not found
     - файл SWAP.SYS не найден
       В таком случае для нормальной работы системы необходимо записать на сис-
  темный том файл SWAP.SYS либо командами  управления  системой  выбрать  такой
  режим, в котором этот файл не нужен. Эти команды мы узнаем позже.

  ?BOOT-W-Handler file not found
     - файл драйвера системного устройства не найден
       ОС RT-11 очень гибкая система, в ней возможно перерабатывать любые моду-
  ли. В данном случае загрузчик предупреждает, что  ввиду  отсутствия  драйвера
  системного устройства монитор должен сам уметь работать с этим устройством.


                                     - 103 -
           RT-11, A step by step            File System   14-Nov-92


  ?BOOT-W-SWAP file too small
     - файл SWAP.SYS мал
       Для нормальной работы можно  предпринять  такие  же  действия  как  и  в
  отсутствии файла SWAP.SYS. Однако если учесть, что SWAP.SYS является буфером,
  то достаточно просто увеличить его размер.

  ?BOOT-W-Error reading handler
     - ошибка чтения драйвера
       Это сообщение выдается при  попытке  прочитать  драйвер  устройства  для
  включения его в систему, если при этом происходит ошибка аппаратуры или носи-
  теля. Если системный том плохой, то сообщение может выдаваться  столько  раз,
  сколько плохих драйверов записано на системном томе. С системой работать мож-
  но, если не пользоваться устройствами, драйверы которых не были прочитаны.  В
  противном случае будет выдано сообщение  об  отсутствии  данного  устройства,
  несмотря на то что драйвер устройства (плохой)  есть  на  системном  томе.  К
  сожалению, загрузчик не печатает имя плохого драйвера, но его  можно  узнать,
  проверив системный том на плохие блоки.

  ?BOOT-W-Monitor file not found
     - файл монитора не найден
       Загрузчик должен загрузить в память монитор,  имя  которого  записано  в
  конце пятого блока. Не найдя в каталоге системного тома этот файл,  загрузчик
  не знает, что делать дальше.

  ?BOOT-W-Conflicting SYSGEN option
     - конфликт параметров генерации системы
       Это сообщение также следствие гибкости системы. При построении ОС  RT-11
  пользователь может указать некоторые параметры,  в  соответствии  с  которыми
  будут выбраны или изменены функции  системы.  Загрузчик  монитора  проверяет,
  соответствует ли набор параметров монитора  такому  же  набору  параметров  у
  драйверов. В случае различия выдается это сообщение. Заметим,  что  некоторые
  драйверы, например SL.SYS, могут  приспосабливаться  к  параметрам  генерации
  системы. Для некоторых код набора параметров можно  установить  вручную.  Так
  как у всех драйверов он хранится в ячейке с адресом 60,  то,  посмотрев  этот
  код у драйвера системного устройства, можно записать такой же в нужный  драй-
  вер.

       А в конце пятого блока прямо указано, что это загрузчик монитора  RT11SJ
  (BOTRT11SJ)  с  устройства  DX:,  и  записано  приветствие  системы  "RT-11SJ
  V05.00", которое мы видели при загрузке системы.
       Такое большое количество сообщений говорит о том, что перед нами  основ-
  ной загрузчик монитора, тем более что имя его указано.
       - А не проще было,- спрашивает Алеша,- просто загрузить монитор в память
  и передать ему управление?
       - Но по сообщениям видно,- отвечаю я,- что прежде, чем передать управле-
  ние монитору, загрузчик проверяет аппаратуру и программы для того,  чтобы  он
  смог работать.
       - Значит,- выводит Алеша,- загрузчик проверяет, какие из устройств подк-
  лючены в системе?
       - И только про драйверы этих  устройств  загрузчик  сообщает  монитору,-
  заканчиваю я,- но даже если устройство подключено, параметры генерации должны
  быть такими же, как у монитора.
       - Это нужно зафиксировать,- и Алеша, пропустив несколько строк от первой
  записи, написал:

     - 3. Со 2-го по 5-й блок идет загрузчик монитора, который кроме загрузки
       тестирует аппаратную и программую части  системы  и  выполняет  другие
       подготовительные операции, необходимые для работы монитора. Этот  заг-
       рузчик переписывается из 1 - 4-го блоков файла монитора.


                                     - 104 -
           RT-11, A step by step            File System   14-Nov-92


       Конечно, не вся информация лежала на блюдечке. Часть ее была  привнесена
  извне. Но таким образом, по крупицам можно узнать многое. И кстати, в ОС CP/M
  под генерацией системы понимается  именно  запись  монитора  и  загрузчика  в
  начальные блоки тома, а не получение новой системы с  заданными  параметрами,
  как это понимается в RT-11.

       Теперь можно приняться и за первый блок. Наш том  маленький  и  хороший,
  ошибок при работе с ним мы пока не замечали. А поэтому первый блок такой чис-
  тый - одни нули. И сначала посмотрим то, что лежит на блюдечке.
       Первое, что бросается в глаза, - это знакомые записи, которые мы  видели
  при распечатке каталога тома.
       С адреса 730 двенадцать символов в коде ASCII показывают то, что в ката-
  логе называется идентификатор тома - "RT11SJ V5.00".
       С адреса 744 двенадцать символов в коде ASCII показывают то, что в ката-
  логе названо именем владельца - "АШАРИНА И.В.".
       И с адреса 760 также двенадцать символов в коде ASCII показывают нам то,
  что мы пока нигде не видели, но можем прямо сказать,  что  это  идентификатор
  системы - название фирмы-разработчика "DEC" и название  операционной  системы
  "RT11A".
       И вроде все, что нам понятно?
       Нет, есть еще версия операционной системы в коде RADIX-50, которая  ини-
  циировала (т.е. создавала вновь) файловую систему на томе "V05".
       Остались только два непонятных числа по адресу 722 и 724.  Понятно,  что
  весь первый блок тома служебный и содержит признаки, необходимые для работы с
  томом. Подумаем, что нам может потребоваться для этого.  Первое  -  найти  на
  томе файлы, записи о которых хранятся в каталоге. А где находится каталог?  -
  Он начинается с 6-го блока. Это мы видим по дампу, и это же число записано по
  адресу 724. Его размер нам сообщила программа DIR - 1 сегмент, и это число мы
  видим по адресу 722.
       Зафиксируем и это:

     - 2. Первый блок содержит идентификаторы тома, владельца  и  системы,  а
       также справочную информацию для файловой системы.

       Какие выводы можно сделать из полученной информации? Мы видим, что сооб-
  щение об ошибке выдает загрузчик. Загрузчиков два - первичный  (начальный)  в
  нулевом блоке, и вторичный (основной) - со 2-го по  5-й  блок.  Из  сообщений
  загрузчиков мы определили, что загрузчик тестирует  систему.  Младшие  версии
  RT-11 имели меньше тестов и различных проверок. Поэтому при  загрузке  разных
  версий системы на одной и той же системе получались неодинаковые  результаты.
  Так, младшие версии могли загрузить монитор на частично неисправной аппарату-
  ре и отказаться работать на исправной.
       Например, загрузчик V3.0 и младше проверял  наличие  оперативной  памяти
  процессора только путем чтения. В результате, не мог обнаружить установленное
  ПЗУ и прекращал работу, не выдав никаких сообщений.
       До V4.0 не проверялись драйверы устройств, и они соответственно не вклю-
  чались в систему. Это должен был делать пользователь.
       Так как первичный загрузчик записывается из  последнего  блока  драйвера
  системного устройства, то при выдаче сообщения ?BOOT-U-I/O ERROR первое,  что
  необходимо сделать (при исправной аппаратуре  и  носителе),  -  это  записать
  новый драйвер системного устройства и снова скопировать загрузчик.
       Однако может испортиться и вторичный загрузчик, и так как  он  переписы-
  вается из первых блоков монитора, то второй путь восстановления загрузчика  -
  это заменить файл монитора и снова скопировать загрузчик.
       И самое обидное бывает, когда у тома,  заполненного  информацией,  вдруг
  портится первый (системный) блок. В таких случаях  программа  DIR  выдает  об
  этом сообщение и отказывается работать. Сразу предупредим, что и в этом  слу-
  чае возможно спасти файлы, хотя и действовать придется вслепую.  Но  об  этом
  потом. А сейчас разберемся с домовой книгой.


                                     - 105 -
           RT-11, A step by step            File System   14-Nov-92








       5.3. Заглянем в домовую книгу,


                                       или
                               Структура каталога


       Продолжая просматривать дамп с 6-го блока, мы увидели информацию, знако-
  мую нам по работе с программой DIR, - это имена и типы файлов, которые  нахо-
  дятся на томе. Тут и ежику понятно, что это и есть наша домовая книга - ката-
  лог тома. Правда, начальный номер блока каталога мы уже определили из систем-
  ного блока, но только благодаря этой знакомой информации.
       Первое - нам потребуется полная распечатка каталога в восьмеричной  сис-
  теме счисления в одну колонку.
       А дальше, заметив периодичность чисел в 6-ом блоке перепишем  дамп  сле-
  дующим образом.


                                     - 106 -
           RT-11, A step by step            File System   14-Nov-92


       BLOCK NUMBER  00006
       000/ 000001 000000 000001 000000 000010
              A             A             H
       012/ 102000 075131 062000 075273 000032 000000 002654
            UD2    SWA    P      SYS      Z            6L
       030/ 102000 071677 142302 075273 000111 000000 006514
            UD2    RT1    1SJ    SYS     A3           BED
       046/ 102000 100040 000000 075273 000002 000000 006514
            UD2    TT            SYS      B           BED
       064/ 102000 016300 000000 075273 000003 000000 006514
            UD2    DX            SYS      C           BED
       102/ 102000 074240 000000 075273 000015 000000 006514
            UD2    SL            SYS      M           BED
       120/ 102000 046600 000000 075273 000002 000000 006514
            UD2    LP            SYS      B           BED
       136/ 102000 052400 000000 075273 000012 000000 006514
            UD2    MX            SYS      J           BED
       154/ 102000 054540 000000 075273 000002 000000 006514
            UD2    NL            SYS      B           BED
       172/ 102000 071070 000000 075273 000003 000000 006514
            UD2    RK            SYS      C           BED
       210/ 102000 052140 000000 075273 000011 000000 006514
            UD2    MT            SYS      I           BED
       226/ 102000 015600 000000 075273 000003 000000 006514
            UD2    DP            SYS      C           BED
       244/ 102000 045640 000000 075273 000010 000000 006514
            UD2    LD            SYS      H           BED
       262/ 002000 062570 000000 073376 000035 000000 004314
             YX    PIP           SAV      /           APL
       300/ 002000 016130 000000 073376 000055 000000 004314
             YX    DUP           SAV     AE           APL
       316/ 002000 015172 000000 073376 000023 000000 004314
             YX    DIR           SAV      S           APL
       334/ 002000 016125 062000 073376 000011 000000 004314
             YX    DUM    P      SAV      I           APL
       352/ 002000 016336 023364 015172 000002 000000 000000
             YX    DX0    FIL    DIR      B
       370/ 002000 016306 035045 015172 000002 000000 017656
             YX    DXF    ILE    DIR      B           EB0
       406/ 001000 007347 012170 015622 000342 000000 006156
             L2    BOO    CK     DPR     EZ           A9V
       424/ 004000 007347 012170 015622 000161 000000 006156
            AKH    BOO    CK     DPR     B3           A9V
       442/ 004000 026676 140700 015533 000160 000000 031655
            AKH    GL0    1      DOC     B2           HJ/
       460/ 004000 026676 140700 015533 000160 000000 031655
            AKH    GL0    1      DOC     B2           HJ/
       476/ 004000 016125 062000 073376 000335 000000 026715
            AKH    DUM    P      SAV     EU           GME
       514/ 004000 000000 000000 000000 000000 000000 000000
            AKH

       Теперь, сравнив полученную таблицу с каталогом, мы можем  заметить,  что
  во всех строках полученной нами таблицы (кроме первой) записана информация  о
  файлах. Разберем строку по 16-ти разрядным словам.
       Нулевое слово содержит какой-то признак или сумму признаков. Так, записи
  с содержимым нулевого слова 102000 соответствуют файлам в каталоге с  призна-
  ком "P". В то же время все записи о файлах, которые  мы  видим  в  распечатке
  каталога, содержат в нулевом блоке число 2000. Кроме того, мы видим записи  о


                                     - 107 -
           RT-11, A step by step            File System   14-Nov-92


  файлах, которые в распечатку каталога не попали. Эти записи содержат в  нуле-
  вом слове число 1000 либо 4000. Будем надеяться, что  в  дальнейшем  выясним,
  что есть что.
       Первое, второе и третье слова записи о файле,  как  видно  невооруженным
  глазом, содержат имя и тип файла в коде RADIX-50. Но вот в следующем, четвер-
  том слове содержится какое-то число. Если мы поищем эти  числа  в  распечатке
  каталога, то увидим, что это размер файла. И наконец,  пятое  слово  содержит
  нуль, а в шестом слове опять какая-то константа. Так как в распечатке катало-
  га остался только один признак, который мы еще не связали с записью, -  дата,
  то можно предположить, что шестое слово содержит дату.
       Итак, начнем разбираться с нулевым словом. Будем отмечать различие конс-
  тант в нулевом слове и как это отражено в распечатке каталога.
       - Все записи о файлах, которые мы видим в распечатке каталога,  имеют  в
  нулевом слове константу 2000.
       - Все записи о файлах, у которых в распечатке каталога стоит символ "P",
  имеют в нулевом слове константу 102000, которую можно представить  как  сумму
  100000+2000.
       - Запись, которая в распечатке каталога обозначается словом <UNUSED>,  в
  дампе отражается как запись о файле  BOOCK.DPR  с  размером,  равным  размеру
  неиспользуемой зоны, и константой 1000 в нулевом слове.
       - Просуммировав размеры файлов, перечисленных в дампе до первой записи с
  константой 4000, мы видим, что они занимают том полностью.  Файлы,  записи  о
  которых начинаются с константы 4000, в распечатке каталога отсутствуют. Отсю-
  да можно предположить, что константа 4000 соответствует концу каталога.
       Теперь проанализируем полученные факты.  Для  удобства  работы  разделим
  нулевое слово на два байта и подпишем у каждой константы предполагаемые приз-
  наки. Получилась интересная таблица.

   001000 ==> 002 000  - Неиспользуемый
   002000 ==> 004 000  - Постоянный
   004000 ==> 010 000  - Маркер конца каталога
   100000 ==> 200 000  - Защищенный

  Как видно, в данном слове используется только один байт, и так  как  признаки
  состояния возрастают монотонно и отсутствует еще один признак, о  котором  мы
  говорили, - "ВРЕМЕННЫЙ", то очевидно признаку "ВРЕМЕННЫЙ" должен соответство-
  вать код 001 или 000400.
       Кроме того, когда мы  распечатывали  суммарную  информацию  о  каталоге,
  говорилось о том, что наш каталог состоит из одного сегмента. Отсюда следует,
  что код 010 означает маркер конца сегмента, а не каталога.
       Теперь мы можем уточнить нашу таблицу признаков состояния файла,  содер-
  жащихся в нулевом слове записи о файле в каталоге.

   000400 ==> 001 000  - Временный
   001000 ==> 002 000  - Неиспользуемый
   002000 ==> 004 000  - Постоянный
   004000 ==> 010 000  - Маркер конца сегмента
   100000 ==> 200 000  - Защищенный

       О временном файле стоит сказать особо. И здесь мы скажем "ВНИМАНИЕ!!!".

       Запись о временном файле в распечатке каталога мы можем никогда не  уви-
  деть, потому что состояние "ВРЕМЕННЫЙ" у файла  появляется  только  во  время
  работы какой-нибудь программы при проведении  операции  вывода  информации  в
  файл. Для пользователя это состояние возникает при аварийном завершении прог-
  раммы - это и сбой по питанию, сбой аппаратуры, ошибка в программе. При  этом
  для пользователя важно сохранить хотя бы ту информацию, которая  в  файл  уже
  записана. Для этого в системе есть специальная  команда  управления  системой
  CLOSE (закрыть). Команда синтаксиса не имеет, и если набрать:


                                     - 108 -
           RT-11, A step by step            File System   14-Nov-92


  +---------------
  !  .CLOSE<ВК>
  !  -
  !  .^
  !

  то система закроет все открытые файлы, т.е. изменит  признак  "ВРЕМЕННЫЙ"  на
  "ПОСТОЯННЫЙ".
       Однако если нам информация не нужна, то все  равно  необходимо  привести
  систему в устойчивое состояние. Для этого мы должны освободить открытые файлы
  еще одной командой управления системой PURGE (освободить), которая  также  не
  имеет синтаксиса и действует на все открытые файлы. Она  изменит  у  открытых
  файлов признак "ВРЕМЕННЫЙ" на "НЕИСПОЛЬЗУЕМЫЙ".

       А как же с оставшимися файлами, которые имеют признак 4000? Про них мож-
  но сказать, что система при очистке или инициализации нового каталога не сти-
  рает информацию о старых файлах, а записывает в нулевое слово первой записи о
  файле маркер конца сегмента. Об этом надо помнить, когда возникает  необходи-
  мость восстановить случайно удаленную информацию.
       В записи о файле осталось еще одно слово, значение которого нам  необхо-
  димо разгадать. Мы уже догадались, что оно  содержит  дату.  Но  хотелось  бы
  узнать, в каком коде или в каком формате она записана. Для решения этой голо-
  воломки выпишем в отдельную таблицу коды из шестого слова записи  о  файле  и
  соответствующие им даты их распечатки каталога так, как это показано ниже.

    002654  ==>  13-Jan-84
    006514  ==>  10-Mar-84
    004314  ==>  06-Feb-84
    017656  ==>  21-Jul-86
    006156  ==>  .........

       Ни в одном из известных нам кодов невозможно записать дату в одном  сло-
  ве. Единственно возможный способ состоит в том,  чтобы  каждый  элемент  даты
  закодировать отдельным числом в двоичной системе счисления и  потом  каким-то
  образом составить из этих чисел одно слово. Посмотрим, насколько это  возмож-
  но.
       В месяце может быть 31 день. Для записи кода дня необходимо  пятиразряд-
  ное двоичное число, так как из пяти двузначных индикаторов можно составить 32
  комбинации.
       Год состоит из 12 месяцев, поэтому для представления  месяца  необходимо
  четырехразрядное двоичное число.
       А как же год? У нас из 16 разрядов числа осталось только семь, из  кото-
  рых можно составить 128 комбинаций. Поэтому весьма вероятно, что закодированы
  только последние две цифры года. А год указанный - 84!!!
       Дальнейшая наша работа будет мало чем отличаться от работы  дешифроваль-
  щика. Для этого перепишем каждое число в двоичном  коде,  даты  расставим  по
  порядку, день и месяц запишем в двоичном коде и посмотрим, что из этого полу-
  читься.

           Дата     Код         Двоичный код        Месяц  День

        13-Jan-84  002654  0.000.010.110.101.100     0001  01101

        06-Feb-84  004314  0.000.100.011.001.100     0010  00110

        10-Mar-84  006514  0.000.110.101.001.100     0011  01010

        21-Jul-86  017656  0.001.111.110.101.110     0111  10101

                                     - 109 -
           RT-11, A step by step            File System   14-Nov-92


       Таким образом, получив некоторый исходный  набор  элементов,  отражающих
  известные нам или предполагаемые факты, начинаем действовать.
       Попробуем двоичное отображение месяца в первой строке подставить в  пол-
  ное двоичное отображение даты в то место, где совпадут  все  разряды  месяца,
  как это показано ниже:

       0.000.010.110.101.100
          00.01

  как видим, это единственное место. Но не будем спешить радоваться.  Для  про-
  верки проделаем такую же операцию с остальными строками. Но подставлять отоб-
  ражение месяца будем только в уже найденное место.

       0.000.010.110.101.100     Jan
          00.01

       0.000.100.011.001.100     Feb
          00.10

       0.000.110.101.001.100     Mar
          00.11

       0.001.111.110.101.110     Jul
          01.11

  Проверка показала, что разряды месяца  мы  определили  правильно.  Во  второй
  строке мы могли сделать подстановку в другое место, но в этом случае были  бы
  неправильны подстановки в других строках.

       Теперь повторим все, что мы делали с месяцем, но уже с двоичным  отобра-
  жением дня.

       0.000.010.110.101.100
               0.110.1          15 ==> 13.

       0.000.100.011.001.100
               0.011.0          06 ==> 06.

       0.000.110.101.001.100
               0.101.0          12 ==> 10.

       0.001.111.110.101.110
               1.110.1          25 ==> 21.

  Опять мы смогли выделить одноименные разряды во всех  словах,  которые  соот-
  ветствуют нашему представлению дня. Но тогда на представление  года  остается
  только пять разрядов, и, как мы видим, год закодирован следующим образом.

       Год 1984 ==> 01.100 = 14 = 12.

       Год 1986 ==> 01.110 = 16 = 14.

  Ничего похожего на какое-либо отображение года, за исключением того, что раз-
  ница между кодом года и действительным значением года одинакова и равна 1972.
  Довольно странная цифра, если забыть о том, что разработка RT-11 была  начата
  в 1972 году.
       Таким образом, мы можем свести в общую таблицу все, что  мы  узнали  про
  дату.


                                     - 110 -
           RT-11, A step by step            File System   14-Nov-92


           0.000.000.000.000.000
              ММ ММД ДДД ДГГ ГГГ
              /   \/     \/    \
              !   !!     !!    !
              !   !!     !!    +------\  разряды 0-4
              !   !!     !+-----------/  ГГГГГ = Год-1972
              !   !!     !
              !   !!     +------------\  разряды 5-9
              !   !+------------------/  день месяца
              !   !
              !   +-------------------\  разряды 10-13
              +-----------------------/  номер месяца

  И, используя полученную таблицу, можно определить дату создания файла,  кото-
  рый находится на том месте, которое в распечатке каталога показано как  неис-
  пользуемое. Итак, на этом месте находится файл.

       BOOCK.DPR   226  03-Mar-86  286

  Действительно, так выглядит запись в каталоге удаленных файлов.
       Исследование остальных файлов, которые оставили свои следы в шестом бло-
  ке, мы предоставляем читателю в качестве упражнения.






       5.4. А что же на обложке?


                                       или
                           Заголовок сегмента каталога


       Прежде чем разгадывать первую запись в  нашей  таблице,  посмотрим,  как
  можно вычислить номер блока, с которого начинается какой-нибудь файл.
       В записи о файле только один атрибут - размер файла. Но  так  как  файлы
  неразрывны - сразу после конца одного файла следует начало другого,- то адре-
  сом файла может являться сумма размеров всех предшествующих в  сегменте  фай-
  лов. Необходимо только знать номер блока, с которого начинается самый  первый
  файл, записанный в сегменте. Этот номер и записан в четвертом слове заголовка
  сегмента каталога.
       Нужно заметить, что неиспользуемая область на томе  есть  также  файл  с
  именем EMPTY.FIL, если том был только что инициализирован, или с именем файла
  пользователя, который был на этом месте.
       - А сколько записей о файлах может быть в сегменте?- интересуется Алеша.
       - Ну Алеша,- с досадой говорю я,- арифметику в школе ты уже проходил,  а
  информацию о структуре каталога мы уже положили на блюдечко. Поэтому попробуй
  подсчитать сам.
       - Сегмент каталога состоит из 512. слов,- считает Алеша,- пять из  кото-
  рых занимает заголовок сегмента каталога. Запись  о  файле  состоит  из  семи
  слов. Поэтому сегмент каталога может содержать:

               512. - 5
           N = -------- = 72. записи
                  7

  Однако маркер конца сегмента имеет такой же формат, как  и  запись  о  файле.


                                     - 111 -
           RT-11, A step by step            File System   14-Nov-92


  Кроме того, сегмент должен заканчиваться записью  о  неиспользуемой  области,
  хотя бы и с нулевым размером. Итого в одном сегменте можно описать 70 файлов.
       - А теперь, Алеша, посмотри на размер самого маленького устройства MX: -
  всего 432 свободных блока. Допустим, что у тебя файлы имеют размер один блок.
  Сколько файлов ты сможешь на него записать?
       - 432 файла,- не подумав, ответил Алеша.
       - И все записи влезут в один сегмент? Вот тебе домашнее задание  (и  для
  читателей тоже) - сколько сегментов каталога  потребуется  и  сколько  файлов
  размером в один блок можно записать на устройстве MX:.
       А теперь давай разбираться дальше. Допустим, что у нас есть  200  файлов
  по два блока, и взяли мы для каталога 3 сегмента. И записывали  файлы  подряд
  без промежутков. А потом понадобилось удалить файл размером 2 блока, записан-
  ный в первом сегменте, и вместо него записать два файла по  одному  блоку.  А
  место для записи освободилось только одно. Вот и придумали разработчики фирмы
  DEC полностью заполнять только последний сегмент в этой цепочке. А предыдущие
  сегменты заполнять только наполовину, т.е. между каждым файлом можно располо-
  жить еще один файл, например неиспользуемый. И тогда во всех сегментах, кроме
  последнего, может быть не более 36 записей о постоянных файлах.
       Таким образом, при заполнении последнего сегмента открывается следующий,
  и половина записей из предыдущего переписывается в него. Значит, для 200 фай-
  лов потребуется не три, а пять сегментов. Единственный случай, когда все сег-
  менты, имеющие записи, заполняются полностью, возникает при "сборке  мусора",
  т.е. если мы попросим систему собрать все свободные области в одну, а  запол-
  ненное файлами пространство сжать в начало тома.

       Отсюда следуют некоторые выводы.
       - Если мы хотим зарезервировать для каталога  10  сегментов,  то  должны
  сообщить об этом системе. Для этого служит нулевое слово  заголовка  сегмента
  каталога, в который записывается число зарезервированных сегментов каталога.
       - А записи о файлах у нас находятся, например, только в пяти  сегментах.
  Значит, необходимо, чтобы система не тратила время на просмотр пустых сегмен-
  тов, нужно указать, сколько сегментов открыто для записи.  Для  этого  служит
  второе слово заголовка сегмента. Однако число открытых сегментов имеет  смысл
  записывать только в первом сегменте и там же корректировать его при  открытии
  или освобождении очередного сегмента. Так это и делается.
       - А теперь представим, что в результате всякого рода  перипетий  сегмент
  номер 3 освободился, а потом открылся снова. Поэтому и записи о файлах распо-
  ложились не так, как сами записи на устройстве. Связи  между  сегментами  при
  этом можно изобразить так:


                                  +---------------------------+
                                  !                           V
    +-------+    +-------+    +-------+     +-------+     +-------+
    !сегмент!--->!сегмент!    !сегмент!<----!сегмент!     !сегмент!
    !   1   !    !   2   !    !   3   !     !   4   !     !   5   !
    +-------+    +-------+    +-------+     +-------+     +-------+
                     !                          ^
                     +--------------------------+


  И раз сегменты расположились не по порядку, то необходимо в  каждом  сегменте
  указать, какой сегмент просматривать следующим. Поэтому в первое слово  заго-
  ловка сегмента каталога записывается номер следующего сегмента.  В  последнем
  используемом сегменте первое слово содержит нуль.
       - И последнее. Пользователь - человек  привередливый  и  может  захотеть
  поместить в запись о файле какие-нибудь свои признаки, и запись о файле может
  состоять не из семи слов, а из большего  числа.  Система,  правда,  не  будет
  обрабатывать дополнительные слова, пользователь должен сам  об  этом  позабо-


                                     - 112 -
           RT-11, A step by step            File System   14-Nov-92


  титься. Но сообщить файловой системе о количестве дополнительных слов в запи-
  си необходимо. И записывается оно в третье слово. Число  дополнительных  слов
  может быть определено при инициализации каталога. Соответственно число  запи-
  сей в сегменте каталога будет меньше.
       А теперь суммируем все, что у нас получилось.
       - Нулевое слово содержит число сегментов, отведенных под каталог.  Число
  сегментов задается по умолчанию (разное для различных устройств, в зависимос-
  ти от объема тома) или по указанию пользователя при инициализации каталога. В
  нашем случае оно равно 1.
       - Первое слово содержит номер следующего сегмента  каталога.  Это  слово
  является связующим между логически смежными сегментами каталога. В  последнем
  используемом сегменте первое слово содержит нуль.
       - Второе слово содержит счетчик сегментов, имеющих записи. При  открытии
  нового сегмента счетчик корректируется только в первом сегменте. В  последую-
  щих сегментах содержимое этого слова не изменяется и равно нулю.
       - Третье слово содержит число дополнительных слов в  записи  о  файле  в
  каталоге. Может задаваться пользователем при инициализации каталога.
       - В четвертом слове содержится номер блока, с которого начинаются файлы,
  описанные в данном сегменте. В нашем случае он равен 10 (8.), и, действитель-
  но, если мы посмотрим дамп 10 блока, мы увидим какой-то двоичный файл. Исходя
  из каталога - это SWAP.SYS.






       5.5. Структура тома с произвольным доступом



       Наше расследование подошло к концу, и, чтобы лучше  запомнить,  а  также
  ввиду большой важности полученной информации  для  дальнейшей  работы  сведем
  вместе полученные факты о структуре тома с произвольным доступом.

  ЗАГОЛОВОК ТОМА
       Заголовок тома располагается в нулевом блоке и начинается с кода 000240.
  В случае отсутствия этого кода аппаратный загрузчик будет пытаться  прочитать
  этот том снова. В заголовке тома располагается первичный  загрузчик,  который
  знает где находится основной загрузчик системы и как работать со  своим  уст-
  ройством. Вся его задача сводится к загрузке основного загрузчика системы.  В
  RT-11 основной загрузчик располагается в блоках со 2-го по 5-й  включительно.
  Если том не системный и загрузка, как операция, не определена, то  в  нулевом
  блоке вместо загрузчика располагается программа вывода на терминал сообщения:
  BOOT NO VOLUME - загрузчика нет на томе. Содержимое блоков 2-го 5-й  в  таком
  случае не определено.

  ИДЕНТИФИКАТОР ТОМА
       Располагается в первом блоке и содержит: количество сегментов  каталога;
  номер блока, с которого начинается каталог; версию системы в  коде  RADIX-50,
  которая инициализировала каталог; идентификатор тома и имя владельца, введен-
  ные оператором при инициализации каталога; название фирмы-разработчика и наз-
  вание операционной системы.

  ОСНОВНОЙ ЗАГРУЗЧИК МОНИТОРА
       Располагается в блоках со 2-го по 5-й включительно и служит для первона-
  чальной или повторной загрузки операционной системы.

  КАТАЛОГ ТОМА


                                     - 113 -
           RT-11, A step by step            File System   14-Nov-92


       Располагается с 6го блока тома. Сегмент имеет размер 2 блока. Число сег-
  ментов, отведенных под каталог, указано в нулевом слове каждого сегмента.


       - Андрей Германович,- спрашивает Алеша,- мы только не сказали, на  каком
  устройстве организовали том, структуру которого мы так долго разбирали.
       - Молодец, Алеша, что ты это заметил. Все разговоры о расположении ката-
  лога тома и файлов на томе нам удалось провести, не упоминая о том, на  каком
  устройстве находится том. Таким образом, мы в общем случае можем сказать, что
  том с точки зрения файловой системы  RT-11  есть  некоторая  область  памяти,
  которая имеет стандартный для системы заголовок тома и каталог.
       - Значит,- говорит Алеша,- том можно организовать на любой памяти.
       - Да,- отвечаю я,- вот, например, если мы возьмем файл на  устройстве  с
  произвольным доступом и запишем каким-нибудь образом в его  начало  заголовок
  тома и каталог, то, наверное, можно написать программу, которая  будет  рабо-
  тать с нашим файлом как с томом. И в третьей версии RT-11 появились  програм-
  мы, позволяющие создавать такие файлы-тома и работать с ними. Появились драй-
  веры UX, UY, UZ, которые работали с файлами различного размера - 280., 560. и
  1100. соответственно. Естественно, что если мы создали устройство UZ:  разме-
  ром 1100. блоков, то можем на нем создать файл размером 560. блоков  и  объя-
  вить его устройством UY:, после чего работать с ним,  как  с  самостоятельным
  устройством. Внутри устройства UY: мы можем, как в  матрешке,  также  создать
  устройство UX:. Как все устройства в RT-11, рассматриваемые  нами  логические
  устройства-файлы могут иметь номер от 0 до 7.
       Но работать с фиксированными размерами таких файлов  не  всегда  удобно.
  Поэтому в версии RT-11 V4.0 для устройств UX:, UY:, UZ: размеры файлов  можно
  было определять любые.
       И наконец, в версии RT-11 V5.0 поиски истины достигли своего логического
  конца. Драйверы UX, UY, UZ, а также программы, работающие с этими устройства-
  ми, были исключены. Функции работы с логическими дисками  (LOGICAL  DISK  ==>
  LD:), как они теперь были названы, - инициализация каталога, связывание имени
  файла с именем устройства и его номером, были внесены в программу DUP, а  для
  работы с файлом в систему был включен драйвер LD.SYS.
       Таким образом, у нас есть теперь устройства LD: с номерами от  0  до  7,
  которые можно вкладывать друг в друга,  как  матрешку.  Это  оказалось  очень
  удобным. Дополнительные расходы  памяти  на  организацию  каталога  окупаются
  более быстрым обращением к нужному файлу, так как каталог теперь  может  быть
  короче.
       На рисунке это образно можно изобразить так.

                +--------------------+
                !X!P1.MAC!P2.MAC!    !
                +--------------------+
      +------------------------------+---------------------------+
      !X!PRG.MAC!    MACRO.DSK       !X!PG.MAC!PG.PAS!PG.TXT!    !
      +------------------------------+---------------------------+
  +--------------------------------------------------------------+
  !RKX!     WORKIN.DSK               !     SOURCE.DSK            !
  +--------------------------------------------------------------+

       Здесь символом !X! условно обозначен каталог. И  тогда  про  данный  том
  можно сказать следующее:
       - Том находится на  устройстве  RK:  и  содержит  два  больших  файла  -
  WORKIN.DSK и SOURCE.DSK.
       - Файл SOURCE.DSK в  свою  очередь  содержит  каталог  и  файлы  PG.MAC,
  PG.PAS, PG.TXT.
       - Файл WORKIN.DSK также содержит каталог и файлы PRG.MAC и MACRO.DSK.  А
  файл MACRO.DSK в свою очередь имеет каталог и файлы P1.MAC и P2.MAC.
       - Следовательно, для того, чтобы добраться до файла  P2.MAC,  необходимо


                                     - 114 -
           RT-11, A step by step            File System   14-Nov-92


  установить в системе, например, следующие соотношения.

           LD0: ::== RK:WORKIN.DSK

           LD1: ::== LD0:MACRO.DSK

       После этого можно сказать (а значит, и  работать  с  файлом),  что  файл
  P2.MAC находится на устройстве LD1:.

       Таким образом, каждый файл может быть связан или, как говорят, смонтиро-
  ван на устройстве LD: с любым номером. Мы получили возможность проводить опе-
  рации с группой файлов, считая их как один. Это особенно важно при  работе  с
  магнитной лентой и архивами.

       - Андрей Германович,- говорит Алеша,- мы  говорили,  что  в  СОТКЕ  есть
  дополнительная память у процессора. Можем ли мы в ней  организовать  подобное
  устройство?
       - А почему бы и нет?- отвечаю я.
       И в RT-11 V5.0 появляется устройство VM: (Virtual Memory  -  виртуальная
  память) и соответствующий драйвер. Физически - это та же быстрая память  про-
  цессора, и если выключить питание, то информация пропадает.  Но  логически  -
  это устройство с произвольным доступом. Так как память у процессора одна,  то
  номер устройства VM: игнорируется. Еще одно отличие от устройства LD: состоит
  в том, что устройство VM: может быть системным, т.е. в заголовок  тома  можно
  записать загрузчик монитора и загрузить систему с устройства  VM:.  Что  этим
  достигается? Чрезвычайно высокая скорость работы!
       Если дополнительной памяти мало, как, например, у СОТКИ,  то  устройство
  VM: используется в основном как буферное для  различным  программ.  Однако  у
  таких    ЭВМ,    как    СМ-1420,    "Электроника-60.1",     "Электроника-79",
  "Электроника-85", ДВК-3 и ДВК-4, объем памяти может достигать до 4М  байт,  и
  тогда на устройство VM: можно перенести всю операционную систему.






       5.6. Как лиса сыр делила,


                                       или
                         Дисциплина распределения памяти


       Тома, тома. Они могут быть большими и маленькими, содержать два файла  и
  сотни файлов. И для работы всегда нужна свободная область на томе, куда будет
  записана информация очередного файла. А если свободных областей много  и  все
  они различного размера, в которую из них система определит файл? Это  обстоя-
  тельство нас может беспокоить в двух случаях: хватит ли места для  очередного
  файла и, что более важно, где искать информацию, если произошла  какая-нибудь
  авария.
       Начнем с самого простого случая - мы знаем или можем предположить, како-
  го размера будет выходной файл. Это бывает редко, но все же, как бы поступили
  мы, экономя память для дальнейших работ. Очевидно выбрали  бы  область,  наи-
  меньшую из тех, в которые влезет наш будущий файл. Именно  так  и  принято  в
  RT-11. И когда мы знаем, какого размера будет выходной файл, или нам  необхо-
  димо по каким-либо причинам, чтобы запись о файле указывала  на  определенной
  место, нужно сообщить системе этот размер, например, ключем /ALLOCATE.
       Более сложный случай - когда мы (и система тем более) не  знаем  размера


                                     - 115 -
           RT-11, A step by step            File System   14-Nov-92


  выходного файла. Необходимо также учесть,  что  в  общем  случае  могут  быть
  одновременно открыты три (иногда и более) выходных файла.  А  так  как  файлы
  открываются по очереди - мы должны учесть и это.
       Первое, что приходит в голову, - выбирать всегда самую большую  область.
  С одной стороны - надежно. Если файл можно записать на том, то он всегда вле-
  зет. Но если мы захотим открыть два файла, причем второй будет немного больше
  первого? В таком случае - второй файл может и  не  влезть,  хотя  его  размер
  меньше самой большой свободной области.
       Будем благоразумны и позаботимся о завтрашнем дне.  Будем  всегда  брать
  второй по величине файл. Но при этом мы попадем в  другую  крайность.  У  нас
  могут не влезть оба файла в крошечные свободные области при наличии  огромной
  самой большой свободной области, которая никогда не будет использована.
       Разработчики RT-11 приняли остроумное  решение.  Не  рассматривая  самые
  маленькие свободные области, они делают выбор из самой большой  и  второй  по
  размеру свободной области. Эта дисциплина распределения памяти (или алгоритм)
  преследует простую цель - обеспечить  двум  последовательно  открытым  файлам
  примерно одинаковые условия. Так как вариантов у нас немного, попробуем  сами
  найти этот алгоритм.
       Вариант 1. Первая область много больше второй.  Как  можно  поступить  в
  этом случае? Очевидно разделить ее пополам и отдать первую  половину  первому
  файлу.
       Вариант 2. Первая по величине область примерно равна  второй.  Бывает  и
  такое. Тогда первому файлу и отдадим первую по величине область, а второму  -
  вторую.
       - Но, Андрей Германович,- возражает Алеша,- мы должны оперировать точны-
  ми понятиями. Что означает "примерно равны"? Где критерий "примерно"?
       А критерий этого "примерно",- отвечаю я,- заложен в нашей цели.
       Разделим первую по величине область пополам и будем сравнивать эту поло-
  вину со второй по величине областью. Если вторая по величине  область  больше
  половины наибольшей, то отдадим ее первому файлу. Если меньше, то первый файл
  получит половину наибольшей области. В любом случае для двух файлов разница в
  размерах не будет превышать половины самой большой свободной зоны.
       Все сказанное можно продемонстрировать на рисунках

           /+-------+-\
          ! I       I  \
          ! I       I   \
          ! I       I    \.. первый файл
          ! I  300  I    /
          ! I       I   /
          ! I       I  /
         /  +-------+--
     600 \  I       I  \
          ! I  150  I   \.. второй файл
          ! I       I   /
          ! +-------+--
          ! I       I
          ! I  150  I                         +-------+
          ! I       I                         I  100  I
           \+-------+                         +-------+
          П Е Р В А Я                        В Т О Р А Я
        свободная зона                      свободная зона


                                     - 116 -
           RT-11, A step by step            File System   14-Nov-92




            /+-------+--
           ! I       I  \
           ! I       I   \
           ! I       I    \
           ! I  300  I     \.. первый файл
           ! I       I     /
           ! I       I    /
           ! I       I   /
      600 /  +-------+---
          \  I       I
           ! I       I
           ! I       I
           ! I  300  I                        +-------+\
           ! I       I                        I       I \
           ! I       I                        I  200  I  \. второй
           ! I       I                        I       I /   файл
            \+-------+                        +-------+/

            П Е Р В А Я                      В Т О Р А Я
           свободная зона                    свободная  зона



            /+-------+--
           ! I       I  \
           ! I       I   \
           ! I       I    \
           ! I  300  I     \__ второй файл
           ! I       I     /
           ! I       I    /
           ! I       I   /                    +-------+\
      600 /  +-------+---                     I       I !
          \  I       I                        I       I !
           ! I       I                        I       I !
           ! I       I                        I  320  I  \ первый
           ! I  300  I                        I       I  / файл
           ! I       I                        I       I !
           ! I       I                        I       I !
           ! I       I                        I       I !
            \+-------+                        +-------+/

            П Е Р В А Я                      В Т О Р А Я
           свободная зона                    свободная  зона

       Однако, где в таком случае искать информацию (в какой половине) и  каким
  образом. Очень просто. В случае какой-нибудь аварии, когда программа не успе-
  ла установить признак "ПОСТОЯННЫЙ" выходным файлам, программа  DIR  на  месте
  разделенной свободной области покажет две одинаковые по размеру (или отличаю-
  щиеся на один блок) и следующие друг за другом. В первой из  них  (считая  по
  порядку от начала тома) и будет  находиться  информация.  Это  следует  и  из
  рисунков, приведенных выше.
       При открытии файла прикладная программа дала ему имя и тип. Если вывести
  на дисплей каталог удаленных файлов, то мы увидим запись о файле с этим  име-
  нем, и, соответственно, на его месте следует искать информацию.
       Осталось только восстановить запись в каталоге.


                                     - 117 -
           RT-11, A step by step            File System   14-Nov-92



       5.7. Для чего это нужно,


                                       или
                       Восстановление доступа к информации


       Случай поиска информации, рассмотренный при определении дисциплины расп-
  ределения памяти, позволяет восстановить доступ к информации, используя  дан-
  ные в каталоге тома. А как быть, если испорчен каталог  тома  и  этих  данных
  нет? Как узнать, где файл начинается и где кончается. А также какая  информа-
  ция находится в файле.
       Вот здесь нам и пригодится программа DUMP.
       Начнем с того, что разделим информацию - что относится к одному файлу, а
  что к другому. А для этого нужно примерно определить  назначение  файла,  тип
  информации в нем и по ней уже определять границы файла. Посмотрим на те  фай-
  лы, назначение которых нам известно. Причем нас будет  в  основном  интересо-
  вать, как выглядит дамп начала и конца файла. Дамп  любого  файла  отличается
  своим характерным ритмом в числах, отображающих информацию. По изменению это-
  го ритма мы и будем определять начало и конец файла.
       Файл DXFILE.DIR мы создали сами с помощью программы DIR и говорили,  что
  он текстовой. И в дампе этого файла  мы  действительно  видим,  что  двоичные
  коды, преобразованные в символы ASCII, составляют текст, который нам  показы-
  вала программа DIR. При этом текст начинается с начала нулевого блока  файла.
  Последний же блок частично заполнен текстом,  а  оставшаяся  часть  заполнена
  нулями. Таким образом, если несколько текстовых файлов  расположены  друг  за
  другом, то граница между ними легко различается по  нулевым  байтам  в  конце
  последнего блока предшествующего файла и осмысленным текстом с начала нулево-
  го блока последующего файла. Остается только занести в каталог запись об этом
  файле.
       Но у нас имеются не только текстовые файлы. Например, как выглядят прог-
  раммы в файлах, имеющих тип .SAV. Допустим, как выглядит дамп программы DUMP?
  Если вы его не получили сами, то мы его приведем в приложении 3.
       Мы должны сразу отметить, что программа DUMP.SAV начинается  с  нулей  и
  только третья строчка (в нашем дампе) с  адреса  000040  заполнена  какими-то
  числами. Часть чисел имеют значение только для системы и программистов,  поэ-
  тому мы их рассматривать не будем. Нас интересуют два числа  -  адрес  начала
  программы и адрес ее конца.
       Начало программы мы уже видели - это блок, начавшийся с нулей и с харак-
  терно заполненными 3 и 16 строчками.
       А конец программы должен быть заведомо дальше верхнего адреса программы,
  который искать нужно в ячейке по адресу 000050. В нашем случае  это  значение
  равно 7754 (восьмеричное). И размер файла при этом можно определить, округлив
  это число до ближайшего большего числа  кратного  1000  и  разделив  на  1000
  (восьмеричное).
       Таким образом, для восстановления записи о файле в каталоге имеется  вся
  информация - начальный блок и размер файла.
       Попробуем убедиться в этом и посмотрим таким же образом  дамп  программы
  DUP.SAV. И все вроде бы хорошо - начальный блок нашли  правильно  и  числа  в
  общем-то похожи. Но вычисленный размер файла оказался несколько короче. В чем
  дело?
       Будем искать отличия в нулевом блоке от такой же информации в  программе
  DUMP. Вроде бы все похоже, но чисел больше.  Например,  в  ячейке  44  вместо


                                     - 118 -
           RT-11, A step by step            File System   14-Nov-92


  000000 записано 021000 (или в  других  подобных  программах  001000).  Какой-
  нибудь признак? Да! Именно он (001000) говорит о том, что размер файла  боль-
  ше, чем размер ОЗУ, занимаемый программой.
       Такие программы называются оверлейными, или программами с  перекрытиями.
  Идея состоит в том, что совсем не обязательно хранить в  ОЗУ  всю  программу.
  Можно загрузить только основную часть - корневой сегмент, а  фрагменты  прог-
  раммы, реализующие отдельные функции - оверлейные сегменты,  -  загружать  на
  одно и то же место в памяти по мере необходимости. Изобразим на рисунке,  как
  выглядит файл программы и программа, загруженная в память процессора.


                                     - 119 -
           RT-11, A step by step            File System   14-Nov-92


      /""""""""""""""""""""""""""""""""""""""""""""""""""""/
     /                Ф А Й Л Ы    н а   н о с и т е л е  /
    /             /"""""""""""""""""""""""""""""""""""""""
   /             /
  /             /
  I""""""""""""I
  I оверлейный I
  I сегмент  3 I
  I............I
  I""""""""""""I
  I            I
  I оверлейный I
  I сегмент  2 I
  I            I
  I............I     ' ' ' ' ' ' ''!""""""""""""!' ' ' ' ' ' ''
  I""""""""""""I     I""""""""""""!!            !'            '
  I            I     I            !!            !!""""""""""""I
  I оверлейный I     I оверлейный !! оверлейный !! оверлейный I
  I сегмент  1 I     I сегмент  1 !! сегмент  2 !! сегмент  3 I
  I............I     I............!!............!!............I
  I""""""""""""I     I""""""""""""I
  I            I     I            I
  I  корневой  I     I  корневой  I
  I  сегмент   I ==> I  сегмент   I
  I            I     I            I
  I------------I     I------------I     П Р О Г Р А М М А
  I   BLOCK 0  I     I   BLOCK 0  I     в памяти процессора
  +------------+     +------------+

       Для того чтобы система знала, каким образом выделять память для програм-
  мы, и предназначены те дополнительные числа в нулевом блоке.
       Размер программы, как и раньше, записан в 000050 ячейке, как  и  раньше,
  он определяет размер оперативной памяти  процессора  для  программы  и  равен
  соответственно сумме размеров корневого сегмента и самого большого оверлейно-
  го сегмента.
       Но системе для работы необходима более полная информация:
       - Адрес памяти, куда каждый оверлейный сегмент должен загружаться.
       - Номер блока в файле, с которого начинается каждый оверлейный сегмент.
       - Сколько слов необходимо прочитать из файла, чтобы весь оверлейный сег-
  мент оказался в памяти?
       Понятно, что при большом количестве оверлейный сегментов эту  информацию
  удобнее хранить в виде таблицы, адрес которой указан в  ячейке  000064.  Этот
  адрес указывает, как правило, в область первого блока, к которому стоит  пов-
  нимательней приглядеться.
       Если наша программа действительно оверлейная, имеет тип .SAV и  предназ-
  начена для работы в SJ-мониторе, то в ячейке 001000  содержится  код  060502,
  что в коде RADIX-50 отображается, как "OVR" = OVERLY.
       Во-вторых, как мы уже сказали, по адресу, указанному  в  ячейке  000064,
  находится таблица параметров оверлейных сегментов. Для нашего  случая  (прог-
  рамма DUP.SAV V5.1) этот адрес равен 001106. Набор чисел в этой таблице также
  может быть узнан по характерному ритму. Первое слово указывает на адрес в ОЗУ
  для загрузки оверлейного сегмента. Второе - указывает на номер блока в файле,
  с которого начинается оверлейный сегмент, и третье слово - счетчик слов, т.е.
  размер оверлейного сегмента в словах. Учитывая этот ритм, перепишем  таблицу,
  как показано ниже.


                                     - 120 -
           RT-11, A step by step            File System   14-Nov-92


       001106/  010560 000011 002354
       001114/  010560 000016 001565
       001122/  010560 000022 001164
       001130/  010560 000025 002144
       001136/  010560 000032 001617
       001144/  010560 000036 002430
       001152/  010560 000044 001355
       001160/  010560 000047 002420

       Но как же найти конец этой таблицы? Конечно же, по нарушению ритма. Дело
  в том, что следом идет другая таблица, которой мы до поры  до  времени  зани-
  маться не будем. И эта таблица имеет другой, так  же  явно  выраженный  ритм:
  004357, 001002, 000###, 0#####.
       Таким образом, по параметрам последнего оверлейного сегмента можем опре-
  делить размер файла (а начало мы его уже нашли).  В  нашем  случае  начальный
  номер блока последнего оверлейного сегмента равен 47, его размер  равен  2420
  слов или 5040 байтов. И так как он занимает неполные 6 блоков, то размер фай-
  ла равен:

       47 + 6 = 55 блоков,

  а распечатка каталога показывает, что мы правы.
       - И других видов программ нет?- спрашивает Алеша.
       - Конечно, есть,- отвечаю я,- но в других видах программ ее тип уже ука-
  зан в нулевом блоке в коде RADIX-50.
       Например, оверлейные сегменты можно хранить не на носителе, а в дополни-
  тельной памяти процессора. Такие программы называются виртуальными  и  уже  в
  нулевой ячейке содержат признак "VIR" (RADIX-50 = 105372). А в остальном  все
  так же, как с обычной оверлейной программой.
       Но есть программы, которые можно загружать в любые адреса памяти.  Такие
  программы имеют тип .REL (RELocation - перемещать). Они могут быть как  обыч-
  ными, так и оверлейными. Отличаются они тем, что имеют  таблицу,  по  которой
  система сама исправляет программы в памяти перед их выполнением. Таким  обра-
  зом, вычислив обычным образом размер файла, мы должны еще найти конец таблицы
  перемещений. Найти его просто - ни один из кодов в таблице не может имет зна-
  чение -2 или 177776. Именно этот код выбран в качестве признака конца  табли-
  цы. Разность между номером следующего блока и номером блока начала файла даст
  нам размер файла в блоках. Осталось внести запись в каталог.
       Однако и в этом случае в нулевом блоке  есть  необходимый  нам  признак.
  Если распечатать дамп нулевого блока, отображающий коды RADIX-50, то в ячейке
  000060 мы увидим слово "REL". А в следующем слове  номер  блока,  с  которого
  начинается таблица перемещений.






       5.8. А если быть последовательными,


                                       или
                            Файлы на магнитной ленте


       Все, что мы рассматривали до сих пор, -  это  были  устройства  файловой
  структуры с произвольным доступом. Но есть еще группа устройств, при работе с
  котором неэффективно писать или читать информацию из произвольных мест  носи-
  теля. Хотя бы потому, что может быть очень большое время поиска этого  места.


                                     - 121 -
           RT-11, A step by step            File System   14-Nov-92


  В основном это накопители информации на магнитной ленте.
       Они входят в группу устройств файловой структуры лишь потому, что  опре-
  деление имени и типа файла как метки,  по  которой  его  можно  найти,  имеет
  смысл. В остальном же файловая структура магнитных лент весьма своеобразна  и
  отлична от принятой в RT-11 для дисков.
       Наиболее  распространенный  носитель  -  катушечная  магнитная  лента  -
  используется на различных магнитофонах и с различной плотностью  записи.  Для
  работы с ними в RT-11 используется файловая структура, определенная  в  стан-
  дарте ANSI X3.27 уровень 1 (ANSI - American National  Standards  Institute  -
  Американский Национальный Институт Стандартов). Главное отличие  от  файловой
  структуры дисков - отсутствие каталога как такового. Вместо него используется
  соответствующие метки файлов, в которых записана информация о файле, а  также
  метка тома, содержащая (подобно первому блоку на диске) информацию о томе.
       То, о чем мы так долго говорили - где файл начинается и где кончается, -
  в данном случае описывается прямо - с помощью метки  начала  файла  (HDR1)  и
  метки конца файла (EOF1). А чтобы данные нельзя было спутать с  метками,  они
  заключаются как бы в скобки специальными  кодами,  которые  принято  называть
  ленточными маркерами (TAPE MARK) и которые мы будем условно обозначать  звез-
  дочкой (*). Таким образом, структуру файла на магнитной ленте  условно  можно
  изобразить так:

  HDR1 * ДАННЫЕ * EOF1 *

  как видно - после метки конца файла также записывается ленточный маркер.
       Однако мы упомянули о метке начала тома (VOL1) и поэтому покажем  полную
  структуру ленты с одним файлом

  VOL1 HDR1 * ДАННЫЕ * EOF1 * * *

  и с двумя файлами

  VOL1 HDR1 * ДАННЫЕ * EOF1 * HDR1 * ДАННЫЕ * EOF1 * * *

  Нетрудно заметить, что метка конца файла сопровождается ленточным маркером, а
  также то, что конец ленты определяется по дополнительным двум  идущим  подряд
  ленточным маркерам. Здесь же следует отметить, что такой признак  конца  тома
  (EOF1 и три ленточных маркера) всегда записывается при закрытии КАЖДОГО  фай-
  ла. А отсюда можно сделать вывод - любой записанный на магнитную  ленту  файл
  является последним! Это очень важно понять. Файлы могут оказаться недоступны-
  ми только потому, что кто-то записал очередной файл в середину ленты.
       И еще один момент необходимо отметить. При перемотке и поиске информации
  на магнитной ленте основным разделяющим признаком является ленточный  маркер,
  а дополнительным - метки начала и конца файла. Вследствие этого мы  не  можем
  перемотать ленту назад на один блок (управляя из KMON), несмотря на  то,  что
  данные записаны поблочно. Можно вернуться только на одну (две,  три  и  т.д.)
  позиции, занимаемые файлами, а затем, перемещая ленту в  прямом  направлении,
  по метке начала файла найти необходимый файл.
       Каталог магнитной ленты составляется путем чтения  информации  из  меток
  VOL1, HDR1, EOF1. Вместо начального номера блока в листинг выводится последо-
  вательный номер файла, называемый позицией. Размер файла  определяется  путем
  подсчета количества блоков данных, которое затем проверяется по данным в мет-
  ке конца файла. Таким образом, лента, не содержащая никаких файлов после ини-
  циализации, имеет следующий формат:

  VOL1 HDR1 * * EOF1 * * *

  и так как программы ОС, реализующие отдельные функции, должны  находиться  на
  устройстве с произвольным доступом, то мы пока не будем говорить о загрузке с
  магнитной ленты, хотя такая тоже  возможна,  а  сразу  перейдем  к  описаниям


                                     - 122 -
           RT-11, A step by step            File System   14-Nov-92


  меток.
       Каждая метка занимает 80. байт, как одна перфокарта, хотя на  ленте  для
  нее отводится один 512.- байтовый физический блок. И так как  вся  информация
  указана в коде ASCII, то ее удобно читать с помощью программы DUMP.
       В ниже приведенных таблицах использованы следующие стандартные обозначе-
  ния:

     CP:             - позиция символа в метке
     FIELD NAME:     - указатель имени поля
     LENGTH:         - длина поля в байтах
     CONTENT:        - содержание поля

  VOlume header Label (VOL1) - метка начала тома

  CP... ...FIELD NAME...... LENGTH CONTENTS (Содержание).............
  1 - 3 идентификатор метки    3   VOL
      4 номер метки            1   1
   5-10 идентификатор тома     6   Метка тома. Если вы не указали
                                   идентификатор тома во время
                                   инициализации, то по умолчанию
                                   "RT-11A"
     11 Связка                 1   <ПРОБЕЛ>
  12-37 Зарезервировано       26   <ПРОБЕЛЫ>
  38-50 идентификатор         13   CP38 = D \ это значения для лент
        владельца                  CP39 = % ! записанных фирмой DEC
                                   CP40 = B / для PDP-11
                                   CP41-50   имя владельца максимум
                                             10 символов.
                                             По умолчанию <ПРОБЕЛЫ>
     51 Стандарт версии DEC    1   1
  52-79 зарезервировано       28   <ПРОБЕЛЫ>
     80 Стандартная версия     1   3
        метки

  ------------------------------------------------------------------
  file HeaDeR label (HDR1) - метка начала файла
  1 - 3 Идентификатор метки    3   HDR
      4 Номер метки            1   1
   5-21 Идентификатор файла   17   6 символов ASCII имени файла,
                                   точка, 3 символа типа файла.
                                   (вы можете дополнить символом
                                   <ПРОБЕЛ> имя файла до 6 символов
  22-27 Идентификатор          6   RT11A<SPACE>
        установки файла
  28-31 Номер секции файла     4   0001
  32-35 Последовательный       4   первый файл на ленте имеет 0001
        номер файла                значение увеличивается на 1 для
                                   каждого последующего файла.
                                   В только что инициализированной
                                   ленте это значение равно 0000.
  36-39 Номер генерации        4   0001
  40-41 Версия генерации       2   00
  42-47 Дата создания          6   <ПРОБЕЛ> и следующие за ним
                                   последние две цифры года, умно-
                                   женный на 1000 плюс номер дня
                                   в ASCII; <ПРОБЕЛ> и следующие за
                                   ним 00000, если нет даты. Для
                                   примера, 2/1/75 запоминается как
                                   <ПРОБЕЛ>75032.


                                     - 123 -
           RT-11, A step by step            File System   14-Nov-92


  48-53 Срок хранения          6   <ПРОБЕЛ> и 00000 указывают на
                                   истекший срок хранения файла.
     54 Доступность            1   <ПРОБЕЛ>
  55-60 Счетчик блоков         6   000000
  61-73 Код системы           13   DECRT11A<SPACE>
  74-80 Зарезервировано        7   <ПРОБЕЛ>

  ------------------------------------------------------------------
  first End Of File label (EOF1) Метка конца файла
  полностью повторяет метку HDR1 со следующими исключениями:
    1-3 Идентификатор метки    3   EOF
  55-60 Счетчик блоков         6   Номер последнего блока данных,
                                   начиная от метки HDR1.


       Так как данный стандарт определен  для  любых  операционных  систем,  то
  естественно в метках есть поля, которые RT-11 не  использует,  например  срок
  хранения файла. Использование кода ASCII для меток, а также то, что они огра-
  ничивают файл с обеих сторон, позволяет определить характеристики файла, даже
  если предыдущие файлы испортились и программа DIR не может собрать их в ката-
  лог. Однако здесь мы не можем вносить запись в каталог ввиду отсутствия тако-
  вого. Но мы можем скопировать файл, если знаем его номер (позицию) на ленте.
       Кроме того, необходимо из полученной информации сделать следующие  выво-
  ды:
       - На одной ленте может быть несколько файлов с одним именем и типом. Это
  может привести к некоторым затруднениям при  копировании,  если  используется
  имя файла. В этом случае в качестве указателя лучше использовать его позицию.
       - Эффективность использования логических дисков при записи на ленту мож-
  но достаточно точно рассчитать. Размер каталога - 8 блоков, а каждый файл  на
  ленте требует дополнительно по два блока для меток (HDR1 и EOF1). Таким обра-
  зом, если мы хотим записать на ленту более 5 файлов, то лучше организовать из
  них логический диск и записывать его  одним  файлом.  Дополнительные  расходы
  памяти на ленте для каталога окупаются отсутствием лишних меток начала и кон-
  ца файла.

       Ну вот. Теперь по дампу носителя ты сможешь отделить один файл от друго-
  го и в некоторых случаях определить, для чего он предназначен. Для восстанов-
  ления информации тебе нужны только средства для занесения в каталог записи об
  этих файлах. А о них мы поговорим в следующие разы.



                                     - 124 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


                     6. ФИЗИЧЕСКИЕ ОСНОВЫ ЗАПИСИ ИНФОРМАЦИИ



                      6.1. Для чего нужно форматирование




       - Здравствуйте, Александр Геннадьевич,- Алеша как  всегда  в  выделенное
  ему время пришел в машинный зал,- сегодня нам повезло - электричество есть  и
  можно поработать.
       - Добрый день, Алеша,- Александр Геннадьевич  уже  встречает  Алешу  как
  своего постоянного сотрудника,- второй ДВК сегодня на ремонте, поэтому  зани-
  май пятый, тот, что стоит в углу. Там и работать спокойней.
       - Спасибо,- поблагодарил Алеша,- включил ДВК, и скоро на экране зажглась
  надпись:

  +---------------
  !  ?BOOT-U-I/O ERROR
  !  -----------------
  !

  - Ошибка ввода/вывода,- с грустью перевел Алеша,- мы эту надпись обнаружили в
  прошлый раз в нулевом блоке при изучении загрузчика.
       - Ну и что нужно делать?
       - Я не знаю,- говорит Алеша,- попробуем еще раз.
       Но еще несколько раз появлялась эта надпись.
       - Я не знаю, почему  вообще  могут  появляться  такие  ошибки,-  говорит
  Алеша,- а поэтому не знаю, что можно сделать. Александр Геннадьевич,-  Алеша,
  совершенно расстроенный, пошел к  начальнику  машинного  зала,-  если  можно,
  помогите, пожалуйста.
       - Что случилось, Алеша?- Александр Геннадьевич сразу подошел к нам.
       - Система не загружается,- сказал Алеша и показал на экран.
       - Ну и что же,- сказал Александр Геннадьевич,- не надо расстраиваться, а
  лучше исследуем ситуацию.
       Во-первых, можно сказать, что электронная часть накопителя в основном  в
  порядке - ведь нулевой блок носителя прочитан, иначе бы  мы  не  увидели  это
  сообщение.
       Теперь попробуем загрузить систему с DX1: и для этого в ответ на пригла-
  шение наберем D1.

  +---------------
  !  @D1
  !

  Система немного пощелкала накопителем и на экране появилась надпись:

  +---------------
  !  ?BOOT-W-Error reading handler
  !  -----------------------------
  !  ?BOOT-W-Error reading handler
  !  -----------------------------
  !

  - Это уже немного лучше,- сказал Александр Геннадьевич,- он уже  смог  прочи-


                                     - 125 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  тать не только начальный загрузчик, но и основной, а также  файл  SWAP.SYS  и
  монитор. Отсюда можно сделать вывод, что электронная часть в полном  порядке,
  а все проблемы связаны с разметкой дискеты.






       6.2. Форматы носителей информации




       - Ну что же, Алеша,- успокаивающе сказал Александр Геннадьевич,-  навер-
  ное, придется мне рассказать тебе про все это железо, и, к  счастью,  у  меня
  есть сегодня для этого время. Во-первых, принеси пару отверток, чтобы  откру-
  тить вот эти два винта у ГМД-7012,- сказал Александр Геннадьевич Алеше,-  они
  висят на стенке за дверью моей комнаты.
       - Сейчас,- повеселев, сказал Алеша, и побежал в комнату в конце машинно-
  го зала.
       - Наверное, интересно заглянуть  во  внутренности  накопителя?-  спросил
  Александр Геннадьевич.- Вдруг будешь  иметь  персональный  компьютер  дома  -
  может пригодиться сегодняшний опыт. Но сначала  посмотрим  повнимательней  на
  гибкую дискету и вспомним историю.
       Дискета имеет форму гибкой грампластинки  (как  у  журнала  "Кругозор"),
  помещенной в пластиковый пакет. Диаметр диска равен 198мм,  а  отверстие  под
  ведущий шпиндель имеет диаметр 38.1мм. Индикаторное отверстие в дискете (диа-
  метр 2.5мм) предназначено для синхронизации данных во время вращения.  Инфор-
  мация записывается в тонком магнитном слое, который  нанесен  на  поверхность
  вращающегося диска.
       Как магнитные ленты и грампластинки, дискеты очень чуствительны к грязи,
  пыли и отпечаткам пальцев, поэтому их помещают в защитных конвертах, изготов-
  ленных из материала, который обеспечивает минимальное  трение,  так  как  при
  чтении и записи эти защитные конверты не снимаются с дискеты.
       Стандартная дискета имеет три отверстия: большое круглое в центре -  для
  шпинделя,  радиальное  продолговатое  (только  в  конверте)  -  для   головки
  записи/чтения и маленькое, несколько в стороне от центра, - для индикаторного
  фотодатчика.
       Для дополнительной защиты дискеты при транспортировке  применяется  кон-
  верт из тонкого картона, похожий на те,  в  которых  хранятся  грампластинки.
  Обычно на конверте напечатаны правила обращения с дискетой.
       Гибкий магнитный диск  был  разработан  в  середине  60-х  годов  фирмой
  IBM(США). Как и многое, что разрабатывает фирма IBM, дискета стала стандартом
  "de FACTO" в вычислительной технике. И несмотря на то  что  сейчас  появились
  более компактные дискеты и с большей  емкостью,  дискета  стандарта  IBM-3740
  остается одним из основных средств совместимости по носителям между ЭВМ  раз-
  личных типов и фирм.
       Первоначально дискеты имели магнитный слой только на  одной  стороне.  В
  настоящее время этот слой наносится на обе стороны так, что после переворачи-
  вания мы можем использовать информацию, записанную на обратной стороне диске-
  ты. Однако для этого в конверте должно быть еще одно отверстие для индикатор-
  ного фотодатчика или (что лучше) в накопителе должен быть установлен еще один
  фотодатчик (это позволит отличать, какой стороной вставлена дискета.  Хотя  в
  RT-11 такой возможности не предусмотрено). В некоторых накопителях,  например
  ГМД-7022, НГМД-6121А2, для чтения/записи доступны обе  стороны  одновременно,
  для чего установлена вторая головка записи/считывания.
       В дисковых запоминающих устройствах информация записывается  на  поверх-
  ности в виде концентрических окружностей, а не спиралей как в  случае  грамп-


                                     - 126 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  ластинок. Эти окружности называются дорожками (по-английски  TRACK).  Внешние
  дорожки длиннее внутренних, поэтому плотность упаковки информации на внутрен-
  них дорожках выше, чем на внешних. Поэтому и вероятность сбоя или  ошибки  на
  внутренних дорожках больше.
       - Значит, информацию лучше хранить ближе к краю диска,- говорит Алеша.
       - Это ты правильно заметил,- говорит Александр Геннадьевич,- только нуж-
  но знать, как это сделать.
       В качестве привода дискет в основном применяется синхронный двигатель со
  скоростью вращения шпинделя 360 об/мин. Скорость вращения должна быть  фикси-
  рованной, что необходимо для обмена гибкими дисками, записанными на различных
  устройствах.
       - Это как скорость движения  магнитной  ленты  в  бытовом  магнитофоне,-
  заметил Алеша,- очень интересно услышать веселую песню улитки Кэти из  амери-
  канского мультфильма, исполненную голосом Поля Робсона, да еще в темпе  вели-
  чавой паванны.
       - Да, это ты можешь выразить свое неудовольствие приятелю,  который  дал
  тебе такую кассету,- ответил ему Александр Геннадьевич,- а ЭВМ просто не пой-
  мет тебя, обидится и выдаст сообщение I/O ERROR. Это очевидно, что если  ско-
  рость вращения не соответствует стандарту, то ни о какой передачи данных речи
  быть не может.
       При работе запоминающих устройств на  гибких  магнитных  дисках  головки
  находятся в постоянном контакте с поверхностью дискеты, хотя это и приводит к
  дополнительному износу трущихся элементов, однако позволяет сильно  упростить
  конструкцию и снизить цену. Износ сильно ограничивает сроки службы как  голо-
  вок, так и дискет. Обычно устройства с гибкими дисками устроены  так,  что  в
  паузах между  операциями  записи/чтения  магнитная  головка  поднимается  над
  поверхностью дискеты, чтобы уменьшить  износ.  С  другой  стороны,  магнитные
  головки легко заменяются.
       - А теперь давай посмотрим, что у него внутри,- кивнув на ГМД-7012, ска-
  зал Александр Геннадьевич,- отверни вот эти два винта на задней стороне  кор-
  пуса.
       - Готово,- доложил Алеша.
       - А теперь придерживай плоский кабель, соединяющий ГМД  с  ЭВМ.  Смотри,
  чтобы он не зацепился, а то недолго и оторвать,- и Александр Геннадьевич лег-
  ко вытащил ГМД из кожуха.

                                           /-фетровый прижим
                                          /
                оШШШШШШШШШШШШШШШШШШШШШШШ /     /- дискета
              ШШШ                    ШШШ/     /          !
              ШШШ                    /"\     /       /"""!"""\
              ШШШ              --------------------+/    !    \+--
              ШШШ                    /"\           /     !     \
              ШШШ                    I I\          IZZZZZ!ZZZZZI
              ШШШШШШШШШШШШШШШШШШШШШШШШШШ \              ШШШ
  ШШШШШШШ     ШШШШШШШШШШШШШШШШШШШШШШШШШШ  \- магнитная   /
  Ш      Ш                Ш Ш                головка    /
  Ш      ШШ---\-\-\-\-\-\-\-\-\-\-\-\---ШШ             /
  Ш      ШШ----\-\-\-\-\-\-\-\-\-\-\-\--ШШ            /
  Ш      Ш                ШШШ    \                шпиндель
  ШШШШШШШШ                        \
      \                            \
       \                            \- установочный
        \                                винт
   шаговый двигатель

       - Вот теперь смотри,- показал Алеше Александр  Геннадьевич,-  устройство
  управления положением головки состоит из шагового двигателя, вращающего винт,
  который передвигает держатель головки вдоль поверхности дискеты.


                                     - 127 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


       Мы видим, что дискета прижимается к магнитной головке с помощью фетрово-
  го выступа. Давление этого выступа таково, что в этом месте  дискета  немного
  изгибается и как бы облегает магнитную головку (так же, как это происходит  в
  случае с магнитной лентой), что и  обеспечивает  плотный  контакт  дискеты  с
  головкой.
       Положение "ДОРОЖКА 00" для  магнитной  головки  определяется  с  помощью
  оптического датчика и флажка, перекрывающего луч, и который закреплен на дер-
  жателе магнитной головки.
       Для обеспечения обмена данными между дискетой и системой обработки  дан-
  ных требуется контроллер, который обычно состоит из двух частей. Одна часть -
  это электронная схема, которая обеспечивает перенос данных из  своего  буфера
  на дискету и с нее и, как правило, встроена в накопитель.
       - Это вот эти две платы, скрепленные вместе,-  показал  Алеше  Александр
  Геннадьевич,- которые мы откинули в вертикальное положение.
       Вторая часть, встроенная в ЭВМ, обеспечивает  согласование  стандартного
  канала передачи данных НГМД с конкретной ЭВМ.
       В связи с относительно большим временем доступа к дисковому ЗУ оказалось
  невыгодным записывать данные, размещая их в произвольных местах диска. Значи-
  тельно меньшее среднее время доступа обеспечивает  метод  хранения  данных  в
  виде блоков, так как для  конкретного  этапа  обработки  данных  целиком  вся
  информация, хранящаяся на дискете, никогда не требуется. Тот, кто читает кни-
  гу, видит перед собой только одну страницу, необходимую ему для  ознакомления
  с текстом. В дисковых ЗУ блок данных, которые в данных момент требуются прог-
  рамме, считывается с диска сначало во внутренний буфер  накопителя,  а  затем
  пересылается в ОЗУ процессора. При записи данных на диск эта процедура проте-
  кает точно так же, но только в обратном направлении.
       Только не нужно путать эти блоки с блоками, которые мы видим в программе
  DIR или DUMP. В данном случае мы  говорим  о  физическом  объеме  информации,
  который участвует в обмене между накопителем и ЭВМ. И так  как  для  удобства
  доступа данные необходимо как-то организовать на диске,  то  принято  (но  не
  всегда) каждый такой блок записывать на отдельный участок дорожки, называемый
  сектором. Каждый сектор имеет фиксированную длину и собственный адрес,  кото-
  рый определяет место расположения этого сектора на поверхности диска. В нача-
  ле каждого сектора записывается его адрес на диске. Контроллер  не  разрешает
  записывать в места, где хранится адрес сектора, какую-либо другую информацию,
  поступающую из системы. Адреса секторов можно только считывать.
       Операция записи на чистую дискету  заголовка  записи,  меток  и  адресов
  дорожек и секторов называется разметкой или форматированием  диска.  Разметка
  позволяет контролировать положение головки на дорожке,  увеличить  надежность
  записи и хранения информации, а также  уменьшить  объем  буфера  контроллера.
  Однако дополнительная информация занимает место. На гибком диске без разметки
  можно записать 398.68К байт информации, а с разметкой только 250.25К байт.  В
  технических описаниях соответственно различают объем накопителя (или  носите-
  ля) в форматированных или неформатированных данных. Для  увеличения  полезной
  емкости дискеты при сохранении достоинств  разметки  и  стандартного  формата
  стали использовать так называемый формат с двойной плотностью. Отличие  кото-
  рого от формата IBM-3740 только в том, что в поле данных сектора записывается
  256 байт полезной информации (вместо обычных 128) при сохранении всех осталь-
  ных параметров и размеров, установленных стандартом.
       При попытке ЭВМ получить доступ к данным контроллеру  сообщаются  адреса
  дорожки и сектора, где находятся требуемые  данные,  а  также  код  операции,
  которую необходимо над этими данными произвести. Контроллер через  устройство
  управления положением головки устанавливает ее над требуемой дорожкой.  После
  этого производится поиск сектора и запись/считывание  соответствующего  блока
  данных.
       - Александр Геннадьевич,- спрашивает Алеша,- а можно  более  подробно  и
  как-то нагляднее изобразить расположение информации на дорожке?
       - Конечно,- отвечает Александр Геннадьевич,- я просто покажу тебе схему,
  описывающую стандарт IBM-3740. Этот  формат  известен  как  СТАНДАРТНЫЙ  IBM-


                                     - 128 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  ФОРМАТ, который выполняется для всех 77 дорожек на дискете.

      импульс от индексного отверстия на дискете
     /
  _ГL______________________________________________________________
   !
   !<--------дорожка N  (<== направление вращения)-----------------
   !
   !
   +----------------------------------+
   I заголовок I метка   I промежуток I
   I записи    I индекса I после      I
   I           I адреса  I индекса    I
   +----------------------------------+
   ! 46 байт   ! 16 байт ! 32 байта  /
   !                                /
   !                               /
   !                         ...../
   !                        /
   !              ........./
   !             /
   !            /
   +-----------+-------------------/ /-------------------------+
   I заголовок ! сектор ! сектор !/ / сектор ! сектор ! конец  I
   I дорожки   !   1    !   2    / /!   25   !   26   ! записи I
   +-----------+----------------/ /----------------------------+
              / 188 байт\
             /           \
            /             \
           /               \
       .../                 \.................................
      /                                                       \
     /                                                         \
    /                      заполнено/не заполнено               \
   /                                V                            \
  +---------------------------------------------------------------+
  I метка  ! адрес ! промежуток ! метка  !  данные   ! промежуток I
  I адреса !       ! 17 байт    ! данных !           ! 33 байта   I
  +---------------------------------------------------------------+
  ! 1 байт !       !            ! 1 байт ! 128 байт данных
          /        \                     !   2 байта контрольная
         /          \                                сумма
        /            \
       /              \
    ../                \..................
   /                                      \
  /           6 байт                       \
  +-----------------------------------------+
  I номер   I   I номер   I   I контрольная I
  I дорожки I 0 I сектора I 0 I сумма       I
  +-----------------------------------------+

           Стандартный формат записи данных на дискете
                           (формат IBM-3740)

       Из этого рисунка видно, что после обнаружения индикаторного отверстия  с
  помощью оптического датчика  мы  получим  последовательность  из  46  байтов,
  заполненных нулями. Эти 46 байтов являются тактовыми  импульсами,  с  помощью
  которых производится синхронизация внутреннего генератора тактовых импульсов.


                                     - 129 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


       - Это как в кино,- радуясь своей аналогии говорит Алеша,- там два  гене-
  рала сравнивали время на часах друг у друга, чтобы потом одновременно  начать
  атаку.
       - Это ты правильно заметил. Можно также сказать, что  накопитель  подст-
  раивается к данным также, как музыкант к ударам метронома.
       После заголовка записи, как видно из  рисунка,  записана  метка  индекса
  адреса. Эта метка появляется как первый байт, который несет какую-то информа-
  цию. Эта метка указывает контроллеру, что следом пойдет сектор.
       - А как же он определит, какие данные записаны в данном месте  дорожки?-
  спрашивает Алеша.
       На дискете отсутствует какая-либо синхродорожка с  датчиком  и  дополни-
  тельной электроникой для осуществления синхронизации. Поэтому придумали синх-
  роимпульсы записывать на ту же дорожку, что и данные, вперемежку -  синхроим-
  пульс, импульс данных, синхроимпульс, и т.д. Это расположение импульсов можно
  изобразить на рисунке:

               !бит 0!бит 1!бит 2!бит 3!бит 4!бит 5!бит 6!бит 7!
               !<--->!
                  \.....4 mkS

               б а й т   д а н н ы х
  Биты данных      1     0     0     1     0     1     1     0
               .[L.[L.[L....[L....[L.[L.[L....[L.[L.[L.[L.[L....[L
  Биты таймера  1     1     1     1     1     1     1     1

               б а й т  п р о м е ж у т к а
  Биты данных      0     0     0     0     0     0     0     0
               .[L....[L....[L....[L....[L....[L....[L....[L....[L
  Биты таймера  1     1     1     1     1     1     1     1

                б а й т    м е т к и
  Биты данных      1     1     1     1     1     N     N     N
               .[L.[L.[L.[L....[L....[L....[L.[L.N..[L.N..[L.N..[
  биты таймера  1     1     0     0     0     1     1     1

       - Как здорово,- засмеялся Алеша,- значит контроллер смотрит на биты дан-
  ных, как через щелочки в заборе.
       - Это ты правильно заметил,- сказал Александр Геннадьевич.
       - С байтами данных и промежутка вроде все ясно - в байте промежутка биты
  таймера всегда равны единице (т.е. импульсы есть), а биты данных всегда равны
  нулю. А в байте данных биты данных отражают записанную информацию.
       А вот с метками не все понятно,- тут Алеша задумался,- ведь меток у  нас
  три. Как отличить индексную метку, метку данных и метку адреса.
       - А вот как,- сказал Александр Геннадьевич,- посмотри  Алеша  чем  отли-
  чается байт метки?
       - У него отсутствуют три бита таймера,- говорит Алеша,- это  может  быть
  только одним специальным признаком, например - то, что это метка.
       - Да, но заметь, что при этом все биты данных в метке, кроме  трех  пос-
  ледних, равны единице, а тремя последними закодирован тип метки. А  распозна-
  вание происходит, как показано в таблице:

          +-----------------------+
          ! N N N  ! тип  метки   !
          !--------+--------------!
          ! 0 0 0  ! не заполнено !
          ! 0 1 1  ! данные       !
          ! 1 0 0  ! индекс       !
          ! 1 1 0  ! адрес        !
          +-----------------------+


                                     - 130 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


       - Тогда у нас есть все средства, чтобы различать,  где  на  диске  какие
  данные расположены,- говорит Алеша.
       - Да,- отвечает Александр Геннадьевич,- и весь формат диска  расшифровы-
  вается очень просто. После заголовка дорожки  идет  26  секторов,  каждый  из
  которых имеет метку адреса, после которой записаны  адрес  -  номер  дорожки,
  номер сектора и контрольная сумма для проверки.
       - Но ведь контроллеру уже заданы номера дорожки и сектора для чтения или
  записи,- говорит Алеша,- и нужно еще сравнить их с прочитанными с диска -  на
  это нужно время.
       - Да, и для этого служит промежуток в 17 байт. И  если  задана  операция
  ЧТЕНИЕ, то перед  данными  появляется  метка  данных.  Если  задана  операция
  ЗАПИСЬ, то запись происходит начиная с 11 байта и метка  данных  записывается
  вместе с данными.
       - Александр Геннадьевич,- вдруг спохватился  Алеша,-  как  же  так?  При
  такой разметке на дискете должно поместиться 250.25К байт  данных  или  500.5
  блоков. А когда мы разбирались с каталогом  этой  дискеты,  то  в  распечатке
  видели только 494 блока (т.е. вместе с каталогом). Разница в 6.5 блоков поче-
  му-то составляет ровно одну дорожку.
       - Это ты правильно подметил. Дело в том, что  фирма  IBM,  разработавшая
  этот стандарт, использует самую внешную дорожку с  номером  "00"  для  записи
  информации о томе и формате каталога. Так как  основные  системные  программы
  RT-11 - DIR, DUP, PIP, DUMP - не используют эту информацию, то мы говорить  о
  ней пока не будем. Отметим только, что записана она в символьном коде EBCDIC,
  разработанном и в основном используемом фирмой IBM.


       - И все-таки хоть мы и говорили, что дорожек на дискете  мы  не  увидим,
  что поверхность дискеты покрыта тонким слоем ферромагнитного  лака,-  докапы-
  вается Алеша,- если бы намагниченные участки лака, т.е. дорожки,  можно  было
  бы проявить, то что бы мы увидели?
       - Во-первых,- смеясь, говорит  Александр  Геннадьевич,-  мы  бы  увидели
  основные причины ошибок при чтении информации с дискеты.
       А если серьезно, то мы бы увидели картинку, приведенную  ниже  в  сильно
  увеличенном виде.

  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  -----------------------------------------------------------------
                                              ^
        стирающая     X                       !-- 0.1мм
        головка   --> X                       V
  -----------------I-----------------------------------------------
  ШШШШШШШШШШШШШШШШ I ШШШШШШШШШШШШШШШШШШШШШШШ  ^    ШШШШШШШШШШШШШШШШ
  ШШШШШШШШШШШШШШШШ I Ш   записанные ШШШШШШШ   !       ШШШШШШШШШШШШШ
  ШШШШШШШШШШШШШШШШ I Ш              ШШШШШ     !-- 0.4мм  ШШШШШШШШШШ
  ШШШШШШШШШШШШШШШШ I Ш   данные     ШШШШШШШ   !         ШШШШШШШШШШШ
  ШШШШШШШШШШШШШШШШ I ШШШШШШШШШШШШШШШШШШШШШШШ  V   ШШШШШШШШШШШШШШШШШ
  -----------------I-----------------------------------------------
     записывающая /   X <-- стирающая         ^
     головка ..../    X     головка           !-- 0.1мм
                                              V
  -----------------------------------------------------------------
  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ

      Расположение дорожек и зазоров между ними после разметки

       При таком близком расположении дорожек может получится так, что  магнит-
  ная головка будет читать или писать сразу две  дорожки,  если  головка  будет


                                     - 131 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  установлена не точно на дорожку, образованную при форматировании. Это  приве-
  дет к потере данных, записанных на соседней дорожке. Чтобы этого не  произош-
  ло, с двух сторон записывающей дорожки  установлены  стирающие  головки.  При
  этом получается эффект, который получил название туннельного  стирания.  Т.е.
  информация, записанная основной головкой, как через  туннель  проходит  между
  двумя стирающими головками. Так как запись происходит только в поле данных, а
  стирание по всей дорожке, то из-за недостаточной  точности  работы  механизма
  привода, неодинакового положения головки отностительно оси дискеты  у  разных
  накопителей (различная юстировка) постепенно адресная часть сектора стирается
  до такой степени, что прочитать ее становиться невозможным, хотя данные могут
  быть легко прочитаны. Накопитель не может найти  сектор,  который  необходимо
  прочитать. Это состояние дорожки схематично показано на рисунке:

  шшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшшш
  ШШ+--------------------------------------------------------------
  --+

                      +--------------------------------------------
                      !ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  --+                 !ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  ШШ+-----------------+ШШШШШ Д А Н Н Ы Е ШШШШШШШШШШШШШШШШШШШШШШШШШШ
  ШШШ метка адреса и ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  ШШШ адрес сектора  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  ШШ+--------------------------------------------------------------
  ШШ!
  --+

    +--------------------------------------------------------------
  --+ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ

                Дорожка после многократной записи
                   на несовместимых дисководах


       Таким же образом могут быть испорчены данные, если на несовместимом дис-
  ководе будет записана хотя бы одна дорожка.
       - И испорчена будет не та дорожка, которую записывали,- уточнил  Алеша,-
  а соседняя, которую  задела  стирающая  головка.  Но  какие  случаи  наиболее
  типичны?
       - Давай смотреть и рассуждать,- говорит  Александр  Геннадьевич,-  нужно
  искать причины, и как они проявляются.
       - Во-первых,- Александр Геннадьевич начал перечислять,- если неаккуратно
  вставили дискету в накопитель и замяли ей край большого отверстия, то дорожки
  будут смещены относительно головки на величину смятого края.  Поэтому  доста-
  точно замять край всего на 0.5мм, и головка будет  читать  соседнюю  дорожку.
  Однако в таком случае мы всегда прочитаем правильно два сектора  на  дорожке.
  Подумай, почему? Во избежание этого  необходимо  просто  аккуратно  вставлять
  дискету и закрывать крышку не сразу, а покачивающим движением, чтобы  дискета
  могла сдвинуться в конверте и найти свое место на конусе прижимного шпинделя.
       Такой же эффект проявляется, если шаговый двигатель неправильно отсчиты-
  вает расстояние от центра вращения дискеты. При этом  мы  ни  одного  сектора
  правильно прочитать не сможем. У нас просто дорожки будут чуть  большего  или
  меньшего диаметра. Этот случай несложный - исправить положение головки  можно
  поворотом шагового двигателя в пределах +15...-15 градусов. Сделать это можно
  с помощью осциллографа (или даже милливольтметра) и программки,  которую  для
  меня написал Андрей Германович, всего за пять минут.
       - Во-вторых,- продолжил Александр Геннадьевич,- если не  читается  одна,
  две или несколько дорожек (как правило, в таком случае не читается  и  первая


                                     - 132 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  дорожка), то, скорее всего, кто-то записывал информацию на дискету на  другом
  (несовместимом) дисководе.
       - А первая дорожка не читается, потому что произошла запись в  каталог,-
  догадался Алеша.
       - Верно. В таких случаях если ошибок (или, как говорят,  плохих  блоков)
  не много и известно, что файлы содержат текстовую информацию, то лучше  взять
  заведомо хорошую, чистую (т.е. свободную от нужной информации) дискету и ско-
  пировать все с плохой дискеты на хорошую с игнорированием ошибок. В текстовом
  файле один блок содержит в среднем 16 строк текста, которые восстановить лег-
  че, чем весь файл. Кроме того, возможно, не читается адрес сектора или испор-
  чен только один байт, в результате чего не совпадает контрольная сумма,  т.е.
  ошибки достаточно малы. В любом случае с помощью программы DUMP можно  доста-
  точно полно и объективно установить размеры катастрофы.  Программа  DUMP  при
  чтении плохого блока будет делать несколько попыток, и по характеру  движения
  головки в накопителе его легко можно определить.
       Следует также помнить, что программа DIR  при  своей  работе  использует
  первый блок, а программы копирования, как правило, нет.
       - И третье,- продолжает Александр Геннадьевич,- иногда  внешние  дорожки
  читаются заметно лучше, чем внутренние (или наоборот), и чем больше  расстоя-
  ние между наблюдаемыми дорожками, тем заметнее разница.
       - Под такую дискету и  дисковод  не  отрегулируешь,-  с  досадой  сказал
  Алеша,- нос вытащишь, хвост увязнет.
       - Именно так. Такие ошибки вызваны некачественным изготовлением винта  у
  шагового двигателя, который передвигает головку  (что  легко  определяется  в
  начале эксплуатации), или износом прижимной гайки, которую в большинстве слу-
  чаев легко заменить.
       - И  наконец,  четвертое,-  говорит  Александр  Геннадьевич,-  часто  не
  читаются несколько блоков, расположенных кучкой на соседних дорожках.
       - А это, наверное, кто-то пальцем прикоснулся,- быстро догадался Алеша,-
  и осталось жирное пятно на поверхности.
       - Совершенно верно. Это наиболее частый  случай.  Аккуратно  поворачивая
  дискету в конверте, можно найти это место  и  протереть  пятно  изопропиловым
  спиртом. Однако такой же эффект дает  приближение  магнита  или  провода,  по
  которому протекает электрический  ток.  В  этом  случае  информация  потеряна
  навечно.

       Подытожывая, можно сказать, что в отношении  к  носителям  информации  -
  будь то книга или дискета - проявляется культура человека.  Чем  лучше  отно-
  сишься к носителям информации (книгам, дискетам, дискам,  лентам  и  др.),  а
  также к оборудованию, тем надежнее будет сохраняться информация. Часто встре-
  чающийся совет - делать побольше копий - далеко не лучший. Это дорого (дискет
  не напасешься), нужно вовремя вносить во ВСЕ копии изменения, а  кроме  того,
  они с таким же успехом могут быть испорчены неаккуратным обращением. Если  ты
  забыл, что вредно дискетам - посмотри на заднюю сторону конверта для  дискеты
  и ты все увидишь и прочтешь (правда, советские и болгарские изготовители дис-
  кет ленятся снабжать эту краткую инструкцию картинками).






       6.2.1. Жесткие диски



       - Александр Геннадьевич,- спрашивает Алеша,- а вон Дима ставит в  машину
  такие большие диски в белых кассетах, про которые мы говорили в самом начале.
       - А мы возьмем его и посмотрим,-  отвечает  Александр  Геннадьевич,-  но


                                     - 133 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  сначала вспомним историю.
       Кассетный диск или Disk Cartridg был разработан также фирмой IBM и имеет
  два общих обозначения - IBM-2315 и IBM-5440. Он заключен в пластмассовую кас-
  сету диаметром 14 дюймов, отсюда его второе (менее распространенное) название
  - 14-дюймовый (14") жесткий диск. Кассета удобна для переноски  и  установки,
  так как имеет в центре откидывающуюся ручку  (диски  IBM-2315  вставляются  в
  накопитель с торца, как кассеты в автомобильных магнитолах, и,  соответствен-
  но, имеют ручку сбоку). Устанавливается такой диск в накопитель вместе с кас-
  сетой, но со снятой крышкой.
       - А как же ее снять,- спрашивает Алеша,- ведь здесь нет никаких зацепок?
       - Крышка держится на магнитах. А для того чтобы ее снять, нужно при при-
  жатой к кассете ручке сдвинуть клавишу в центре ручки  и  в  таком  положении
  поднять ручку в вертикальное положение. При этом крышка, как  скорлупа,  сни-
  мается с кассеты, и мы можем увидеть отверстия для входа магнитных головок  и
  щеток. Теперь также можно увидеть и все его отличия. Давай Алеша, перечисляй.
       - Во-первых,- начал Алеша,- сам диск выполнен из  сравнительно  толстого
  аллюминия. Это позволяет сделать его больше и  раскручивать  с  большей  ско-
  ростью. А следовательно, объем информации, которую  на  нем  можно  записать,
  существенно больше. И скорость обмена информацией также больше.
       - А здесь ты не совсем прав,- поправляет Алешу  Александр  Геннадьевич,-
  то, что диск больше по размеру, не главное для увеличения объема  информации.
  Главное то, что изготовить его можно с более высокой точностью. И крепится он
  на прочной ступице, которая позволяет более точно зафиксировать диск на шпин-
  деле двигателя. Все эти меры позволяют удвоить плотность дорожек на  диске  -
  шаг дорожки равен 0.254мм и ширина дорожки равна - 0.175мм.
       Высокая плотность дорожек дала  побочный  результат.  Магнитные  головки
  стали меньшего размера, что увеличило их пропускную способность  и  плотность
  записи.
       - Так здесь все параметры оказываются взаимосвязанными,- говорит Алеша,-
  высокая скорость вращения требует и более качественного  магнитного  лака,  а
  это также позволяет увеличить плотность записи.
       - Это верно,- говорит Александр  Геннадьевич,-  и  не  только  увеличить
  плотность, но и повысить надежность записи. А теперь давай подведем  итоговые
  цифры.
       Диски типа 2315 и 5440 имеют объем от 1.2 до  6.0  Мбайт;  100  или  200
  рабочих (плюс две или четыре запасных) дорожек; вращаются со  скоростью  1500
  об/мин (2315) или 2400 об/мин (5440).
       Что же касается форматов записи, то отличия  не  принципиальные.  Ширина
  дорожки стала меньше - всего 0.175мм, и шаг между дорожками - 0.254мм.  Коли-
  чество секторов в зависимости от исполнения может быть 12, 16, 24, 24, 32.  В
  нашем случае используется 12 секторов. Но в каждом секторе  записано  по  512
  байтов данных. Количество дорожек - 200 основных и 4  запасных.  В  остальном
  принципы записи, необходимость форматирования или разметки, адреса сектора  и
  дорожки - это все осталось.
       - Александр Геннадьевич,- спохватился Алеша,- да ведь если на такой ско-
  рости прижать магнитную головку к поверхности, то она сгорит в прямом  смысле
  слова. И пыль в воздухе. Если пылинка попадет  на  диск,  то  она  и  головку
  испортит и борозду на диске "пропашет" в магнитном лаке.
       - Молодец, что заметил,- похвалил Александр  Геннадьевич,-  разработчики
  фирмы IBM также это заметили  и  заставили  магнитную  головку  "летать"  над
  поверхностью диска на высоте 2мкм. Для этого магнитная  головка  упакована  в
  достаточно большую керамическую пластинку, имеющую специальную (как у кругло-
  го крыла) форму, в результате чего при движении создается воздушная  подушка,
  предохраняющая головку от столкновения с диском. Пластинки с  головками  зак-
  реплены на двух рычагах (по одной на каждую сторону диска), а шаговый  двига-
  тель, как слишком медленный, заменен на электромагнитную катушку (как у боль-
  шого громкоговорителя).


                                     - 134 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


                                 /- верхняя головка
  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШ  /
  Ш                        Г"""""""\                      !
  Ш                        \...Ж.../                 /ШШШШ!ШШШШ\
  Ш               <ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ!ZZZZZZZZ
  Ш                        /"""Ж"""\                 \ШШШШ!ШШШШ/
  Ш                        L......./                      !
  ШШШШШШШШШШШШШШШШШШШШШШШШШШШШ   \
              \                   \... нижняя головка
               \... штанга

                   летающие головки жесткого диска


       Кроме того, такой большой (диаметр 356мм) и тяжелый диск  сразу  раскру-
  тить до большой скорости нельзя. Синхронный двигатель здесь не подходит. Диск
  раскручивают плавно до нужной скорости,  которая  постоянно  измеряется  спе-
  циальным датчиком. И только когда заданная скорость установится, в ход  всту-
  пают дворники - щетки, которые выдвигаются из  угла  накопителя  и  заботливо
  очищают поверхности диска от пыли, и только после  этого  головки  "выстрели-
  ваются" на нулевую дорожку диска.
       Для экономии на одном приводе закрепляется два диска - один  встроенный,
  который имеет четный номер, другой - съемный в пластмассовой кассете, который
  мы сейчас смотрели, и имеет нечетный номер.
       - А что еще может повлиять на надежность записи?- спрашивает Алеша.
       - По сравнению с  гибкими  дисками,-  отвечает  Александр  Геннадьевич,-
  здесь более длинные рычаги (из-за большего диаметра  дисков),  которые  имеет
  большую массу. А так как скорость установки головок на нужную  дорожку  очень
  высокая, то в электромагнитной  катушке  выделяется  значительное  количестве
  тепловой энергии. От изменения температуры изменяется  и  положение  головок,
  что приводит к такому же эффекту несовместимости дорожки  и  головки,  как  и
  гибких дисков.
       - Так значит,- удивленно спрашивает Алеша,- температура в машинном  зале
  тоже влияет на совместимость дисков?
       - Да, влияет,- отвечает Александр Геннадьевич,- но не потому, что рычаги
  от внешней температуры удлиняются, а потому что изменяются условия охлаждения
  электромагнитной катушки, на которой крепятся рычаги.  А  от  ее  температуры
  зависит установка рычагов (и головок соответственно) на дорожку.
       Кроме того, есть еще один фактор, который не всегда учитывается. Это то,
  что рычаги с головками крепятся к сердечнику катушки на винтах. Крепление это
  со временем ослабевает, и при высоких  динамических  нагрузках,  которые  они
  испытывают, происходит изменение взаимного расположения  зубчатой  рейки,  по
  которой определяется положение головки на нужной дорожке, и собственно голов-
  ки.






       6.2.2. Диск-пакеты и винчестеры




       - Александр Геннадьевич,- неугомонный Алеша хочет сразу узнать  про  все
  диски в машинном зале,- а те синие тумбочки, что стоят у  первого  и  второго
  комплексов, имеют какие-нибудь особенности?
       - В общем-то нет,- отвечает Александр Геннадьевич,- потому что это те же


                                     - 135 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  самые диски, что и IBM-5440, но их 11 штук надето на одну ось. Конечно,  кас-
  сета здесь не подходит, и вместо этого на них надет колпак, который снимается
  только при установке в  накопитель,  а  при  переноске  снизу  прикручивается
  пластмассовая крышка. Эти диск-пакеты также были  разработаны  фирмой  IBM  и
  получили свой номер IBM-2316.
       - Раз у них 11 дисков,- заметил Алеша,- значит должно одновременно  дви-
  гаться 20 головок (две поверхности являются защитными).
       - Это верно. А поэтому выделение тепла электромагнитной катушкой сущест-
  венно больше и диск-пакеты более чуствительны к окружающей  температуре.  Это
  уже сказывается на работе. Заметное  смещение  головок  происходит  в  первые
  30-40 минут работы, когда прогревается сама электромагнитная катушка и  рыча-
  ги, на которых крепятся головки. Это достаточно большая масса. А дальше  рез-
  кие, непродолжительные изменения температуры в машинном зале на них не  очень
  влияют. Поэтому когда работаешь с такими большими носителями,  перед  началом
  работы дай им прогреться. Для этого достаточно включить дисководы, чтобы дис-
  ки начали крутиться. При достижении нормальной скорости  головки  установятся
  на нулевую дорожку, и по катушке потечет ток и они будут  нагреваться.  Через
  40 минут установится тепловое равновесие, и на них можно будет работать.
       - И все это время весь комплекс будет работать?- удивился Алеша.
       - Нет, это необязательно,- отвечает Александр Геннадьевич,- ведь  диско-
  воды работают в автономном режиме и вся остальная аппаратура может быть  вык-
  лючена, если она не влияет на температурную обстановку в зале.

       - Александр Геннадьевич,- Алеша продолжал свое расследование,- а в  ком-
  нате напротив стоят ДВК-3, ДВК-4 и "Электроника-85". У них в качестве накопи-
  телей только гибкие дискеты,  правда  меньшего  размера.  А  Дима  подошел  к
  "Электронике-85", сунул в нее дискету и сказал своему приятелю: "Сейчас я все
  это скину на винчестер, и отдам ее тебе". А в комнате ни ружья,  ни  винтовки
  такой не видно.
       - А ты уже и туда пробрался,- посмеялся  Александр  Геннадьевич,-  тогда
  слушай. История винчестерских дисков  очень  интересна.  Сначала  -  что  это
  такое.
       Ты уже заметил, что на больших скоростях вращения дисков самым  страшным
  врагом для них является пыль. Кроме  того,  при  больших  скоростях  движения
  головки, например при установке на  дальнюю  дорожку,  воздух  уже  оказывает
  большое сопротивление. А разработчики хотели уменьшать  и  уменьшать  размеры
  головок, потому что это приводит к уменьшению  потребления  электроэнергии  и
  выделения тепла. Вот и придумали разработчики фирмы IBM  и  пакет  дисков,  и
  головку, и все механизмы заключить в прочный герметический корпус и  откачать
  из него воздух (вместе с пылью). Первое такое устройство появилось в середине
  70-х годов. Диски в них фиксированные, т.е. их нельзя вынуть и заменить  дру-
  гими. Поэтому ты и не увидел их в "Электронике-85".  Но  за  счет  уменьшения
  всех размеров, увеличения точности изготовления,  отсутствия  таких  страшных
  факторов, как пыль, воздух и влажность, удалось получить компактное, надежное
  и удобное запоминающее устройство с большой (а  в  настоящее  время  с  очень
  большой) информационной емкостью.
       - А в каких пределах эту емкость удалось получить?- поинтересовался Але-
  ша.
       - Только не удивляйся,- ответил Александр  Геннадьевич,-  например,  для
  "Электроники-85" уже разработаны "Винчестеры" объемом 20М байт.  Это  столько
  же, сколько в "синей тумбочке" ЕС-5061 - накопителе на диск-пакетах. Так  что
  "Электроника-85" и СОТКА по мощности могут считаться машинами одного  класса.
  А мировой уровень еще больше. Американская фирма Seagate выпускает накопители
  типа "Винчестер" объемом 1300 Мбайт форматированных данных при таких же  раз-
  мерах, как 5-Мбайтного "Винчестера" в "Электронике-85". Можно  не  стремиться
  за большим объемом, а остановиться, например, на 210 Мбайтах. Тогда и размеры
  будут в два с лишним раза меньше - 41*101*146мм и вес 900 грамов.  Фирма  DEC
  выпускает для  ПЭВМ  "Professional-350",  аналогом  которой  у  нас  является
  "Электроника-85", целый ряд "Винчестеров" - RD50 - 5Mb, RD51 - 10Mb,  RD52  -


                                     - 136 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


  33Mb, RD54 - 156Mb.
       - А название,- напомнил Алеша.
       - А название появилось случайно. Одно из подобных устройств было выпуще-
  но фирмой IBM в сдвоенном виде - т.е. два накопителя в одном корпусе - и име-
  ло обозначение 30/30, в соответствии  с  его  информационной  емкостью  30/30
  Мбайт. Такое же обозначение имела винтовка "Винчестер", но в  соответствии  с
  калибром (30) ее двух стволов. С чьей-то легкой руки в  фирме  IBM  это  уст-
  ройство назвали "Винчестером", а затем и все жесткие герметизированные диски,
  изготовленные по этой технологии, стали называть винчестерскими.






       6.3. Формат записи на магнитной ленте



       - Александр Геннадьевич,- Алеша уже заговорчески подергал за  рукав,-  а
  на тех комплексах есть магнитофоны. Я  слышал,  как  Дима  говорил,  что  для
  надежности информацию нужно дублировать на магнитной ленте.
       - Да, Дима прав,- начал Александр Геннадьевич,- запись на магнитной лен-
  те надежна. Но кроме того, на ленте легче всего переносить информацию с одной
  машины на другую, так как практически не встречается проблема несовместимости
  головок, как у дисков. Вот посмотри на него,-  Александр  Геннадьевич  подвел
  Алешу к третьему комплексу. Магнитофон очень  похож  на  бытовые  магнитофоны
  высокого класса. Отличие только в маленьком валике под правым подкассетником.
  Это датчик для измерения скорости движения ленты. Да еще фотодатчик над  маг-
  нитными головками (такой есть и  у  бытовых  магнитофонов).  Он  обнаруживает
  блестящие полоски на концах ленты и останавливает ее движение.
       Но какие же более серьезные отличия можно отметить, не вдаваясь  в  тон-
  кости частотных характеристик и подмагничивания?
       Самое главное - это количество дорожек. Данные записываются  параллельно
  по байтам. И так как байты были разного размера - от 5 до 8 бит, то и  магни-
  тофоны имели от 6 до 9 дорожек. Наконец со временем остановились на 9  дорож-
  ках.
       - А почему,- спрашивает Алеша,- число дорожек на одну больше числа бит в
  байте?
       - А в этом заложена большая хитрость. Данные записываются таким образом,
  что 9-й бит показывает четное или нечетное число единиц в записываемом  байте
  и тем самым служит контрольным разрядом. Побочный эффект такого способа  сос-
  тоит в том, что если 9-й бит равен 1 при четном числе единиц в  байте,  то  в
  таком 9-ти разрядном байте всегда хоть одна единица (т.е. импульс  на  ленте)
  будет. И скорость магнитной ленты можно подстраивать по самим записанным дан-
  ным. Это много упрощает конструкцию магнитофона и повышает надежность записи.
       А так как на ленте нет разметки (отдельные виды магнитофонов и  форматов
  не в счет), то данные записываются блоками от 18 до 2048 байт и  для  каждого
  блока записывают по два проверочных кода. Первый из них называется "Байт цик-
  лического контроля" - это название связано со способом вычисления контрольно-
  го числа. Второй вычисляется проще - подсчитываются все единицы на дорожке, и
  если их число нечетно, то в данном разряде записывается единица,  т.е.  число
  единиц на дорожке, включая байт продольного контроля, должно быть  четным.  А
  между блоками вставляется так называемый межзонный или межблочный  промежуток
  размером 15.2мм.


                                     - 137 -
           RT-11, A step by step        Phyzical Record   14-Nov-92


                           0.127мм ---/    /--- 0.127мм
                                     /    /
  !<---- зона 18...2048 байт ---->!<-->!<-->!
  !                               !    !    !
  -----------------------------------------------------------------
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I                 IIIII
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I                 IIIII
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I   межзонный     IIIII
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I   (межблочный)  IIIII
  IIIIIIIIII Д А Н Н Ы Е IIIIIIIIII    I    I   промежуток    IIIII
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I   min 12.7mm    IIIII
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I   nom 15.2mm    IIIII
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I   max 7600mm    IIIII
  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII    I    I                 IIIII
  -----------------------------------------------------------------
                                       /    \
                    байт              /      \     байт
                    циклического ----/        \--- продольного
                    контроля                       контроля


       - А как же записывается ленточный маркер?- спрашивает Алеша.
       - Ленточный маркер (иногда в документации называется  код  файла  -  КФ)
  представляет собой хитрый блок, состоящий  из  двух  байт  со  значением  023
  (восьмеричное) и разделенных по времени пустым промежутком равным по  времени
  8 тактам записи.
       - А с каждой стороны,- догадался Алеша,- по одному межблочному промежут-
  ку, который по размеру равен нашему блоку в 512 байт.
       - Именно так.
       - Теперь мне понятно, что каждый ленточный маркер крадет  у  файла  (или
  добавляет к его длине на ленте) один блок,- заключил Алеша.
       - Да, и если мы записали четыре отдельных файла,  то  на  эти  служебные
  нужды у нас ушло 13 блоков. А если бы мы записали его в виде  единого  файла,
  организовав их в логический диск, то эти расходы  составили  бы  15  блоков,-
  заметил я,- таким образом мы нащупали границу применимости способа  экономной
  записи на ленту. При числе файлов равном 5 или более - экономнее их  собирать
  в логический диск.
       - А у меня еще остался вопрос,- напоследок вспомнил Алеша,- почему нель-
  зя разметить ленту на блоки, как у магнитного диска?
       - Во-первых, мы можем определить длину блока только числом  байт,  а  не
  длиной записанной ленты, которая зависит  от  точности  поддержания  скорости
  движения и от изменения размеров самой ленты. На коротком кусочке  это  может
  быть незаметно, но при длине 375 метров (как используется в нашем  магнитофо-
  не) можно просто промахнуться мимо нужного номера блока, затерев его  заголо-
  вок предыдущей записью.  Во-вторых,  межблочный  промежуток  также  определен
  приблизительно. Время остановки и пуска  магнитофона  для  записи  отдельного
  блока (так называемые старт-стопные времена) зависят  от  его  регулировки  и
  различные у каждого отдельного экземпляра магнитофона. А именно оно и опреде-
  ляет реальный размер межблочного промежутка.
       Из этих промежутков и того, что мы сейчас сказали,  вытекает  правило  и
  даже целая психология пользователя:

                           ПОСЛЕДНЯЯ ПО ВРЕМЕНИ ЗАПИСЬ
                           ЯВЛЯЕТСЯ ПОСЛЕДНЕЙ НА ЛЕНТЕ

       - Ну вот,- завершил это занятие-беседу Александр Геннадьевич,- а  теперь
  соберем инструмент, закроем все крышки у дисков и лент и пойдем домой.



                                     - 138 -
           RT-11, A step by step                    DUP   14-Nov-92


                           7. ДИСКИ, КАТАЛОГИ, ФАЙЛЫ



                                       или
                         Создание рабочей копии системы


       Все, что мы раньше делали, было направлено на то,  чтобы  посмотреть  на
  систему со стороны. Пришло время самим что-то подвигать, проявить,  так  ска-
  зать, свою власть в жизни системы. На протяжении этой  и  следующей  глав  мы
  проделаем от начала и до конца то, что необходимо для  подготовки  к  созида-
  тельной работе. Две программы PIP и DUP, которые мы назвали  руками  системы,
  будут рассматриваться одновременно, чтобы сохранить типичную для пользователя
  последовательность действий. Для полноты картины мы рассмотрим еще и програм-
  му FORMAT, о которой мы еще ничего не говорили. И чтобы несколько  почувство-
  вать масштабы наших возможностей, мы сегодня поработаем на СОТКЕ.
       - Это в качестве компенсации,- пошутил Алеша,- за те два дня, в  которые
  не удалось поработать.
       - Не только,- отвечаю я,- если ты все понял в те "злополучные" два  дня,
  то теперь можешь сам сформулировать, что нам нужно сделать сегодня.
       - Ну что же,- вздохнул Алеша,- я попробую:
       - нам необходимо отформатировать диск, для того чтобы на нем можно  было
  что-либо писать;
       - нам необходимо инициализировать файловую систему на диске, или,  проще
  говоря, создать каталог;
       - нам необходимо скопировать файлы операционной системы на  наш  рабочий
  диск;
       - для того чтобы разделить зоны нашего влияния (не следует  работать  на
  системном устройстве, не желательно работать на архивном томе), создадим фай-
  лы, которые объявим логическими дисками, и подготовим их для работы;
       - подготовим новую операционную систему для ДВК, с которой  будем  рабо-
  тать в дальнейшем, и сохраним ее эталон на жестком диске в виде  файла  логи-
  ческого диска;
       - и попробуем поработать с магнитными лентами и виртуальной памятью.

       Оставив на некоторое время ДВК, мы перейдем работать на  СОТКУ.  Взяв  у
  Александра Геннадьевича архивный диск с операционной системой RT-11 V5.1B,  а
  также свободный жесткий диск, мы подошли к комплексу, который трудно  назвать
  персональной ЭВМ (по габаритам), хотя ПЭВМ "Электроника-85" уже обладает мощ-
  ностью большей, чем СОТКА и все, что мы будем делать (кроме работы  с  лента-
  ми), можно будет делать на ней.
       - А у меня первая проблема,- говорит Алеша,- этот дом без окон, без две-
  рей. Как же установить кассету с диском?
       - Это поправимо,- успокаиваю я,- хотя, действительно, когда  в  мини-ЭВМ
  все устройства задвинуты на место, то она представляет собой набор стоек, и о
  том, что они "живут", можно догадаться лишь по миганию лампочек. Но  так  как
  мы будем работать с накопителями СМ-5400, то и начнем описание с них.
       Как правило, накопители СМ-5400 устанавливаются на телескопических штан-
  гах, поэтому, для того чтобы установить кассету с диском на место, необходимо
  потянуть корпус накопителя на себя до тех пор,  пока  круглое  углубление  не
  будет  открыто  полностью.  В  ближнем   правом   углу   находится   рычажок-
  ограничитель. Его назначение - блокировать работу накопителя, если кассета  с
  диском не установлена или установлена неправильно. Внизу  справа  на  лицевой
  стороне накопителя имеются четыре индикатора, которые указывают, в каком сос-
  тоянии находится накопитель.

  "ГОТОВО"
     - индикатор, который, как правило, окрашен в  зеленый  цвет,  зажигается


                                     - 139 -
           RT-11, A step by step                    DUP   14-Nov-92


       при достижении диском заданной скорости вращения.  Кроме  того,  после
       раскрутки диска выдерживается время для того,  чтобы  крупные  пылинки
       слетели с поверхности диска, а мелкие аккуратно  снимут  щетки.  После
       чего головки занимают рабочее положение и загорается индикатор.

  "ЗАГРУЗКА"
     - индикатор, окрашенный в белый цвет, зажигается при остановке диска.  В
       это время диск остановлен, головки убраны и можно снимать кассету.

  "ЗАЩИТА"
     - индикатор желтого цвета показывает, что  устройство  управления  будет
       игнорировать операцию "ЗАПИСЬ информации на диск" и  выставлять  соот-
       ветствующий признак. Для того, чтобы разрешить запись на  диск,  нужно
       нажать на индикатор и он погаснет.

  "НЕИСПРАВНО"
     - индикатор красного цвета, который загорается при возникновении  неисп-
       равности в накопителе. Если после  нажатия  на  кнопку  индикатора  он
       загорается вновь,  накопитель  необходимо  выключить  и  обратиться  к
       начальнику машинного зала.

       Вспомним также, что в каждом накопителе встроен несъемный диск. При этом
  внутренние диски имеют четные номера, а съсемные,  которые  мы  поставили,  -
  нечетные. Таким образом, посмотрим с какой конфигурацией мы работаем:
       - RK0: - встроенный диск (нам использовать не разрешено);
       - RK1: - съемный диск с эталоном операционной системы;
       - RK2: - встроенный диск (нам использовать не разрешено);
       - RK3: - съемный диск, чистый, с которым мы будем работать.
       - DX0:, DX1: - гибкие диски, которые мы будем использовать для  переноса
  программ на ДВК.
       Обычно встроенные диски используют в качестве рабочих,  не  оставляя  на
  них нужную информацию после работы. Мы ограничим себя, потому что нам  доста-
  точно пока двух дисков.
       - Не теряя времени, загрузим систему,- сказал Алеша.
       Однако, набрав вслед за "$" название привода "RK1:", он в очередной  раз
  потерпел неудачу.
       - Опять вспоминать историю?- спрашивает Алеша.
       - Да!
       А если так, то история нам подсказывает,  что  на  заре  развития  машин
  PDP-11 жесткие диски типа IBM-5440 (или RK05, как они назывались у фирмы DEC)
  были единственными внешними запоминающими устройствами,  на  которых  система
  могла базироваться. Тогда имя устройства также могло быть "Device Keep" - раз
  других устройств нет, то единственное будет находиться в известном положении.
  И кроме того, тогда имя устройства не включало в себя двоеточие.
       Поэтому наберем в ответ на приглашение:

  +---------------
  !  $DK1<ВК>
  !

       И первая неожиданность. Система не жалуется на отсутствие какого-то фай-
  ла, а сказав какую-то непонятную фразу, вдруг начала рассказывать о себе:


                                     - 140 -
           RT-11, A step by step                    DUP   14-Nov-92


     RT-11SJ  V5.1B (S)
   .SET TT QUIET


                             RT-11 V5.1
                             ----------

       Installation of RT-11 version 5.1 is complete and you are now
  executing  from  the  working  volume  (provided you have used the
  automatic  installation  procedure).  Digital recomends you verify
  the  correct  operation   of  your  system's  software  using  the
  verification procedure. To do this, enter the command:

                             IND VERIFY

       Note that verify  should  be performed only after the distri-
  bution  media have  been backed up.  This was accomplished as part
  of  automatic  installation  on  all  RL02,  RLX02  and RX50 based
  systems,   including  the micro/PDP-11  and  the Professional 300.
  If  you  have  not  completed  automatic  installation,  you  must
  perform  a  manual  backup  before using VERIFY. Note also, VERIFY
  is  not  supported  on  RX01  diskettes,  DECtape I or II,  or the
  Professional 325.

       После красивой картинки ненавязчивая просьба ввести дату сразу подсказы-
  вает и формат ввода:

  +---------------
  !  Date [dd-mmm-yy]?
  !  -----------------

  Однако попробуем обмануть систему, проигнорируем ее просьбу и  просто  нажмем
  <ВК>. Наша увертка не удалась. Система настойчиво просит ввести дату:

  +---------------
  !  Error entering date -
  !  ---------------------
  !  Please enter the date
  !  ---------------------
  !  Date [dd-mmm-yy]? 23-SEP-86<ВК>
  !  ------------------

  Введя правильную дату, мы читаем на экране следующую подсказку:

  +---------------
  !  Time [hh:mm:ss]? 9:10:00<ВК>
  !  -----------------
  !  Startup file [filnam.typ]? <ВК>
  !  ---------------------------

  Опять система просит имя какого-то  файла.  Если  мы  правильно  перевели  ее
  просьбу, то это стартовый файл. Что он должен содержать и где его  взять,  мы
  не знаем. Поэтому опять попробуем его проигнорировать, нажав <ВК>. Система не
  стала ругаться, а продолжила свой рассказ:


                                     - 141 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  RT-11 Single Job monitor,  Volume ID   BC-P727B-BC
  !  Booted on 23-Sep-86 at 09:11:12 from file RK1:RT11SJ.SYS
  !  @<EOF>
  !  .^
  !

       Это сообщение уже более подробно, чем мы видели раньше.  Мы  можем  убе-
  диться не только в том, что в нашем распоряжении однозадачный монитор,  но  и
  узнать идентификатор тома, с которого он загружен. Для  пущей  убедительности
  система подтверждает дату и время загрузки, а также имя файла монитора и  где
  он находится.
       Такое обилие информации, что даже закружилась голова,- сказал Алеша.
       - Но уймем наши восторги,- говорю я,- и начнем работать. Первое, что нам
  необходимо, - это отформатировать наш диск. В той системе, которую мы собира-
  ли в начале нашей работы, такой программы не было. Поэтому посмотрим,  что  у
  нас есть в эталонной системе. Как это сделать, мы уже знаем.

  +---------------
  !  .DIR/FULL/BLOCK/VOL SY:<ВК>
  !
  !   26-Sep-86
  !   Volume ID: BC-P727B-BC
  !   Owner    : RT-11 V5.1B
   SWAP  .SYS    26P 13-Jan-84        RT11AI.SYS    75P 13-Jan-84
   RT11PI.SYS    89P 13-Jan-84        RT11SJ.SYS    73P 13-Jan-84
   RT11FB.SYS    87P 13-Jan-84        RT11XM.SYS    99P 13-Jan-84
   RT11BL.SYS    73P 13-Jan-84        TT    .SYS     2P 13-Jan-84
   LD    .SYS     8P 13-Jan-84        DX    .SYS     4P 13-Jan-84
   DY    .SYS     4P 13-Jan-84        DD    .SYS     5P 13-Jan-84
   PD    .SYS     3P 13-Jan-84        VM    .SYS     3P 13-Jan-84
   DZ    .SYS     4P 13-Jan-84        DW    .SYS     5P 13-Jan-84
   SP    .SYS     6P 13-Jan-84        XL    .SYS     4P 13-Jan-84
   DT    .SYS     3P 13-Jan-84        XC    .SYS     4P 13-Jan-84
   RF    .SYS     3P 13-Jan-84        DS    .SYS     3P 13-Jan-84
   RK    .SYS     3P 13-Jan-84        DL    .SYS     4P 13-Jan-84
   DU    .SYS     4P 13-Jan-84        DP    .SYS     3P 13-Jan-84
   DM    .SYS     5P 13-Jan-84        MT    .SYS     9P 13-Jan-84
   MM    .SYS     9P 13-Jan-84        MS    .SYS    10P 13-Jan-84
   CT    .SYS     6P 13-Jan-84        LP    .SYS     2P 13-Jan-84
   LS    .SYS     3P 13-Jan-84        PC    .SYS     2P 13-Jan-84
   CR    .SYS     3P 13-Jan-84        NL    .SYS     2P 13-Jan-84
   SL    .SYS    14P 13-Jan-84        PI    .SYS    56P 13-Jan-84
   LDX   .SYS     8P 13-Jan-84        DXX   .SYS     4P 13-Jan-84
   DYX   .SYS     4P 13-Jan-84        DDX   .SYS     5P 13-Jan-84
   VMX   .SYS     2P 13-Jan-84        DZX   .SYS     4P 13-Jan-84
   DWX   .SYS     5P 13-Jan-84        SPX   .SYS     6P 13-Jan-84
   XLX   .SYS     4P 13-Jan-84        XCX   .SYS     4P 13-Jan-84
   RKX   .SYS     3P 13-Jan-84        DLX   .SYS     5P 13-Jan-84
   DUX   .SYS     4P 13-Jan-84        DMX   .SYS     5P 13-Jan-84
   MTX   .SYS     9P 13-Jan-84        MMX   .SYS    10P 13-Jan-84
   MSX   .SYS    11P 13-Jan-84        LPX   .SYS     2P 13-Jan-84
   LSX   .SYS     3P 13-Jan-84        NLX   .SYS     2P 13-Jan-84
   SLX   .SYS    16P 13-Jan-84        PIX   .SYS    63P 13-Jan-84
   SLMIN .SYS    12P 13-Jan-84        IND   .SAV    51P 13-Jan-84
   BUP   .SAV    37P 13-Jan-84        PAT   .SAV    10P 13-Jan-84
   PIP   .SAV    30P 13-Jan-84        DUP   .SAV    45P 13-Jan-84
   DIR   .SAV    19P 13-Jan-84        SLP   .SAV    13P 13-Jan-84
   LET   .SAV     5P 13-Jan-84        UCL   .SAV    13P 13-Jan-84


                                     - 142 -
           RT-11, A step by step                    DUP   14-Nov-92


   KED   .SAV    59P 13-Jan-84        K52   .SAV    55P 13-Jan-84
   KEX   .SAV    54P 13-Jan-84        LINK  .SAV    49P 13-Jan-84
   LIBR  .SAV    24P 13-Jan-84        CREF  .SAV     6P 13-Jan-84
   HELP  .SAV   136P 13-Jan-84        MDUP  .SAV    19P 13-Jan-84
   SIPP  .SAV    21P 13-Jan-84        DUMP  .SAV     8P 13-Jan-84
   EDIT  .SAV    19P 13-Jan-84        MACRO .SAV    60P 13-Jan-84
   BATCH .SAV    26P 13-Jan-84        FILEX .SAV    22P 13-Jan-84
   SPEED .SAV     4P 13-Jan-84        SETUP .SAV    29P 13-Jan-84
   SPLIT .SAV     3P 13-Jan-84        VTCOM .SAV    23P 13-Jan-84
   FORMAT.SAV    23P 13-Jan-84        RESORC.SAV    22P 13-Jan-84
   QUEMAN.SAV    15P 13-Jan-84        SRCCOM.SAV    26P 13-Jan-84
   BINCOM.SAV    24P 13-Jan-84        DATIME.SAV     4P 13-Jan-84
   TERMID.SAV     3P 13-Jan-84        ERROUT.SAV    18P 13-Jan-84
   TRANSF.SAV    16P 13-Jan-84        CONFIG.SAV     2P 13-Jan-84
   QUEUE .REL    14P 13-Jan-84        RTMON .REL     8P 13-Jan-84
   SPOOL .REL    11P 13-Jan-84        VTCOM .REL    25P 13-Jan-84
   STARTS.COM     1P 13-Jan-84        STARTF.COM     4P 13-Jan-84
   STARTX.COM     8P 13-Jan-84        STARTA.COM    54P 13-Jan-84
   DATIME.COM     3P 13-Jan-84        DISMT1.COM    13P 13-Jan-84
   DISMT2.COM     8P 13-Jan-84        SYSGEN.COM   206P 13-Jan-84
   IVP   .COM    16P 13-Jan-84        VERIFY.COM     3P 13-Jan-84
   CONFIG.COM    28P 13-Jan-84        SYSLIB.OBJ    47P 13-Jan-84
   ODT   .OBJ     8P 13-Jan-84        VDT   .OBJ     8P 13-Jan-84
   VTHDLR.OBJ     8P 13-Jan-84        ERROUT.OBJ    15P 13-Jan-84
   SYSMAC.SML    49P 13-Jan-84        RTBL  .MAP    20P 13-Jan-84
   RTSJ  .MAP    20P 13-Jan-84        RTFB  .MAP    28P 13-Jan-84
   RTXM  .MAP    31P 13-Jan-84        MBOOT .BOT     1P 13-Jan-84
   MBOT16.BOT     1P 13-Jan-84        MSBOOT.BOT     3P 13-Jan-84
   VBGEXE.SAV    16P 13-Jan-84        VTMAC .MAC     7P 13-Jan-84
   GETSTR.FOR     2P 13-Jan-84        PUTSTR.FOR     2P 13-Jan-84
   DEMOBG.MAC     2P 13-Jan-84        DEMOFG.MAC     3P 13-Jan-84
   DEMOX1.MAC     3P 13-Jan-84        DEMOF1.FOR     2P 13-Jan-84
   DEMOED.TXT     1P 13-Jan-84        V5USER.TXT     3P 13-Jan-84
   SJ    .MAC     1P 13-Jan-84        FB    .MAC     1P 13-Jan-84
   XM    .MAC     1P 13-Jan-84        CONSOL.MAC     6P 13-Jan-84
   SAMPLE.KED     4P 13-Jan-84        SJFB  .ANS     9P 13-Jan-84
   BL    .ANS     8P 13-Jan-84        XM    .ANS     8P 13-Jan-84
   TRMTBL.MAC    19P 13-Jan-84        V5NOTE.TXT    30P 13-Jan-84
   UNSUP .TXT    26P 13-Jan-84        CUSTOM.TXT    11P 13-Jan-84
   IVP   .MAC    25P 13-Jan-84        EDTGBL.MAC    32P 13-Jan-84
   BSTRAP.MAC    66P 13-Jan-84        KMON  .MAC   120P 13-Jan-84
   KMOVLY.MAC   205P 13-Jan-84        USR   .MAC    66P 13-Jan-84
   RMONSJ.MAC    70P 13-Jan-84        RMONFB.MAC   146P 13-Jan-84
   XMSUBS.MAC    34P 13-Jan-84        MTTEMT.MAC    18P 13-Jan-84
   MTTINT.MAC    46P 13-Jan-84        VM    .MAC    17P 13-Jan-84
   CR    .MAC    15P 13-Jan-84        CT    .MAC    33P 13-Jan-84
   DD    .MAC    26P 13-Jan-84        DL    .MAC    26P 13-Jan-84
   DU    .MAC    31P 13-Jan-84        DM    .MAC    26P 13-Jan-84
   DP    .MAC    11P 13-Jan-84        DS    .MAC    10P 13-Jan-84
   DT    .MAC     9P 13-Jan-84        DX    .MAC    21P 13-Jan-84
   DY    .MAC    23P 13-Jan-84        BA    .MAC    20P 13-Jan-84
   LP    .MAC     9P 13-Jan-84        LS    .MAC    19P 13-Jan-84
   TJ    .MAC    31P 13-Jan-84        TM    .MAC    26P 13-Jan-84
   TS    .MAC    33P 13-Jan-84        NL    .MAC     3P 13-Jan-84
   PC    .MAC     5P 13-Jan-84        PD    .MAC    12P 13-Jan-84
   RF    .MAC     7P 13-Jan-84        RK    .MAC    11P 13-Jan-84
   TT    .MAC     7P 13-Jan-84        DZ    .MAC    17P 13-Jan-84
   DW    .MAC    26P 13-Jan-84        LD    .MAC    45P 13-Jan-84
   XL    .MAC    27P 13-Jan-84        XC    .MAC     1P 13-Jan-84


                                     - 143 -
           RT-11, A step by step                    DUP   14-Nov-92


   SP    .MAC    41P 13-Jan-84        FSM   .MAC    32P 13-Jan-84
   EL    .MAC    16P 13-Jan-84        ELCOPY.MAC    15P 13-Jan-84
   ELINIT.MAC    16P 13-Jan-84        ELTASK.MAC     9P 13-Jan-84
   ERRTXT.MAC     6P 13-Jan-84        MDUP  .MT     56P 13-Jan-84
   MDUP  .MS     56P 13-Jan-84        MDUP  .MM     56P 13-Jan-84
   < UNUSED >   376
    198 Files, 4386 Blocks
    376 Free blocks

       А также, для интереса, суммарную структуру каталога.

  +---------------
  !   26-Sep-86
  !
  !     37 Files in segment 1
  !
  !     37 Files in segment 2
  !
  !     37 Files in segment 3
  !
  !     37 Files in segment 4
  !
  !     50 Files in segment 5
  !
  !     16 Available segments, 5 in use
  !
  !   198 Files, 4386 Blocks
  !   376 Free blocks
  !

  Увидев в каталоге программу FORMAT.SAV, вспоминаем, как мы работали  с  прог-
  раммой DUMP, и идем по проторенной дорожке.






       7.1. Форматирование дисков



       Нетрудно догадаться, что форматирование дисков можно производить  только
  на тех устройствах, которые предоставляют эту возможность со стороны  аппара-
  туры. Для устройств  фирмы  DEC  это  могут  быть  RX02,  RK05,  RP02-RP03  и
  RK06-RK07. При этом дискеты одинарной плотности диаметром 203мм можно  форма-
  тировать на устройстве RX02.
       В отечественной практике мы можем встретиться  с  накопителями  СМ-5400,
  которые соответствуют устройствам RK05, и ЕС-5061, которые соответствуют уст-
  ройствам RP03. Гибкие дискеты диаметром 203мм можно форматировать с одинарной
  плотностью на накопителях СМ-5605, которые подключаются к ЭВМ СМ-4,  СМ-1420.
  Дискеты диаметром 133мм,  которые  используются  в  накопителях  НГМД-6022  и
  НГМД-6121А, можно форматировать с использованием программы  MXTST.SAV  (и  ей
  подобных) на ДВК-2, ДВК-3,  ДВК-4.  При  этом  дискеты,  отформатированные  с
  помощью контроллера MY, входящего в состав ДВК-4, оказываются совместимыми  с
  накопителями и форматами записи в "Электронике-85". Но так как  MXTST.SAV  не
  входит в состав RT-11 и имеет подробное меню команд на русском языке,  то  мы
  ее рассматривать не будем.
       Убедившись, что на RK3: стоит диск, предназначенный  для  работы,  дадим


                                     - 144 -
           RT-11, A step by step                    DUP   14-Nov-92


  команду FORMAT с указанием имени и номера устройства, диск на  котором  нужно
  отформатировать:

  +---------------
  !  .FORMAT RK3:<ВК>
  !

  В ответ система заботливо спросила: "Вы уверены?"

  +---------------
  !  .FORMAT RK3:
  !  -
  !  RK3:/FORMAT - Are you sure? Y<ВК>
  !  ----------------------------
  !  Volume contans protected files; Are you sure? Y<ВК>
  !  ----------------------------------------------
  !  ?FORMAT-W-Is WRITE locked. Continue? (Y/N)
  !  -------------------------------------
  !

       - Это же надо,- сказал Алеша.- Мы совсем забыли про защиту записи.  Наж-
  мем на желтый индикатор с надписью "ЗАЩИТА" и, если он погаснет (как  у  всех
  исправных дисков), то ответим программе FORMAT, что можно продолжать.

  +---------------
  !  ?FORMAT-W-Is WRITE locked. Continue?(Y/N) Y<ВК>
  !  ------------------------------------------
  !  ?FORMAT-I-Formating complete
  !  ----------------------------
  !  .^
  !  -
  !

       Вот какой заботливый диалог вела с нами система. Оказывается,  на  диске
  были какие-то защищенные файлы, про которые  мы  могли  забыть.  И  последнее
  сообщение говорит о том, что программа FORMAT завершила свою работу.
       Следует отметить общее правило в RT-11. Всегда, когда  есть  вероятность
  ошибочно уничтожить или испортить информацию на  томе  (или  вообще  нарушить
  правильность работы  системы),  система  будет  спрашивать  подтверждение  на
  выполнение указанной операции. Однако если мы настолько уверены в себе  (что,
  правда, бывает редко), что нам  не  нужны  вопросы,  мы  их  можем  отменить,
  используя ключ "/NOQUERY" - не спрашивать.
       - Но она сказала только о том,-  неудовлетворенно  заметил  Алеша,-  что
  форматирование завершено. А мне хотелось  бы  узнать,  насколько  хорошо  оно
  выполнилось. Да и, наверное, этой же программой можно без форматирования про-
  верить качество разметки на диске или дискете. Английское слово VERIFY - про-
  верять будет помогать нам  в  большинстве  случаев.  Знакомое  слово  ONLY  -
  только,- которое мы применяли в качестве параметра, может пригодиться  нам  и
  здесь. Поэтому не замедлим сделать эту проверку.


                                     - 145 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .FORMAT/VERIFY:ONLY RK3:<ВК>
  !  -
  !  RK3:/VERIFY - Are you sure? Y<ВК>
  !  ----------------------------
  !  Pattern #8
  !  ----------
  !  ?FORMAT-I-Verification complete
  !  -------------------------------
  !  .^
  !  -
  !

       Все бы было хорошо, если бы в этом диалоге не появилось слово PATTERN  -
  образец,- говорит Алеша.- Придется опять думать. Это сообщение появилось  при
  проверке - значит, для проверки на  диск  записывалось  некоторое  образцовое
  число, которое система знает под номером #8. Для того чтобы узнать,  что  это
  за число, воспользуемся самым сильным нашим приемом.

  +---------------
  !  .DUMP/TERMINAL RK3:<ВК>
  !
   RK3:
   BLOCK NUMBER  00000
   000/ 104210 1042 . . 210 104210 104210 104210 *................*
   020/ 104210 1042 . . 210 104210 104210 104210 *................*
   040/ 104210 1042 . . 210 104210 104210 104210 *................*
   060/ 104210 1042 . . 210 104210 104210 104210 *................*
   100/ 104210 1042 . . 210 104210 104210 104210 *................*
   120/ 104210 1042 . . 210 104210 104210 104210 *................*
   140/ 104210 1042 . . 210 104210 104210 104210 *................*
   160/ 104210 1042 . . 210 104210 104210 104210 *................*
   200/ 104210 1042 . . 210 104210 104210 104210 *................*
   220/ 104210 1042 . . 210 104210 104210 104210 *................*
   240/ 104210 1042 . . 210 104210 104210 104210 *................*
   260/ 104210 1042 . . 210 104210 104210 104210 *................*
   300/ 104210 1042 . . 210 104210 104210 104210 *................*
   320/ 104210 1042 . . 210 104210 104210 104210 *................*
   340/ 104210 1042 . . 210 104210 104210 104210 *................*
   360/ 104210 1042 . . 210 104210 104210 104210 *................*
   400/ 104210 1042 . . 210 104210 104210 104210 *................*
   420/ 104210 1042 . . 210 104210 104210 104210 *................*
   440/ 104210 1042 . . 210 104210 104210 104210 *................*
   ^C^C
   .^

  Увидев на экране, что на диске записана однородная информация  в  виде  чисел
  104210, мы с помощью клавиш CTRL/C можем прервать работу  программы  DUMP.  И
  так как диск еще пустой, то мы можем поиграть.
       Алеша уже совсем увлекся исследованием и  действует  самостоятельно,  не
  обращая на нас внимания.
       - Используем слово PATTERN в качестве ключа,- комментирует свои действия
  Алеша,- а номер образца, в качестве параметрае и  посмотрим,  сколько  у  нас
  образцов и какие им числа соответствуют.
       Итак, считая, что восьмой образец является не первым, попробуем  узнать,
  что представляет собой седьмой образец.


                                     - 146 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .FORMAT/VERIFY:ONLY/PATTERN:7 RK3:<ВК>
  !  -
  !  RK3:/VERIFY - Are you sure? Y<ВК>
  !  ----------------------------
  !  Pattern #1
  !  ----------
  !  Pattern #2
  !  ----------
  !  Pattern #3
  !  ----------
  !  ?FORMAT-I-Verification complete
  !  -------------------------------
  !  .^
  !

       Что-то здесь не так. Мы просили образец седьмой, а получили  сразу  три.
  Значит, в качестве образца указывается не номер образца,  а  какое-то  другое
  число. Тогда возьмем число с потолка и попробуем снова.

  +---------------
  !  .FORMAT/VERIFY:ONLY/PATTERN:25 RK3:<ВК>
  !  -
  !  RK3:/VERIFY - Are you sure? Y<ВК>
  !  ----------------------------
  !  Pattern #1
  !  ----------
  !  Pattern #3
  !  ----------
  !  Pattern #5
  !  ----------
  !  ?FORMAT-I-Verification complete
  !  -------------------------------
  !  .^
  !

       Это уже становится интересно, и, попробовав  еще  одно  случайное  число
  255, мы получаем информацию, достаточную для анализа и  построения  гипотезы.
  Для начала попробуем найти зависимость между числами, которые мы  вводили,  и
  номерами образцов, которые программа использовала для верификации. Для  полу-
  чения более полной информации объединим в общей таблице-рисунке вводимые нами
  числа в двоичной и восьмеричной системе, а также перечень образцов, о которых
  сообщала программа FORMAT.


                                     - 147 -
           RT-11, A step by step                    DUP   14-Nov-92


                                +------------  #9
                                !+-----------  #8
                 #10 ---------+ !!+----------  #7
                 #11 --------+! !!! +--------  #6
                 #12 -------+!! !!! !+-------  #5
                 #13 -----+ !!! !!! !!+------  #4
                 #14 ----+! !!! !!! !!! +----  #3
                 #15 ---+!! !!! !!! !!! !+---  #2
                 #16 -+ !!! !!! !!! !!! !!+--  #1
                      ! !!! !!! !!! !!! !!!
                   7  0.000.000.000.000.111    #1, #2, #3

                  25  0.000.000.000.010.101    #1, #3, #5

                 255  0.000.000.010.101.101    #1, #3, #4, #6, #8

       Из такой таблицы видно, что вводимое нами число представляет собой  мас-
  ку, в которой установленные биты указывают на номер образца для  верификации.
  При этом номер образца есть номер установленного бита,  а  вводимое  число  -
  восьмеричный эквивалент двоичной маски.
       Теперь можно исследовать, какие числа используются в качестве  образцов.
  Для этого мы в качестве параметра для ключа /PATTERN будем вводить последова-
  тельно числа 1, 2, 4, 10, 20, 40, 100, 200, 400, 1000, 2000  (в  восьмеричной
  форме). Получившиеся результаты запишем в таблицу.

                    +--------------------------------------------+
                    !    Образец    !   16-ти битный образец     !
                    ! номер   маска !                            !
                    !---------------+----------------------------!
                    !               !                            !
                    !  #1       1   ! 000000 => 0000000000000000 !
                    !               !                            !
                    !  #2       2   ! 111111 => 1001001001001001 !
                    !               !                            !
                    !  #3       4   ! 063146 => 0110011001100110 !
                    !               !                            !
                    !  #4      10   ! 125252 => 1010101010101010 !
                    !               !                            !
                    !  #5      20   ! 052525 => 0101010101010101 !
                    !               !                            !
                    !  #6      40   ! 007417 => 0000111100001111 !
                    !               !                            !
                    !  #7     100   ! 021042 => 0010001000100010 !
                    !               !                            !
                    !  #8     200   ! 104210 => 1000100010001000 !
                    !               !                            !
                    !  #9     400   ! 155555 => 1101101101101101 !
                    !               !                            !
                    !  #10   1000   ! 145454 => 1100101100101100 !
                    !               !                            !
                    !  #11   2000   ! 146314 => 1100110011001100 !
                    !               !                            !
                    +--------------------------------------------+

       Если мы таким образом разложим образцы по битам, то увидим в них опреде-
  ленные закономерности.
       - Да, Алеша,- говорю я,- тебя уже можно  брать  в  разведчики.  Осталось
  сказать, что означает полученная таблица. Эти магические числа  позволяют  не
  только проверить разметку на диске или дискете, но и узнать, есть ли  замыка-


                                     - 148 -
           RT-11, A step by step                    DUP   14-Nov-92


  ния или обрывы в устройстве  управления.  Остальные  разряды  зарезервированы
  фирмой DEC для будущего использования. При их указании проверка происходит  с
  помощью образца #8. А для того чтобы сделать проверку с несколькими  образца-
  ми, достаточно в качестве аргумента для ключа /PATTERN  взять  арифметическую
  сумму масок (не забывая,  что  числа  восьмеричные),  соответствующих  нужным
  номерам образцов.
       - А если у нас одно устройство?- спрашивает Алеша.-  Как  же  нам  тогда
  отформатировать диск, если на этом же устройстве  установлен  эталонный  том?
  Вот если бы система могла подождать, пока мы снимем эталонный том и  поставим
  свободный.
       - Это нетрудно сделать,- отвечаю я,- достаточно попросить ее  подождать,
  используя ключ /WAIT - ждать, и дальше действовать по ее указаниям.

  +---------------
  !  .FORMAT/WAIT RK3:<ВК>
  !  -
  !  RK3:/FORMAT - Are you sure? Y<ВК>
  !  ----------------------------
  !  Insert volume you wish to format. Continue (Y/N)? Y<ВК>
  !  --------------------------------------------------
  !  ?FORMAT-I-Formating complete
  !  ----------------------------
  !  Replace original volume. Continue (Y/N)? Y<ВК>
  !  -----------------------------------------
  !  .^
  !

       После того как система попросила нас поставить том  для  форматирования,
  можно останавливать двигатель накопителя и менять диск. После замены диска  и
  зажигания индикатора "ГОТОВО", мы должны сказать системе, что  можно  продол-
  жать работу. Окончив форматирование, система просит вернуть на  место  ориги-
  нальный том. И опять после завершения всех  перестановок  мы  должны  сказать
  системе, что можно продолжать.

       Несколько сложнее форматировать диск-пакеты. Программа FORMAT поведет  с
  нами заботливый диалог, задавая некоторые вопросы, к которым нужно быть гото-
  вым.
       А диалог, например, может быть такой:

  +---------------
  !  .FORMAT DP1:<ВК>
  !  -
  !  Set format switch to ENABLE. Continue (Y/N)?
  !  ---------------------------------------------
  !

  Первая неожиданность. Что это за ключ форматирования, который  нужно  устано-
  вить в состояние "РАЗРЕШЕНО"? И пока программа FORMAT ждет нашего ответа  для
  продолжения своей работы, разберемся с этим вопросом.
       Хорошо тем, кто работает на ЭВМ ряда "Электроника" или хотя бы  с  конт-
  роллером ИЗОТ-1006С, который с ними обычно поставляется. Им достаточно загля-
  нуть машине за спину, и на задней стенке контроллера они увидят  этот  злопо-
  лучный ключ, а точнее, тумблер, который имеет два положения "ENABLE" и  "NOR-
  MAL", как написано над и под ним. А те, кто использует машины  ряда  СМ  ЭВМ,
  будут долго искать хоть какой-нибудь ключ, пока кто-нибудь из  более  опытных
  не подскажет им. А все очень просто.  Контроллер  СМ-5407  имеет  на  лицевой
  панели 16 переключателей (правда, для того чтобы их увидеть, необходимо снять
  спереди крышку, закрывающую лицевую  панель),  которые  определяют  состояние
  контроллера. Так вот - переключатель, отвечающий за состояние 14  разряда,  и


                                     - 149 -
           RT-11, A step by step                    DUP   14-Nov-92


  есть нужный нам ключ. Если он поднят вверх (т.е. разряд установлен  в  едини-
  цу), то контроллеру разрешено форматировать диски пакета (равносильно  "ENAB-
  LE"), иначе эта операция будет игнорироватся (равносильно "NORMAL").
       И уж если мы нашли ключ, позволяющий нам форматировать, то продолжим наш
  диалог.

  +---------------
  !  Set format switch to ENABLE. Continue (Y/N)? Y<ВК>
  !  ---------------------------------------------
  !  ?FORMAT-I-Formating complete
  !  ----------------------------
  !  Set format switch to NORMAL. Continue (Y/N)? Y<ВК>
  !  ---------------------------------------------
  !  .^
  !

       А по завершению форматирования вернем ключ в нормальное положение и ска-
  жем программе FORMAT, что мы готовы продолжать.

       И наконец, если бы у нас были накопители типа RX02, то программа  FORMAT
  могла бы нам на нем отформатировать дискеты диаметром 203мм с одинарной плот-
  ностью. Для этого мы должны были бы указать ключ /SINGLEDENSITY  -  одинарная
  плотность.

       И чтобы завершить разговоры о программе FORMAT, сразу приведем  сокраще-
  ния ключей KMON и однобуквенные ключи для CSI.

  +-------------------------------------------------------+
  !   Ключ              !    Сокращение   !    Ключ       !
  !                     !    для   KMON   !    CSI        !
  !-------------------------------------------------------!
  !     WAIT                     W              W         !
  !     VERIFY                   VE             V:VAL     !
  !     SINGLEDENSITY            S              S         !
  !     PATTERN                  P              P:VAL     !
  !     NOQUERY                  NOQ            Y         !
  !                                                       !






       7.2. Инициализация файловой системы



       Итак, мы подготовили диск к работе,- спрашиваю я,- и  что  будем  делать
  дальше?
       - А чтобы работать с ним дальше,- говорит Алеша,- необходимо создать  на
  нем каталог, структуру которого мы уже обсуждали, или, как говорят, инициали-
  зировать файловую систему на томе. Команда INITIALIZE, которую даже  не  надо
  переводить на русский язык, потому что мы уже с десяток раз ее  назвали,  нам
  очень подойдет.


                                     - 150 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .INITIALIZE RK3:<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  .^
  !

       Система поставила точку и больше ничего не  сказала.  Поэтому  проверять
  результат наших действий мы будем с помощью команд DIREKTORY и DUMP.

  +---------------
  !  .DIR/FU/BL/VOL RK3:<ВК>
  !  -

       Увидев на экране распечатку чистого каталога

  !   23-Sep-86
  !   Volume ID: RT11A
  !   Owner    :
  !  < UNUSED >   4762              38
  !   0 Files, 0 Blocks
  !   4762 Free blocks
  !

  мы сразу обращаем внимание, что свободная область располагается с 38-го  бло-
  ка. Помня, что мы можем посмотреть структуру каталога для получения  дополни-
  тельной информации, не замедлим это сделать.

  +---------------
  !   23-Sep-86
  !
  !       0 Files in segment 1
  !
  !      16 Available segments, 1 in use
  !
  !   0 Files, 0 Blocks
  !   4762 Free blocks
  !

       - Размер каталога увеличился за счет дополнительных сегментов,-  говорит
  Алеша.- А почему бы нам не сделать каталог другого размера, ну, скажем,  в  2
  сегмента? Как это сделать дагадаться нетрудно:

  +---------------
  !  .INITIALIZE/SEGMENTS:2 RK3:<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  .^
  !


                                     - 151 -
           RT-11, A step by step                    DUP   14-Nov-92


       И опять проверим и убедимся, что мы были правы.

  +---------------
  !   23-Sep-86
  !   Volume ID: RT11A
  !   Owner    :
  !  < UNUSED >   4790               10
  !   0 Files, 0 Blocks
  !   4790 Free blocks
  !
     И суммарную структуру каталога

  +---------------
  !   23-Sep-86
  !
  !       0 Files in segment 1
  !
  !       2 Available segments, 1 in use
  !
  !    0 Files, 0 Blocks
  !    4790 Free blocks
  !

       Помня все, что мы говорили о плохих блоках, хотелось бы при  инициализа-
  ции проверить на плохие блоки наш диск.

  +---------------
  !  .INITIALIZE/BADBLOCKS RK3:<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  ?DUP-W-No BAD blocks detected
  !  -----------------------------
  !  .^
  !

       - Уже по сообщениям ты видишь, что инициализацией  файловой  системы  на
  диске занимается программа DUP,- говорю я.- С ее помощью можно  также  прове-
  рить качество носителя. Если программа DUP обнаружит на диске  плохие  блоки,
  то занесет в каталог запись о том, что в  этом  месте  диска  находится  файл
  FILE.BAD (BAD - плохой). Это единственный случай, когда в каталоге могут поя-
  виться несколько записей о файлах с одинаковым именем и типом. Файлы с  типом
  .BAD система не обрабатывает - т.е. не копирует, не удаляет, не перемещает их
  по диску при сборке свободных областей в одну большую. Поэтому если пользова-
  тель по каким-либо причинам не хочет, чтобы его файл  перемещался  на  другое
  место на диске, или заметил, что при обращении к какому-нибудь файлу происхо-
  дят ошибки, то он может сам переименовать его в файл с типом .BAD.

       Мы научились выполнять простейшие операции над  каталогом,  и  здесь  мы
  немного задержимся. В пятой главе мы говорили, что число слов в записи о фай-
  ле в каталоге также можно изменять по нашему  желанию.  Однако  так  как  это
  делается редко, то KMON такую возможность  не  поддерживает.  Мы  знаем,  что
  каталог обслуживает программа DUP, и должны загрузить ее командой.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  *^
  !



                                     - 152 -
           RT-11, A step by step                    DUP   14-Nov-92


  Теперь нужно догадаться, что раз у нас на диске нет  ни  одного  файла  и  мы
  хотим работать только с устройством (точнее с его каталогом), то вся специфи-
  кация будет состоять из имени устройства.
       Труднее догадаться, что раз мы инициализируем файловую систему на  томе,
  т.е. обнуляем ее, то в качестве ключа может выступать символ Z (ZERO - нуль).
  Хотя это замечание выполняется не для всех программ. И тогда командами

  +---------------
  !  .RUN SY:DUP<ВК>
  !  *RK3:/Z<ВК>
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !
  !  *^C
  !
  !  .^
  !

  можно проинициализировать устройство RK3:.
       Но, чтобы указать число дополнительных слов в записи о файле, нужно  его
  записать в качестве параметра для ключа /Z, как показано ниже.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z:3<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  *^C
  !  -
  !  .^
  !
       Для указания количества сегментов, отводимых под каталог,  нужно  посту-
  пать так же, но использовать при этом ключ /N. Поэтому пример с двумя сегмен-
  тами, который мы приводили для KMON, может быть выполнен так:

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z/N:2<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  *^C
  !  -
  !  .^
  !  -
       Проверка на плохие блоки в таком исполнении не будет отличаться разнооб-
  разием, и наш пример продемонстрирует только новый ключ:


                                     - 153 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z/B<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  ?DUP-W-No BAD blocks detected
  !  -----------------------------
  !  *^C
  !  -
  !  .^
  !  -

  поэтому можно продолжать разговор о плохих блоках.

       - Да, но мы говорили о форматировании,- говорит Алеша,- о том, что поло-
  жение головок на разных устройствах может не совпадать. Как же быть, если при
  работе необходимо переносить том с одного устройства на другое? Вот  если  бы
  мы могли инициализировать каталог на втором устройстве, вспомнив при этом про
  плохие блоки на первом устройстве. Т.е. при записи  в  каталог  информации  о
  новых плохих блоках сохранить старые записи FILE.BAD.
       - Алеша,- советую я,- у тебя же есть самая хорошая  документация  -  это
  англо-русский словарь.
       - Да, и я уже нашел подходящее английское слово,- говорит Алеша,-  имею-
  щее значение: сохранять,  вспоминать,  удерживать,  мы  быстро  найдем  слово
  RETAIN и используем его в качестве параметра для ключа /BADBLOCKS.

  +---------------
  !  .INITIALIZE/BADBLOCKS:RETAIN RK3:<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  ?DUP-W-No BAD blocks detected
  !  -----------------------------
  !  .^
  !  -

       Но оказывается, что разговор о плохих блоках не окончен.  Жесткие  диски
  фирмы DEC RK06, RK07, RL01, RL02, отечественных аналогов  которым  пока  нет,
  позволяют заменять испорченные блоки на диске новыми. Для этого служат запас-
  ные дорожки на диске. При этом работая с дисками RK06, RK07 можно заменить до
  32 блоков, а с дисками RL01, RL02 до 10 блоков, на новые. RT-11  поддерживает
  эту возможность. При этом таблица перемещений, или,  как  ее  можно  назвать,
  таблица замещения блоков, расположена в начале первого блока на томе.  Именно
  поэтому, когда мы смотрели дамп первого блока, он оказался почти чистым.
       Ключ для операции замены плохих блоков на хорошие  из  запасной  дорожки
  найти довольно просто. Мы уже несколько раз его  называли.  Английское  слово
  REPLACE - замещать будет самым подходящим в этом случае для ключа. И если  бы
  у нас были диски RL02, то мы бы сказали системе

  .INITIALIZE/REPLACE DL0:


                                     - 154 -
           RT-11, A step by step                    DUP   14-Nov-92


  и получили бы, например, такой ответ:

      Block             Type
  030722  12754.     Replaceable
  115046  39462.     Replaceable
  133617  46991.     Replaceable
  136175  48253.     Replaceable
  136277  48319.     Replaceable
  136401  48385.     Replaceable
  140405  49413.     Replaceable
  146252  52394.     Replaceable
  ?DUP-I-Bad blocks detected 8.

  и если таблица замещений переполнена, то система поведет с нами диалог, пока-
  зывая подсказку для каждого замещаемого блока.

  ?DUP-W-Replacement table overflow
  Type <RET>, 0, or nnnnnn (<RET>)
  Replace block #

  Вводя nnnnnn - восьмеричный номер блока, мы указываем какой блок можно  заме-
  нить. После ввода номера блока, система повторяет на экране подсказку Replace
  block # для следующего блока. Если бы мы ввели 0 и не хотим удалять  замещен-
  ный блок, программа DUP заканчивает подсказки и плохие блоки, не  размещенные
  в таблице замещений, помечаются в каталоге записью FILE.BAD.
       Это полезное свойство позволяет пользователю группировать плохие  блоки,
  чтобы заменить их в дальнейшем одной записью FILE.BAD, экономя место в  ката-
  логе.
       Все, что мы говорили об аргументе RETAIN, в  полной  мере  соответствует
  данному случаю.
       Таким образом, разговор о плохих блоках можно было бы и закончить.
       - Нет, останавливает меня Алеша,- из шестой главы мы узнали,  что  диски
  могут портиться со временем и при активной работе. Наверное, есть возможность
  посмотреть, не появились ли плохие блоки на томе. Команда  должна  быть,  по-
  видимому, DIRECTORY, а ключ, уточняющий ее действие, - /BADBLOCKS.  После  ее
  выполнения мы, наверное, увидим номера плохих блоков и их  общее  количество.
  Этой информации достаточно, чтобы определить, какой файл испорчен. Но мы пом-
  ним, что у нас хорошая система, и, наверное, если указать ключ /FILES, то  мы
  увидим имена тех файлов, в которых испорчены блоки. Например вот так:


                                     - 155 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  ! .DIRECTORY/BADBLOCKS/FILES DX1:<ВК>
  !
  !      Block         Type          File         Block
  !  000375    253.  Hard         HELP  .SAV  000004      4.
  !  000400    256.  Hard         HELP  .SAV  000007      7.
  !  000665    437.  Hard         MIMDOC.DOC  000022     18.
  !  000730    472.  Hard         BLE   .SAV  000037     31.
  !  000732    474.  Hard         BLE   .SAV  000041     33.
  !  000733    475.  Hard         BLE   .SAV  000042     34.
  !  000734    476.  Hard         BLE   .SAV  000043     35.
  !  000735    477.  Hard         BLE   .SAV  000044     36.
  !  000736    478.  Hard         BLE   .SAV  000045     37.
  !  000737    479.  Hard         BLE   .SAV  000046     38.
  !  000740    480.  Hard         BLE   .SAV  000047     39.
  !  000741    481.  Hard         BLE   .SAV  000050     40.
  !  000755    493.  Hard         < UNUSED >  000001      1.
  !  ?DUP-W-Bad blocks detected 12.
  !

       На этой картинке мы видим самую полную информацию  о  плохих  блоках  на
  диске,- поясняет Алеша.- Первый столбец показывает абсолютный номер блока  от
  начала диска в восьмеричной системе, который после нескольких попыток не уда-
  лось прочитать. Следующий столбец отображает цифры из предыдущего столбца, но
  уже в десятичной системе счисления. Сделано это потому,  что  программа  DUMP
  показывает номера блоков в восьмеричной, а программа  DIR  (по  умолчанию)  в
  десятичной системе счисления.
       - В столбце, указывающем на тип ошибки, может быть только три  значения.
  Hard - жесткий, если программе DUP не удалось прочитать блок, Soft -  мягкий,
  если при чтении блока ошибка то возникает, то пропадает, и  Replaced  -  если
  блок замещенный.
       В столбце FILE указаны имя и тип  файла,  в  котором  встретился  плохой
  блок. А следующие за ним номера блоков в восьмеричной  и  десятичной  системе
  отсчитываются от начала файла.
       - А как же все это выполнять с помощью программы DUP?- спрашивает Алеша.
       - Для ключа /BADBLOCKS,- отвечаю я,- мы  уже  знаем  однобуквенный  ключ
  CSI, и нам нужно только добавить к нему сокращенный аргумент RETAIN.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z/B:RET<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  ?DUP-W-No BAD blocks detected
  !  -----------------------------
  !  *^C
  !  -
  !  .^
  !

  А для ключа /REPLACE мы должны ключ /B заменить  на  ключ  /R,  сохраняя  все
  остальные действия.
       Для вывода каталога плохих блоков нужно также  вызывать  программу  DUP.
  Ключ /K для этой функции трудно как-нибудь связать с его названием, его нужно
  просто запомнить.


                                     - 156 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  ! .RUN SY:DUP<ВК>
  ! -
  ! *DX1:/K/F<ВК>
  ! -
  !      Block          Type          File         Block
  !  000610    392.  Hard         DOC1  .SAV  000010      8.
  !  000705    453.  Hard         SYSMAC.SML  000033     27.
  !  000725    469.  Hard         F     .SAV  000001      1.
  !  000726    470.  Hard         F     .SAV  000002      2.
  !  000733    475.  Hard         F     .SAV  000007      7.
  !  000734    476.  Hard         F     .SAV  000010      8.
  !  000735    477.  Hard         F     .SAV  000011      9.
  !  000736    478.  Hard         F     .SAV  000012     10.
  !  000741    481.  Hard         F     .SAV  000015     13.
  !  000751    489.  Hard         GG    .TXT  000000      0.
  !  000755    493.  Hard         < UNUSED >  000000      0.
  !  ?DUP-W-Bad blocks detected 11.
  !  *^C
  !
  !  .^
  !

  Хотя второй ключ /FILES прямо связан с его однобуквенным значением.
       - Но сколько же нас можно спрашивать: "Are you sure?" (А ты шура? -  как
  привилось это выражение  у  советских  программистов  в  соответствии  с  его
  произношением),- с раздражением сказал Алеша,- ведь можно как-то сказать сис-
  теме, чтобы она нас не спрашивала. Если мы вспомним работу с программой  FOR-
  MAT, то и в этом случае нужно поступить так же.

  +---------------
  !  .INITIALIZE/NOQUIERY RK1:<ВК>
  !  -
  !  .^
  !

       И правда, система быстренько поставила точку.
       - Но тогда,- говорю я ему,- попробуй поработать на одном устройстве.
       - Это просто,- отвечает Алеша,- если нам необходимо  работать  на  одном
  устройстве или по каким-нибудь причинам менять том на устройстве,  мы  можем,
  так же как при работе с программой FORMAT, использовать ключ /WAIT - ждать.

  +---------------
  !  .INITIALIZE/WAIT RK3:<ВК>
  !  -
  !  ?KMON-F-Not found of volume DUP.SAV
  !  -----------------------------------
  !  .^
  !  -

  Очень странно,- испугался Алеша,- неужели у  нас  испортилась  система?  Файл
  DUP.SAV не найден на томе, значит, первым делом нужно посмотреть каталог сис-
  темного диска.


                                     - 157 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .DIR/FU/BL/VOL SY:<ВК>
  !  -
  !  ?KMON-F-Not found of volume DIR.SAV
  !  -----------------------------------
  !  .^
  !  -

       Действительно, Алеша был наказан за свою самоуверенность, когда  инициа-
  лизировал RK1:, запретив программе DUP запрашивать подтверждение на  выполне-
  ние данной операции. При этом он забыл, что RK1: является не только системным
  диском, но и архивным. (Правда, в действительности при инициализации  систем-
  ного тома программа DUP  обязательно  запросит  подтверждение  на  выполнение
  такой необычной просьбы.) В действительности ему нужно было  проинициализиро-
  вать диск RK3:, но он ошибся, набирая командную строку. А для  того  чтобы  в
  дальнейшем нам доверяли самостоятельную работу, мы должны  сами  восстановить
  уничтоженный архив. Как это сделать?
       Первое, что нужно вспомнить, - это файловую систему. Когда мы с ней  так
  долго разбирались, то обратили внимание, что при инициализации  тома  каталог
  не стирается. Единственным действием инициализации является изменения призна-
  ка состояния первого файла "ПОСТОЯННЫЙ" на признак  "КОНЕЦ  СЕГМЕНТА".  Таким
  образом, принципиальная возможность восстановить каталог есть.
       Второе - мы имеем гибкую дискету с неполной, но достаточной  для  работы
  конфигурацией ОС. С ней мы работали на ДВК. Если мы загрузим систему  с  нее,
  то, используя программу DUP, наверное, сможем восстановить архивный том.  Что
  мы не замедлим сделать.
       - Загрузился? И сразу посмотри каталог нашего погибшего диска,- говорю я
  Алеше.

  +---------------
  !  .DIR/FU/BL/VOL RK1:<ВК>
  !
  !   23-Sep-86
  !   Volume ID: BC-P727B-BC
  !   Owner    : RT-11 V5.1B
  !  < UNUSED >  4762               38
  !   0 Files, 0 Blocks
  !   4762 Free blocks
  !
  !  .^
  !

       - То, что нам теперь нужно будет сделать, во многом похоже на восстанов-
  ление прежнего вида зданий или картин, т.е.  реставрировать  наш  том.  Легко
  почувствовать по звучанию связь слова "РЕСТАВРИРОВАТЬ" с английским "RESTORE"
  - восстанавливать и сделать соответствующие выводы.  Поэтому  попробуем  дать
  команду

  +---------------
  !  .INITIALIZE/RESTORE RK1:<ВК>
  !
  !  .DIR/FU/BL/VOL RK1:<ВК>
  !  . . . . . . . . . . . . . . . . . . . .
  !  . . . . . . . . . . . . . . . . . . . .
  !

  и, увидев восстановленный архивный том, мы можем с  облегчением  вздохнуть  и
  запомнить этот урок. Теперь можно снова загрузиться с архивного диска и  про-
  должить нашу работу.


                                     - 158 -
           RT-11, A step by step                    DUP   14-Nov-92


       Ну вот, наверное, и все, что мы могли сказать об инициализации  файловой
  системы.
       - А как же идентификатор тома,- вспомнил Алеша,- хотелось бы самим запи-
  сать идентификатор тома. Наверное, ключ здесь будет такой же, как  в  команде
  DIRECTORY.

  +---------------
  !  .INITIALIZE/VOLUME:ONLY RK3:<ВК>
  !  -
  !  RK3:/Volume ID change; Are you sure? Y<ВК>
  !  -------------------------------------
  !  Volume  ID: RT-11SJ V5.1
  !  ------------
  !  Owner name: Дотошкин Ал.
  !  ------------
  !
  !  .^
  !

       И чтобы не забыть, сразу посмотрим  как  все  это  проделать,  пользуясь
  только программой DUP.
       Алешина ошибка может быть повторена с еще большей вероятностью, если  мы
  воспользуемся, например, таким способом:

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z/Y/<ВК>
  !  -
  !  *^C
  !  -
  !  .^
  !  -

  А неудавшуюся работу на одном устройстве можно выполнить следующим образом.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z/W<ВК>
  !  -
  !  RK3:/INITIALIZE; Are you sure? Y<ВК>
  !  -------------------------------
  !  Mount input volume in RK3:; Continue? Y<ВК>
  !  --------------------------------------
  !  Mount system volume in RK3:; Continue? Y<ВК>
  !  ---------------------------------------
  !  *^C
  !  -
  !  .^
  !  -

  При этом сообщения программы ясно объясняют, что от нас требуется.

       Ключ, для восстановления (/RESTORE) погибшего каталога, также необходимо
  запомнить


                                     - 159 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z/D<ВК>
  !  -
  !  *^C
  !  -
  !  .^
  !  -

  в отличие от ключа, который позволяет нам записать в первый блок тома иденти-
  фикатор тома и имя владельца. Ключи /VOLUMEID и /V  имеют  одинаковый  первый
  символ, а параметр :ONL используется в  случаях,  когда  мы  хотим  сохранить
  каталог.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:/Z/V:ONL<ВК>
  !  -
  !  RK3:/Volume ID change; Are you sure? Y<ВК>
  !  -------------------------------------
  !  Volume  ID: RT-11SJ V5.1<ВК>
  !  ------------
  !  Owner name: Дотошкин Ал.<ВК>
  !  ------------
  !  *^C
  !  -
  !  .^
  !  -

       А теперь вспомним, что магнитные ленты обслуживаются особым образом. Это
  относится и к инициализации файловой системы. Так как  на  ленте  отсутствуют
  начальные блоки, в которых на диске записывается загрузчик системы, то, чтобы
  восполнить этот пробел, вместо этого дана возможность при инициализации запи-
  сать в самое начало ленты (до метки начала тома  VOL1)  любой  файл,  который
  укажет пользователь. Ключ для этого не нужно даже искать. Нужно  просто  ска-
  зать

  .INITIALIZE/FILE:filspc.typ MT:

  и не забыть указать в качестве аргумента спецификацию желаемого файла (обычно
  это MBOOT.BOT).

       - И наконец, Алеша, используя все полученные знания,- говорю я,-  подго-
  товь том для дальнейшей работы.
       - В надежде, что нам не потребуется более ста файлов на диске,-  говорит
  Алеша,- размер каталога установим равным 2-м сегментам, проверим том на  пло-
  хие блоки и запишем идентификатор тома.


                                     - 160 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .INITIALIZE/SEGMENTS:2/BADBLOCKS/VOLUMEID RK3:<ВК>
  !  -
  !  RK3:/INITIALIZE; Are you sure? Y<ВК>
  !  -------------------------------
  !  ?DUP-W-No BAD blocks detected
  !  -----------------------------
  !  Volume  ID: RT-11SJ V5.1<ВК>
  !  ------------
  !  Owner name: Дотошкин Ал.<ВК>
  !  ------------
  !  .^
  !  -

  Вот теперь можно создавать рабочую копию системы.






       7.3. Копирование файлов



       - А с копированием ты, наверное, сам разберешся,- говорю я Алеше,- расс-
  казывай читателю о том, что ты будешь делать, а я  буду  подсказывать,  какие
  файлы нам нужны и для чего нужны остальные.
       - Взглянув на каталог эталонной системы,- начал  Алеша,-  мы  поразились
  как много файлов она содержит. Какие файлы нам необходимы сейчас, сразу  даже
  трудно определить. Однако мы помним, как подбирали систему для ДВК, и сначала
  скопируем то, что у нас есть на гибкой дискете. И пусть система сама  подска-
  жет, как нам себя вести.
       Английское слово COPY - копировать - даже по звучанию походит  на  наше.
  Так как синтаксиса этой команды мы не знаем (или забыли), наберем просто:

  +---------------
  !  .COPY<ВК>
  !  -
  !  From ? ^
  !  -------

  ОТКУДА ? - У нас есть единственное место, откуда мы можем копировать файлы  -
  RK1:. Кстати, именно с этого устройства загружалась система и, чтобы не  оши-
  биться, мы будем копировать с устройства SY:

  +---------------
  !  .COPY<ВК>
  !  -
  !  From ? SY:<ВК>
  !  -------
  !  To   ? ^
  !  -------

  КУДА ? - Очень мило с ее стороны. Конечно, мы будем копировать  на  подготов-
  ленный нами диск, который стоит на устройстве RK3.


                                     - 161 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .COPY<ВК>
  !  -
  !  From ? SY:<ВК>
  !  -------
  !  To   ? RK3:<ВК>
  !  -------
  !  ?PIP-W-No .SYS action
  !  ---------------------
  !       Files copied
  !       ------------
   RK1:IND   .SAV  to  RK3:IND   .SAV
   RK1:BUP   .SAV  to  RK3:BUP   .SAV
   RK1:PAT   .SAV  to  RK3:PAT   .SAV
   RK1:PIP   .SAV  to  RK3:PIP   .SAV
   RK1:DUP   .SAV  to  RK3:DUP   .SAV
   RK1:DIR   .SAV  to  RK3:DIR   .SAV
   RK1:SLP   .SAV  to  RK3:SLP   .SAV
   RK1:LET   .SAV  to  RK3:LET   .SAV
   RK1:UCL   .SAV  to  RK3:UCL   .SAV
   RK1:KED   .SAV  to  RK3:KED   .SAV
   RK1:K52   .SAV  to  RK3:K52   .SAV
   RK1:KEX   .SAV  to  RK3:KEX   .SAV
   RK1:LINK  .SAV  to  RK3:LINK  .SAV
   RK1:LIBR  .SAV  to  RK3:LIBR  .SAV
   RK1:CREF  .SAV  to  RK3:CREF  .SAV
   RK1:HELP  .SAV  to  RK3:HELP  .SAV
   RK1:MDUP  .SAV  to  RK3:MDUP  .SAV
   RK1:SIPP  .SAV  to  RK3:SIPP  .SAV
   RK1:DUMP  .SAV  to  RK3:DUMP  .SAV
   RK1:EDIT  .SAV  to  RK3:EDIT  .SAV
    ^C^C^C
    .^C
    .^C

  Вот те на! Надо скорее остановить это безобразие. С  испугу  Алеша  нажал  на
  клавиши CTRL/C несколько раз (в принципе это не страшно - система всякий  раз
  передает управление клавиатурному монитору). Мы забыли о групповой специфика-
  ции файлов!!!
       Мы уже достаточно много  знаем,  чтобы  самостоятельно  проанализировать
  сложившуюся ситуацию. Уже в своих подсказках и сообщениях система  рассказала
  и о синтаксисе команды, и о некоторых требованиях: - синтаксис команды  типи-
  чен для команд управления файлами. Мы уже его разбирали. Т.е. если не исполь-
  зовать режим подсказки, мы должны были набрать  строку,  состоящую  из  имени
  команды COPY с какими-нибудь ей соответствующими ключами, спецификации  вход-
  ного файла (это может быть групповая спецификация, откуда  информацию  брать)
  также с ключами, и спецификации выходного файла (или файлов, если  специфика-
  ция групповая), куда информацию записывать. Т.е. примерно так:

       COPY from SY:FILE.TYP to RK3:FILE.TYP

  в реальной же команде слова "from" и "to" мы опускаем.
       Программа PIP нам твердо сказала, что файлы  с  типом  .SYS  в  операции
  участвовать не будут. Типом .SYS, насколько мы можем догадаться, обозначаются
  системные файлы. Так или иначе мы можем попробовать использовать для  включе-
  ния в операцию этих файлов ключ /SYS или, если хотим убедится в  правильности
  наших предположений, ключ /SYSTEM.
       - мы должны сразу отметить, что если мы указываем, что нужно  копировать
  с одного устройства на другое, то система будет брать с  входного  устройства


                                     - 162 -
           RT-11, A step by step                    DUP   14-Nov-92


  файл за файлом и копировать его, если правила (тип .SYS или  .BAD)  позволяют
  это сделать. До версии RT-11 V4.0 для этого необходимо  было  указывать  явно
  групповую спецификацию с помощью звездочек. Но нам бы хотелось, чтобы система
  спрашивала, что нужно копировать и что не нужно. Мы уже несколько раз  приме-
  няли ключ для обратной функции, поэтому легко догадаться, что в данном случае
  необходим ключ /QUERY - вопрос.
       - мы также должны отметить, что система протоколирует на экране все, что
  она делает. Хорошо бы научиться управлять этим процессом. А для  того,  чтобы
  работать дальше, необходимо вернуть диск в исходное состояние. Сделать это мы
  пока можем только одним известным нам способом -  заново  его  проинициализи-
  руем, так же как проделывали перед этим.

  +---------------
  !  .INITIALIZE/SEGMENTS:2/BADBLOCKS/VOLUMEID RK3:<ВК>
  !  -
  !  RK3:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  Volume contans protected files; Are you sure? Y<ВК>
  !  ----------------------------------------------
  !  ?DUP-W-No bad blocks detected
  !  -----------------------------
  !  Volume  ID: RT-11SJ V5.1<ВК>
  !  ------------
  !  Owner name: Дотошкин Ал.<ВК>
  !  -----------
  !  .^
  !

  Теперь мы более внимательны и обратили внимание на оба вопроса системы.

       С учетом того, что мы только  что  разобрали,  будем  действовать  более
  обдуманно и целенаправленно. По крайней мере хотелось бы  не  отвлекаться  на
  файлы с типами .REL, .OBJ, .COM, .MAC, .FOR. Наш опыт работы с программой DIR
  очень нам поможет. Если функции по смыслу идентичны, вряд ли  нужно  придумы-
  вать новые ключи. Итак

  +---------------
  !  .COPY/SYS/QUERY/EXCLUDE SY:(.REL,.OBJ,.COM,.MAC,.FOR) RK3:<ВК>
  !  -
  !          Files copied
  !          ------------
   RK1:SWAP  .SYS  to  RK3:SWAP  .SYS Y<ВК>
   RK1:RT11AI.SYS  to  RK3:RT11AI.SYS
   RK1:RT11PI.SYS  to  RK3:RT11PI.SYS
   RK1:RT11SJ.SYS  to  RK3:RT11SJ.SYS Y<ВК>
   RK1:RT11FB.SYS  to  RK3:RT11FB.SYS
   RK1:RT11XM.SYS  to  RK3:RT11XM.SYS
   RK1:RT11BL.SYS  to  RK3:RT11BL.SYS

  из главных системных файлов мы сразу взяли SWAP.SYS (потому что так  надо)  и
  однозадачный монитор RT11SJ.SYS, потому что мы договорились пока  работать  с
  ним.

   RK1:TT    .SYS  to  RK3:TT    .SYS Y<ВК>
   RK1:LD    .SYS  to  RK3:LD    .SYS Y<ВК>
   RK1:DX    .SYS  to  RK3:DX    .SYS Y<ВК>
   RK1:DY    .SYS  to  RK3:DY    .SYS
   RK1:DD    .SYS  to  RK3:DD    .SYS
   RK1:PD    .SYS  to  RK3:PD    .SYS


                                     - 163 -
           RT-11, A step by step                    DUP   14-Nov-92


   RK1:VM    .SYS  to  RK3:VM    .SYS Y<ВК>
   RK1:DZ    .SYS  to  RK3:DZ    .SYS
   RK1:DW    .SYS  to  RK3:DW    .SYS
   RK1:SP    .SYS  to  RK3:SP    .SYS
   RK1:XL    .SYS  to  RK3:XL    .SYS
   RK1:DT    .SYS  to  RK3:DT    .SYS
   RK1:XC    .SYS  to  RK3:XC    .SYS
   RK1:RF    .SYS  to  RK3:RF    .SYS
   RK1:DS    .SYS  to  RK3:DS    .SYS

  А вот и драйверы, которые нам нужны. Хватая первые попавшиеся  нам  драйверы,
  отмечаем, что про них мы уже говорили.
       - Про остальные,- помогаю я Алеше,- я кратко расскажу (но копировать  их
  не будем) лишь для сведения любознательных.
       Драйвер DY.SYS обслуживает гибкие магнитные диски диаметром 8  дюймов  с
  двойной плотностью RX02 емкостью 0.5М байта. Им  соответствуют  отечественные
  накопители ГМД-7012 (со специальным контроллером) и ГМД-7022.
       Драйверы DD.SYS,  DT.SYS  обслуживают  накопители  на  магнитной  ленте,
  использующие специальный формат записи фирмы DEC.
       Драйвер PD.SYS обслуживает интеллектуальный терминал PDP-11/150, аналога
  которому в СССР нет.
       Драйвер DZ.SYS обслуживает гибкие магнитные диски RX50  диаметром  5.25"
  объемом 400/800К байт, которые используются в ПЭВМ  серии  PRO-300,  аналогом
  которой является "Электроника-85". Те, кто работает на "Электронике-85" долж-
  ны взять этот драйвер вместо драйвера DX.SYS.
       Драйвер DW.SYS обслуживает жесткий диск RD50C типа  "Винчестер"  объемом
  5/10М  байт,  который  также  используется  в  серии  PRO-300.  Пользователям
  "Электроники-85" необходимо его взять вместо драйвера RK или DP.
       Драйвер SP.SYS используется при печати текстов на любых печатающих  уст-
  ройства для вывода красивых транспарантов. С  его  помощью  печатается  дата,
  время и спецификация файла большими буквами на отдельном листе, а затем печа-
  тается сам файл.
       Драйверы XL.SYS и XC.SYS (только для PRO-300 или "Электроники-85")  поз-
  воляют передавать текстовые сообщения или файлы по линиям связи (в том  числе
  и телефонным) и составляют основу локальных сетей. В  "Электронике-85"  через
  устройство XC часто подключают графопостроитель.
       Драйвер DS.SYS обслуживает диски RJS03/04 емкостью 0.5/1.0М байта.

   RK1:RK    .SYS  to  RK3:RK    .SYS Y<ВК>
   RK1:DL    .SYS  to  RK3:DL    .SYS
   RK1:DU    .SYS  to  RK3:DU    .SYS
   RK1:DP    .SYS  to  RK3:DP    .SYS Y<ВК>
   RK1:DM    .SYS  to  RK3:DM    .SYS
   RK1:MT    .SYS  to  RK3:MT    .SYS Y<ВК>
   RK1:MM    .SYS  to  RK3:MM    .SYS
   RK1:MS    .SYS  to  RK3:MS    .SYS
   RK1:CT    .SYS  to  RK3:CT    .SYS
   RK1:LP    .SYS  to  RK3:LP    .SYS Y<ВК>
   RK1:LS    .SYS  to  RK3:LS    .SYS
   RK1:PC    .SYS  to  RK3:PC    .SYS
   RK1:CR    .SYS  to  RK3:CR    .SYS
   RK1:NL    .SYS  to  RK3:NL    .SYS Y<ВК>
   RK1:SL    .SYS  to  RK3:SL    .SYS Y<ВК>
   RK1:PI    .SYS  to  RK3:PI    .SYS

  В ОС RT-11 поддерживается шесть типов магнитофонов. Мы выберем драйвер  того,
  который используется в СОТКЕ - MT.SYS, и по  пути  возьмем  драйверы  жестких
  дисков, которые мы можем использовать, - RK.SYS и DP.SYS.
       Про драйверы LD.SYS, VM.SYS мы уже говорили и скопируем их, чтобы попро-


                                     - 164 -
           RT-11, A step by step                    DUP   14-Nov-92


  бовать их в деле. Драйвер SL.SYS обеспечивает такой  комфорт  оператору,  что
  трудно удержаться от соблазна. Скопируем и вскоре о нем вспомним.
       Драйвер LS.SYS обслуживает  печатающие  устройства,  данные  на  которые
  передаются в последовательном коде. Его должны  взять  те,  кто  работает  на
  "Электронике-85", вместо драйвера LP.SYS. В остальном он полностью  идентичен
  драйверу LP.SYS, который мы будем использовать. И кроме  того,  вспомним  про
  драйвер Нуль-устройства.
       Для пользователей "Электроники-85" крайне необходим драйвер PI.SYS.  Так
  как в ней нет символьного дисплея, а  только  графический,  то  этот  драйвер
  превращает графический дисплей в терминал VT-100, а по пути обслуживает  про-
  цессор службы времени и клавиатуру.

   RK1:LDX   .SYS  to  RK3:LDX   .SYS
   RK1:DXX   .SYS  to  RK3:DXX   .SYS
   RK1:DYX   .SYS  to  RK3:DYX   .SYS
   RK1:DDX   .SYS  to  RK3:DDX   .SYS
   RK1:VMX   .SYS  to  RK3:VMX   .SYS
   RK1:DZX   .SYS  to  RK3:DZX   .SYS
   RK1:DWX   .SYS  to  RK3:DWX   .SYS
   RK1:SPX   .SYS  to  RK3:SPX   .SYS
   RK1:XLX   .SYS  to  RK3:XLX   .SYS
   RK1:XCX   .SYS  to  RK3:XCX   .SYS
   RK1:RKX   .SYS  to  RK3:RKX   .SYS
   RK1:DLX   .SYS  to  RK3:DLX   .SYS
   RK1:DUX   .SYS  to  RK3:DUX   .SYS
   RK1:DMX   .SYS  to  RK3:DMX   .SYS
   RK1:MTX   .SYS  to  RK3:MTX   .SYS
   RK1:MMX   .SYS  to  RK3:MMX   .SYS
   RK1:MSX   .SYS  to  RK3:MSX   .SYS
   RK1:LPX   .SYS  to  RK3:LPX   .SYS
   RK1:LSX   .SYS  to  RK3:LSX   .SYS
   RK1:NLX   .SYS  to  RK3:NLX   .SYS
   RK1:SLX   .SYS  to  RK3:SLX   .SYS
   RK1:PIX   .SYS  to  RK3:PIX   .SYS
   RK1:SLMIN .SYS  to  RK3:SLMIN .SYS

  Драйверы,  имена  которых  заканчиваются  на  "X",   относятся   к   монитору
  RT11XM.SYS, который мы пока использовать не будем, а следовательно, и драйве-
  ры пропустим не глядя.

   RK1:IND   .SAV  to  RK3:IND   .SAV
   RK1:BUP   .SAV  to  RK3:BUP   .SAV
   RK1:PAT   .SAV  to  RK3:PAT   .SAV
   RK1:PIP   .SAV  to  RK3:PIP   .SAV Y<ВК>
   RK1:DUP   .SAV  to  RK3:DUP   .SAV Y<ВК>
   RK1:DIR   .SAV  to  RK3:DIR   .SAV Y<ВК>
   RK1:SLP   .SAV  to  RK3:SLP   .SAV
   RK1:LET   .SAV  to  RK3:LET   .SAV Y<ВК>
   RK1:UCL   .SAV  to  RK3:UCL   .SAV
   RK1:KED   .SAV  to  RK3:KED   .SAV
   RK1:K52   .SAV  to  RK3:K52   .SAV Y<ВК>
   RK1:KEX   .SAV  to  RK3:KEX   .SAV

  Пусть программа PIP сама себя скопирует, а заодно и программы DIR, DUP. Прог-
  рамму LET.SAV (ПУСТЬ) скопируем из интереса к ее названию, а из трех  програм
  KED, K52, KEX возьмем ту, про которую уже слышали из  разговоров  программис-
  тов. Редактор K52 уже на слуху у всех, и мы с ним попробуем поработать. Поль-
  зователям "Электроники-85" вместо него нужно взять редактор KED.


                                     - 165 -
           RT-11, A step by step                    DUP   14-Nov-92


   RK1:LINK  .SAV  to  RK3:LINK  .SAV
   RK1:LIBR  .SAV  to  RK3:LIBR  .SAV
   RK1:CREF  .SAV  to  RK3:CREF  .SAV
   RK1:HELP  .SAV  to  RK3:HELP  .SAV
   RK1:MDUP  .SAV  to  RK3:MDUP  .SAV
   RK1:SIPP  .SAV  to  RK3:SIPP  .SAV
   RK1:DUMP  .SAV  to  RK3:DUMP  .SAV Y<ВК>
   RK1:EDIT  .SAV  to  RK3:EDIT  .SAV Y<ВК>
   RK1:MACRO .SAV  to  RK3:MACRO .SAV
   RK1:BATCH .SAV  to  RK3:BATCH .SAV
   RK1:FILEX .SAV  to  RK3:FILEX .SAV
   RK1:SPEED .SAV  to  RK3:SPEED .SAV
   RK1:SETUP .SAV  to  RK3:SETUP .SAV
   RK1:SPLIT .SAV  to  RK3:SPLIT .SAV
   RK1:VTCOM .SAV  to  RK3:VTCOM .SAV
   RK1:FORMAT.SAV  to  RK3:FORMAT.SAV Y<ВК>

  Программы DUMP, FORMAT копируем не задумываясь, как старых знакомых. Програм-
  ма EDIT.SAV (редактор) нужна нам будет для создания текстов.

   RK1:RESORC.SAV  to  RK3:RESORC.SAV
   RK1:QUEMAN.SAV  to  RK3:QUEMAN.SAV
   RK1:SRCCOM.SAV  to  RK3:SRCCOM.SAV
   RK1:BINCOM.SAV  to  RK3:BINCOM.SAV
   RK1:DATIME.SAV  to  RK3:DATIME.SAV
   RK1:TERMID.SAV  to  RK3:TERMID.SAV
   RK1:ERROUT.SAV  to  RK3:ERROUT.SAV
   RK1:TRANSF.SAV  to  RK3:TRANSF.SAV
   RK1:CONFIG.SAV  to  RK3:CONFIG.SAV
   RK1:SYSMAC.SML  to  RK3:SYSMAC.SML
   RK1:RTBL  .MAP  to  RK3:RTBL  .MAP
   RK1:RTSJ  .MAP  to  RK3:RTSJ  .MAP
   RK1:RTFB  .MAP  to  RK3:RTFB  .MAP
   RK1:RTXM  .MAP  to  RK3:RTXM  .MAP
   RK1:MBOOT .BOT  to  RK3:MBOOT .BOT
   RK1:MBOT16.BOT  to  RK3:MBOT16.BOT
   RK1:MSBOOT.BOT  to  RK3:MSBOOT.BOT
   RK1:VBGEXE.SAV  to  RK3:VBGEXE.SAV
   RK1:DEMOED.TXT  to  RK3:DEMOED.TXT
   RK1:V5USER.TXT  to  RK3:V5USER.TXT
   RK1:SAMPLE.KED  to  RK3:SAMPLE.KED
   RK1:SJFB  .ANS  to  RK3:SJFB  .ANS
   RK1:BL    .ANS  to  RK3:BL    .ANS
   RK1:XM    .ANS  to  RK3:XM    .ANS
   RK1:V5NOTE.TXT  to  RK3:V5NOTE.TXT
   RK1:UNSUP .TXT  to  RK3:UNSUP .TXT
   RK1:CUSTOM.TXT  to  RK3:CUSTOM.TXT
   RK1:MDUP  .MT   to  RK3:MDUP  .MT
   RK1:MDUP  .MS   to  RK3:MDUP  .MS
   RK1:MDUP  .MM   to  RK3:MDUP  .MM
   RK1:PATCH .SAV  to  RK3:PATCH .SAV Y<ВК>

  Напоследок возьмем программу PATCH.SAV - вдруг нам нужно будет поставить зап-
  лату.


                                     - 166 -
           RT-11, A step by step                    DUP   14-Nov-92


       - А теперь посмотрим, что у нас получилось,- говорит Алеша.

   16-Mar-88
   Volume ID: RT-11SJ V5.1
   Owner    : Дотошкин Ал.
  SWAP  .SYS   26P 13-Jan-84   10     RT11SJ.SYS  73P 13-Jan-84   36
  TT    .SYS    2P 13-Jan-84  109     LD    .SYS   8P 13-Jan-84  111
  DX    .SYS    4P 13-Jan-84  119     VM    .SYS   3P 13-Jan-84  123
  RK    .SYS    3P 13-Jan-84  126     DP    .SYS   3P 13-Jan-84  129
  MT    .SYS    9P 13-Jan-84  132     LP    .SYS   2P 13-Jan-84  141
  PC    .SYS    2P 13-Jan-84  143     NL    .SYS   2P 13-Jan-84  145
  SL    .SYS   13P 13-Jan-84  147     PIP   .SAV  29P 13-Jan-84  160
  DUP   .SAV   45P 13-Jan-84  189     DIR   .SAV  19P 13-Jan-84  234
  LET   .SAV    5P 13-Jan-84  340     K52   .SAV  55P 13-Jan-84  258
  DUMP  .SAV    8P 13-Jan-84  313     EDIT  .SAV  19P 13-Jan-84  321
  FORMAT.SAV   21P 13-Jan-84  340     PATCH .SYS   9P 13-Jan-84  361
  < UNUSED > 4430             370
   22 Files, 360 Blocks
   4430 Free blocks

  И покажем, как проделанную  нами  операцию  копирования,  можно  выполнить  с
  помощью программы PIP. Запустив программу, мы должны  перечислить  соответст-
  вующие ключи, а в остальном действовать также, как и с KMON.

  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *RK3:=SY:(.REL,.OBJ,.COM,.MAC,.FOR)/Y/Q/P
  !  -
  !              Files copied
  !              ------------
  !   . . . . . . . . . . . . . . . . . . . . .
  !   . . . . . . . . . . . . . . . . . . . . .
  !  *^C
  !  -
  !  .^
  !  -

  Из этих однобуквенных ключей только один совпадает с полным именем /Q => QUE-
  RY, другие же опять придется запоминать. Ключ /Y => /SYSTEM можно  связать  с
  одной из букв в полном названии ключа. Второй же ключ /P  =>  /EXCLUDE  отли-
  чается тем, что для него и это правило не может быть применено.

       - И можно начинать с этой системой работать?- спрашивает Алеша.
       - Наверное, можно,- отвечаю я,- только сможешь ли ты ее загрузить?
       - Да нет ничего проще,- опрометчиво заявляет Алеша,- когда  мы  разбира-
  лись с файловой системой, в справочнике Гэлланда нашли, что  загрузка  опера-
  ционной системы называется BOOT. Вот и используем это слово в качестве коман-
  ды.

  +---------------
  !  .BOOT<ВК>
  !  -
  !  Device or file? ^
  !  ----------------

  Ах, да,- вспомнил Алеша,- я забыл указать имя  устройства,  с  которого  хочу
  загрузить операционную систему. Так как мы собирали систему на RK3:, то  и  в
  ответ на вопрос системы укажем - RK3.


                                     - 167 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .BOOT<ВК>
  !  -
  !  Device or file? RK3:<ВК>
  !  ----------------
  !  ?BOOT-U-NO BOOT ON VOLUME
  !  -------------------------
  !  .^
  !  -

       - Что, фокус не удался?- спрашиваю я Алешу.
       - Ага,- грустно заметил Алеша,- я забыл, что необходим загрузчик монито-
  ра.
       - А может, можно обойтись без него?
       - Тут нужно подумать,- отвечает Алеша,- на архивном диске имеется  шесть
  мониторов, кроме того, в вопросе системы предлагается выбор - или устройство,
  или файл. Наверное, это и есть возможность загружать отдельный монитор  неза-
  висимо от того, какой загрузчик записан в начало тома. Поэтому мы опять  заг-
  рузимся с архивного тома, а после этого повторим нашу попытку.
       Алеша загрузил систему снова и набрал новую команду.

  +---------------
  !  .BOOT RK3:RT11SJ<ВК>
  !  -
  !      RT-11SJ (S) V5.1
  !      ----------------
  !  ?MON-F-File not found DK:STARTS.COM
  !  -----------------------------------
  !  .^
  !  -

       - Ну, вот и получилось,- обрадовался Алеша,- правда, она опять не  нашла
  файл STARTS.COM.
       - Алеша, давай ненадолго отложим разговор об этом файле,- говорю  я,-  и
  закончим с загрузкой. Ведь не будешь же ты каждый раз загружаться с архивного
  тома, а затем запускать свою систему.
       - Конечно, и наверное, не трудно сконструировать команду, которая  запи-
  шет (точнее скопирует) загрузчик в начальные блоки тома,- уже со знанием дела
  говорит Алеша,- мы говорили, что загрузчик  копируется  из  начальных  блоков
  монитора и последнего блока  драйвера  соответствующего  устройства.  Поэтому
  команда будет называтся COPY, что  ясно  без  объяснений.  Мы  ее  уточним  с
  помощью ключа /BOOT, так как копируем  загрузчик.  Сразу  ответим  на  вопрос
  "From?" - откуда копировать загрузчик -  RK3:RT11SJ,  и,  соответственно,  на
  вопрос "To?" - куда - RK3:. И вот, что у нас получилось

  +---------------
  !  .COPY/BOOT RK3:RT11SJ RK3:<ВК>
  !  -
  !  .^
  !  -

       Система на минуту задумалась и поставила точку.
       - Алеша, ты все правильно сделал, но я хочу сделать одно замечание.
       В принципе, можно было скопировать загрузчик из  монитора,  находящегося
  на архивном томе. В данном случае ничего страшного не  произошло  бы.  Однако
  привычка действовать вышеописанным способом поможет избежать случайной  ошиб-
  ки, когда монитор, находящийся на другом томе, будет иметь  несколько  другие
  параметры, чем тот, который находится на рабочем томе, и при  загрузке  могут
  быть непредсказуемые события.


                                     - 168 -
           RT-11, A step by step                    DUP   14-Nov-92


       - Наверное, мы можем завершить разговор о загрузке  системы,-  подытожил
  Алеша,- сказав, что ключ /WAIT здесь имеет такой же смысл,  как  в  программе
  FORMAT, а с помощью ключа /FOREIGN - внешний - можно загрузить систему, имею-
  щую загрузчик в отличном от RT-11 формате.
       А без помощи KMON можем обойтись и в  этом  случае.  Так  как  загрузчик
  копируется в начальные блоки тома, минуя  каталог,  то  эту  операцию  делает
  программа DUP

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:=RK3:RT11SJ/U<ВК>
  !  -                            и сразу можно загрузится.
  !  *RK3:/O<ВК>
  !  -

  А для того чтобы загрузиться с тома во внешнем формате  (/FOREIGN),  нужно  к
  ключу /O добавить ключ /Q. И если у нас однодисковая система,  то  для  смены
  тома нужно добавить еще и ключ /W - WAIT.

       - Да  и  пришло  время,-  напоминаю  я  Алеше,-  разобраться  с   файлом
  STARTS.COM.
       - Да, и тем более что их на архивном томе целых четыре  штуки,-  говорит
  Алеша,- и все начинаются со слова START, и все имеют тип .COM, отличаясь друг
  от друга только последней буквой имени, которая,  по-видимому,  указывает  на
  тип минитора. Скорее всего, буква "S" соответствует монитору SJ, буква "F"  -
  монитору FB, буква "X" - монитору XM и т.д. В дампе 5-го блока,  то  есть  во
  вторичном загрузчике, можно увидеть имя этого файла.
       Понятно, что это некоторый файл, скорее всего командный (COMmand), кото-
  рый выполняется сразу после загрузки системы,  -  стартовый  командный  файл.
  Только я не знаю, что это может быть.
       - Да, Алеша,- говорю я,- мы пока не можем посмотреть, что у него внутри.
  Да это и не всегда нужно.
       - А почему?- воскликнул Алеша,- мы всегда  можем  посмотреть  содержимое
  файла с помощью программы DUMP.
       - Конечно, можем,- останавливаю его я,- но не  будем.  Мы  скоро  узнаем
  более эффективные способы, а сейчас не будем терять время и просто  скопируем
  его с архивного диска. Снова загрузимся и посмотрим, что из этого получится.
       Сказано - сделано. И после копирования сразу попробуем загрузиться.

  +---------------
  !  .COPY SY:STARTS.COM RK3:STARTS.COM<ВК>
  !  -
  !  .BOOT RK3:<ВК>
  !  -
  !         RT-11 V5.1 (S)
  !         --------------
  !  .SET TT QUIET
  !  -------------
  !  ?PIP-F-File no found SY:V5USER.TXT
  !  ----------------------------------

  Нас постигла относительная неудача, но система при этом  рассказала  о  своих
  желаниях, которые со временем разъяснятся. А пока выполним просьбу системы  и
  скопируем этот файл с архивного тома и перезагрузимся снова. Попутно отметим,
  что монитор уже загружен и в принципе можно работать, но мы хотим чтобы  заг-
  рузка прошла до конца.


                                     - 169 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  .COP RK1:V5USER.TXT RK3:V5USER.TXT<ВК>
  !  -
  !  .BOOT RK3:<ВК>
  !  -
        RT-11SJ  V5.1B (S)
   .SET TT QUIET


                             RT-11 V5.1
                             ----------

       Installation  of  RT-11 version 5.1 is complete and you are
  now  executing  from  the working volume (provided you have used
  the  automatic  installation  procedure).  Digital recomends you
  verify the correct operation of your system's software using the
  verification procedure. To do this, enter the command:

                             IND VERIFY

       Note that verify should be performed only after the distri-
  bution  media have been backed up. This was accomplished as part
  of  automatic  installation  on  all  RL02, RLX02 and RX50 based
  systems, including the micro/PDP-11 and the Professional 300. If
  you  have not completed automatic installation, you must perform
  a  manual  backup  before using VERIFY. Note also, VERIFY is not
  supported   on   RX01  diskettes,  DECtape   I  or  II,  or  the
  Professional 325.
   ?KMON-F-File not found SY:IND.SAV
   @<EOF>

       - Вот те раз,- удивился Алеша,- а этот файл потащил за собой  еще  один,
  как видно из его типа, - программу. Кроме  того,  клавиатурный  монитор  ясно
  сказал, что он не нашел, где должен находиться искомый файл и как  он  должен
  называться.
       - И так же,- говорю я Алеше,- пойдем на поводу у системы. Не будем  раз-
  бираться, что должна делать эта программа (хотя она предоставляет пользовате-
  лю очень интересные возможности), а пока имеем возможность, просто  скопируем
  ее.

  +---------------
  !  .COPY RK1:IND.SAV SY:IND.SAV<ВК>
  !  -

       Алеша совершенно правильно набрал командную строку. Дело в том, что хоть
  загрузка до конца не прошла, но так как сообщение нам выдал KMON, то  система
  в принципе работоспособна. Использование логического имени SY: для системного
  устройства позволяет избежать случайных ошибок.
       - А теперь я загружусь с системного устройства,- говорит Алеша,-  именно
  такую ситуацию Гэлланд назвал "ложной загрузкой".

  +---------------
  !  .BOOT SY:<ВК>
  !  -

       И опять неудача. После красивой картинки вдруг новое сообщение:


                                     - 170 -
           RT-11, A step by step                    DUP   14-Nov-92


  +---------------
  !  @SY:DATIME.COM
  !  --------------
  !  ?IND-F-File not found
  !  ---------------------
  !                  SY:DATIME.COM
  !                  -------------

       - Это они так по цепочке весь архивный диск заставят  меня  переписать,-
  Алеша, ворча, стал вводить следующую командную строку:

  +---------------
  !  .COP RK1:DATIME.COM SY:<ВК>
  !  -

       Алеша даже не стал вводить имя, под которым файл должен быть записан  на
  диске, справедливо полагая, что система по умолчанию даст выходному файлу имя
  входного. Забегая вперед, можно отметить, что действительно  начиная  с  V4.0
  имя выходного файла нужно давать, только если оно  отлично  от  входного.  То
  есть, если при копировании одновременно происходит переимнование файла.
       - И снова нужно перезагрузиться,-  сказал  Алеша,-  повторяя  на  экране
  строку

  +---------------
  !  .BOOT SY:<ВК>
  !  -

  - А вот теперь удача,- Алеша даже в ладоши захлопал, увидев на экране картин-
  ку, которая появлялась при загрузке архивного тома.

     RT-11SJ  V5.1B (S)
   .SET TT QUIET


                             RT-11 V5.1
                             ----------

       Installation  of  RT-11 version 5.1 is complete and you are
  now  executing  from  the working volume (provided you have used
  the  automatic  installation  procedure).  Digital recomends you
  verify the correct operation of your system's software using the
  verification procedure. To do this, enter the command:

                             IND VERIFY

       Note that verify should be performed only after the distri-
  bution  media have been backed up. This was accomplished as part
  of  automatic  installation  on  all  RL02, RLX02 and RX50 based
  systems, including the micro/PDP-11 and the Professional 300. If
  you  have not completed automatic installation, you must perform
  a  manual  backup  before using VERIFY. Note also, VERIFY is not
  supported   on   RX01  diskettes,  DECtape   I  or  II,  or  the
  Professional 325.


                                     - 171 -
           RT-11, A step by step                    DUP   14-Nov-92



   Date [dd-mmm-yy]? 23-SEP-86<ВК>
   ------------------
   Time [hh:mm:ss]? 9:10:00<ВК>
   -----------------
   Startup file [filnam.typ]? <ВК>
   ---------------------------
   RT-11 Single Job monitor,  Volume ID   BC-P727B-BC
   --------------------------------------------------
   Booted on 23-Sep-86 at 09:11:12 from file RK3:RT11SJ.SYS
   --------------------------------------------------------
   @<EOF>
   ------
   .^
   -

       - Таким образом, Алеша,- объясняю я ему случившееся,- ты  сейчас  столк-
  нулся с реальной системой, в которой файлы и  программы  тесно  взаимосвязаны
  между собой. Мы пока не готовы объяснить все требования системы и должны под-
  чиняться ей. Пока мы только можем сказать, что красивая картинка находится  в
  файле V5USER.TXT, а дату у нас спрашивал файл DATIME.COM.
       Однако,- констатирует Алеша,- мы уже  можем  освободить  архивный  диск,
  чтобы случайно его не испортить. А сами займемся таким  интересным  устройст-
  вом, как виртуальная память.
       - Алеша,- останавливаю я его,- если ты хочешь за одни день  изучить  все
  возможности программ PIP и DUP и поработать на всех устройствах,  давай  сде-
  лаем перерыв на обед. Тем более что и время подходящее.
       - Это можно, только не хотелось бы выключать машину, чтобы когда мы при-
  дем, продолжить с той же точки, на которой остановились.
       - Это сделать просто,- говорю я,- достаточно на пульте  управления  про-
  цессором нажать клавишу "СТОП", а затем повернуть ключ в положение "БЛОКИР" и
  вынуть его. А на хранение его можно  сдать  Александру  Геннадьевичу,  заодно
  предупредив, что мы ненадолго отойдем.



                                     - 172 -
           RT-11, A step by step                    PIP   14-Nov-92


                             8. ПРОДОЛЖИМ НАШИ ИГРЫ


                        8.1. Устройство виртуальной памяти


                                       Воображение - в действительности не что
                                       иное,  как вид памяти, освобожденный от
                                       уз времени и пространства.            .
                                                       Сэмюель Тейлор Кольридж


       - Ну вот и ключ,- сказал Алеша,- сбегав к Александру Геннадьевичу  после
  того, как мы пришли с обеда,- и как же машине сказать, что можно работать?
       - А для этого нужно вставить ключ, повернуть его в положение "РАБОТА"  и
  нажать клавишу "ПРОДОЛЖ". Вот и все.

       "Суть концепции виртуальной памяти заключается  в  том,  что  адреса,  к
  которым обращается выполняющийся  процесс,  отделяются  от  адресов,  реально
  существующих в первичной памяти" - такое определение виртуальной памяти  дает
  в своей книге Харви Дейтел.
       - А как работать с устройством,- не понимает Алеша,- которое  не  предс-
  тавляет реального объекта, отделено от объективно существующей реальности?
       - С одной стороны, ты прав,- замечаю я,-  наше  новоявленное  устройство
  (напомним, что оно появилось начиная с версии 5.0) не существует как  некото-
  рое самостоятельное устройство. Но вспомним, что мы говорили о файловой  сис-
  теме.
       - Файловая система может быть организована в любой  памяти,-  напоминает
  Алеша.
       - А почему этой памятью,- спрашиваю я,- не может быть память процессора?
  В СОТКЕ объем памяти составляет 256К байт, т.е. такой  же  как  объем  гибкой
  дискеты. А монитор RT11SJ использует только 64К байта (вместе с периферийными
  устройствами и программами пользователя). Почему бы в  оставшуюся  память  не
  записать необходимую информации, которую мы рассматривали в  пятой  главе.  А
  после этого работать с ней, как с устройством,  имеющим  файловую  систему  с
  произвольным доступом. Кстати, на "Электронике-85" я именно  так  и  работаю.
  Скидываю на такое устройство всю дискету (400К байт) и еще место остается.  И
  в результате мне неважно, какая операционная система стоит на "Винчестере", и
  в моем распоряжении два кармана НГМД.
       - Но как с ней работать,- настаивает Алеша,- разве что, сначала  инициа-
  лизировать его файловую систему так, как мы уже умеем?
       И Алеша ввел команду

  +---------------
  !  .INITIALIZE VM0:<ВК>
  !  -
  !  VM0:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  .^
  !

       - Видишь,- говорю я Алеше,- и ничего страшного не произошло. Сразу можно
  отметить, что так как память у процессора одна, то номер устройства  значения
  не имеет, он просто игнорируется. И теперь можешь посмотреть его каталог.


                                     - 173 -
           RT-11, A step by step                    PIP   14-Nov-92


  +---------------
  !  .DIR/FU/BL/VOL DM:<ВК>
  !
  !   14-May-88
  !   Volume ID: RT11A
  !   Owner    :
  !  < UNUSED >   376              8
  !   0 Files, 0 Blocks
  !   376 Free blcks
  !

       - И теперь,- обрадовался Алеша,- можно  на  это  устройство  скопировать
  файлы, которые имеются на нашем диске. Причем сделать  это  можно  достаточно
  быстро. Не забыв про системные файлы, даем  групповую  (как  громко  сказано)
  спецификацию, введя команду:

  +--------------
  !  .COPY/SYSTEM SY: VM:<ВК>
  !  -
  !           Files copied:
  !           -------------
  !  SY:SWAP  .SYS  to  VM:SWAP  .SYS
  !  SY:TT    .SYS  to  VM:TT    .SYS
  !  SY:LD    .SYS  to  VM:LD    .SYS
  !  SY:DX    .SYS  to  VM:DX    .SYS
  !  SY:VM    .SYS  to  VM:VM    .SYS
  !  SY:RK    .SYS  to  VM:RK    .SYS
  !  SY:DP    .SYS  to  VM:DP    .SYS
  !  SY:MT    .SYS  to  VM:MT    .SYS
  !  SY:LP    .SYS  to  VM:LP    .SYS
  !  SY:PC    .SYS  to  VM:PC    .SYS
  !  SY:NL    .SYS  to  VM:NL    .SYS
  !  SY:SL    .SYS  to  VM:SL    .SYS
  !  SY:PIP   .SAV  to  VM:PIP   .SAV
  !  SY:DUP   .SAV  to  VM:DUP   .SAV
  !  SY:DIR   .SAV  to  VM:DIR   .SAV
  !  SY:LET   .SAV  to  VM:LET   .SAV
  !  SY:K52   .SAV  to  VM:K52   .SAV
  !  SY:DUMP  .SAV  to  VM:DUMP  .SAV
  !  SY:EDIT  .SAV  to  VM:EDIT  .SAV
  !  SY:FORMAT.SAV  to  VM:FORMAT.SAV
  !  SY:PATCH .SAV  to  VM:PATCH .SAV
  !  SY:STARTS.COM  to  VM:STARTS.COM
  !  SY:V5NOTE.TXT  to  VM:V5NOTE.TXT
  !  ?PIP-F-Device full VM:IND.SAV
  !

  И так она будет говорить про каждый файл,- возмутился Алеша,- но ведь я знаю,
  что копирую. Как бы запретить ей этот многословный рассказ.
       Мы, конечно, найдем такую возможность, но сначала отметим,  что  не  все
  нужные нам файлы скопировались. Самое простое, так как эта система у нас соз-
  дается для эксперимента, это удалить некоторые файлы и докопировать  то,  что
  нам нужно. Некоторые команды мы будем подробно обсуждать  дальше,  поэтому  в
  этом случае используем их "молча".


                                     - 174 -
           RT-11, A step by step                    PIP   14-Nov-92


       Для начала давай посмотрим,- говорю я,- что мы имеем на устройстве VM0.

  +---------------
  !  .DIR/FU/BL/VOL VM:<ВК>
  !  -
  !   14-Mar-88
  !   Volume ID: RT11A
  !   Owner    :
  !  SWAP  .SYS  26P 13-Jan-84   8     RT11SJ.SYS  73P 13-Jan-84  34
  !  TT    .SYS   2P 13-Jan-84 107     LD    .SYS   8P 13-Jan-84 109
  !  DX    .SYS   4P 13-Jan-84 117     VM    .SYS   3P 13-Jan-84 121
  !  RK    .SYS   3P 13-Jan-84 124     DP    .SYS   3P 13-Jan-84 127
  !  MT    .SYS   9P 13-Jan-84 130     LP    .SYS   2P 13-Jan-84 139
  !  PC    .SYS   2P 13-Jan-84 141     NL    .SYS   2P 13-Jan-84 143
  !  SL    .SYS  13P 13-Jan-84 145     PIP   .SAV  29P 13-Jan-84 158
  !  DUP   .SAV  45P 13-Jan-84 187     DIR   .SAV  19P 13-Jan-84 232
  !  LET   .SAV   5P 13-Jan-84 251     K52   .SAV  55P 13-Jan-84 256
  !  DUMP  .SAV   8P 13-Jan-84 311     EDIT  .SAV  19P 13-Jan-84 319
  !  FORMAT.SAV  21P 13-Jan-84 338     PATCH .SAV   9P 13-Jan-84 359
  !  STARTS.COM   1P 13-Jan-84 368     V5NOTE.TXT   2P 13-Jan-84 369
  !  < UNUSED >  13            371
  !   24 Files, 363 Blocks
  !   13 Free blocks
  !

  Мы видим, что у нас только 13 свободных блоков, а нам нужно 52 блока.  И  для
  начала удалим два файла - K52.SAV и FORMAT.SAV, используя для этого команду:

  +---------------
  !  .DELETE VM:(K52,FORMAT).SAV<ВК>
  !  -
  !  ?PIP-W-Protected file VM:K52.SAV
  !  --------------------------------
  !  ?PIP-W-Protected file VM:FORMAT.SAV
  !  -----------------------------------
  !  .^
  !  -
  !

       - А она не хочет,- сказал Алеша.
       Вот мы и почувствовали силу защиты файлов. Но так  как  мы  имеем  право
  (как и любой пользователь RT-11) снять защиту, то воспользуемся им:

  +---------------
  !  .UNPROTECT VM:(K52,FORMAT).SAV<ВК>
  !  -
  !

  после чего можно и удалить

  +---------------
  !  .DELETE VM:(K52,FORMAT).SAV<ВК>
  !  -
  !

  и затем снова посмотреть каталог


                                     - 175 -
           RT-11, A step by step                    PIP   14-Nov-92


  +---------------
  !  .DIR/FU/BL/VOL VM:<ВК>
  !  -
  !   14-Mar-88
  !   Volume ID: RT11A
  !   Owner    :
  !  SWAP  .SYS  26P 13-Jan-84   8     RT11SJ.SYS  73P 13-Jan-84  34
  !  TT    .SYS   2P 13-Jan-84 107     LD    .SYS   8P 13-Jan-84 109
  !  DX    .SYS   4P 13-Jan-84 117     VM    .SYS   3P 13-Jan-84 121
  !  RK    .SYS   3P 13-Jan-84 124     DP    .SYS   3P 13-Jan-84 127
  !  MT    .SYS   9P 13-Jan-84 130     LP    .SYS   2P 13-Jan-84 139
  !  PC    .SYS   2P 13-Jan-84 141     NL    .SYS   2P 13-Jan-84 143
  !  SL    .SYS  13P 13-Jan-84 145     PIP   .SAV  29P 13-Jan-84 158
  !  DUP   .SAV  45P 13-Jan-84 187     DIR   .SAV  19P 13-Jan-84 232
  !  LET   .SAV   5P 13-Jan-84 251     < UNUSED >  55            256
  !  DUMP  .SAV   8P 13-Jan-84 311     EDIT  .SAV  19P 13-Jan-84 319
  !  < UNUSED >  21            338     PATCH .SAV   9P 13-Jan-84 359
  !  STARTS.COM   1P 13-Jan-84 368     V5USER.TXT   2P 13-Jan-84 369
  !  < UNUSED >  13            371
  !   24 Files, 363 Blocks
  !   13 Free blocks
  !

  а также можно посмотреть реальный каталог удаленных файлов командой

  +---------------
  !  .DIRECTORY/DELETE VM:<ВК>
  !  -
  !   14-Mar-88
  !   Volume ID: RT11A
  !   Owner    :
  !  K52   .SAV  55  13-Jan-84 256     FORMAT.SAV  21  13-Jan-84 338
  !  EMPTY .FIL  13            371
  !   24 Files, 363 Blocks
  !   89 Free blocks
  !

  Конечно, пустые места на диске, разбросанные как  попало,  не  очень  вредят,
  если они достаточно большие. Но лучше, чтобы свободное место было одним боль-
  шим куском, а файлы при этом были "прижаты" к началу тома (как мы  помним,  у
  дисков более надежные записи на внешних дорожках). Тем более что нам нужен 51
  блок одним куском.
       - А для этого мы должны,- говорит Алеша,- найти в русско-английском сло-
  варе слово СЖИМАТЬ и использовать его в качестве команды:

  +---------------
  !  .SQUEEZE VM:<ВК>
  !  -
  !  VM:/Squeeze; Are you sure? Y<ВК>
  !  ---------------------------
  !  .^
  !

  и сразу ответим на этот предостерегающий вопрос. Почему система  его  задала?
  Мы ведь ничего не хотели удалять?
       - И все-таки вопрос не лишний,- поясняю я,- при сжатии  тома  появляется
  ситуация, когда нарушается адекватное соответствие между файлом и  записью  о
  нем в каталоге (см. первую главу), кроме того, возможно и  нарушение  целост-
  ности самого файла. Поэтому вопрос предлагает подумать, действительно  ли  мы


                                     - 176 -
           RT-11, A step by step                    PIP   14-Nov-92


  уверены в надежности аппаратуры и носителей.
       Правда в последних версиях системы программа DUP стала более умной.  Она
  не только оставляет на месте файлы с типом .BAD, но и может создать их  сама,
  если обнаружит плохие блоки во время выполнения операции SQUEEZE.
       Однако и мы можем предпринять меры к  сохранности  информации.  Если  мы
  укажем ключ /OUTPUT:DEV:, у которого в качестве  аргумента  используется  имя
  выходного устройства, то навязчивого вопроса не будет, а файлы будут  перепи-
  саны на выходное устройство. При этом в операции не участвуют плохие файлы  и
  загрузчики в начале тома.
       Говоря о том, как эту операцию выполнить без помощи KMON

  +---------------
  !  .RUN SY:DUP<ВК>
  !  *[output:=]VM:/SYS<ВК>
  !  *^C^C
  !  .^
  !

  отметим, что ключ /WAIT здесь также может быть использован, а при сжатии сис-
  темного тома происходит автоматическая перезагрузка системы для  восстановле-
  ния указателей на драйверы в таблицах монитора.
       - Осталось посмотреть на плоды своих трудов,- сказал Алеша.

  +---------------
  !  .DIR/FU/BL/VOL VM:<ВК>
  !  -
  !   14-Mar-88
  !   Volume ID: RT11A
  !   Owner    :
  !  SWAP  .SYS  26P 13-Jan-84   8     RT11SJ.SYS  73P 13-Jan-84  34
  !  TT    .SYS   2P 13-Jan-84 107     LD    .SYS   8P 13-Jan-84 109
  !  DX    .SYS   4P 13-Jan-84 117     VM    .SYS   3P 13-Jan-84 121
  !  RK    .SYS   3P 13-Jan-84 124     DP    .SYS   3P 13-Jan-84 127
  !  MT    .SYS   9P 13-Jan-84 130     LP    .SYS   2P 13-Jan-84 139
  !  PC    .SYS   2P 13-Jan-84 141     NL    .SYS   2P 13-Jan-84 143
  !  SL    .SYS  13P 13-Jan-84 145     PIP   .SAV  29P 13-Jan-84 158
  !  DUP   .SAV  45P 13-Jan-84 187     DIR   .SAV  19P 13-Jan-84 232
  !  LET   .SAV   5P 13-Jan-84 251     DUMP  .SAV   8P 13-Jan-84 256
  !  EDIT  .SAV  19P 13-Jan-84 264     PATCH .SAV   9P 13-Jan-84 283
  !  STARTS.COM   1P 13-Jan-84 292     V5USER.TXT   2P 13-Jan-84 293
  !  < UNUSED >  89            295
  !   22 Files, 287 Blocks
  !   89 Free blocks
  !

  И скопировать с системного тома недостающие файлы:

  +---------------
  !  .COPY SY:(IND,DATIME) VM:<ВК>
  !  -
  !            Files copied
  !            ------------
  !  SY:IND   .SAV  to  VM:IND   .SAV
  !  SY:DATIME.COM  to  VM:DATIME.COM
  !  .^
  !

       И так как система снова стала рассказывать о  том,  что  она  делает,  я
  предлагаю Алеше разобраться с этим вопросом.


                                     - 177 -
           RT-11, A step by step                    PIP   14-Nov-92


       - Попробуй сделать ее немногословной,- говорю я ему,- но  для  этого  ты
  должен для ключа подобрать слово, отражающее смысл происходящего явления.
       - Ну это просто,- говорит Алеша,- ведь она  как  судья,  в  велосипедной
  гонке на длинные дистанции, протоколирует, записывая  в  своей  книжке  время
  прохождения каждого круга.
       - Сравнение правильное,- говорю я,- но если ты хочешь использовать слово
  PROTOCOL, которое так и хочет сорваться у тебя с языка, то будешь неправ.
       - А как же тогда быть,- удивился Алеша,- может быть словарь Гэлланда нам
  поможет?
       - Увы, Алеша,- останавливаю я его,- у Гэлланда ты  можешь  найти  нужное
  слово, но для этого тебе придется перерыть весь  словарь,  а  слово  PROTOCOL
  тебе не поможет, потому что давно используется в другом значении.  И  вообще,
  отталкиваясь от русского языка, нужное нам слово не найти. Далеко  не  всегда
  языки разных народов переплетаются так близко, как мы видели до  сих  пор.  Я
  лучше тебе расскажу историю, которая возможно  отражает  превращения  нужного
  нам слова.
       Дело было очень давно. Соединенных Штатов Америки тогда еще не  было.  И
  язык был не американский, а английский. Англия -  страна  островная,  имеющая
  много колоний в разных странах света, славилась своими мореплавателями. Вот и
  подсмотрим за капитаном древнего английского судна.
       Понимали капитаны, что без измерения скорости судна нельзя рассчитать  и
  время в пути, и, следовательно, хватит ли провианта на дорогу. Вот и придума-
  ли привязывать на веревку кусок бревна (LOG - бревно, кусок бревна) и бросать
  получившийся лаг (the LOG), как его стали называть, в воду. Чем сильнее  отк-
  лоняется веревка с куском бревна, тем больше скорость.  А  чтобы  легче  было
  замерять скорость, т.е. отклонение веревки, и сравнивать с предыдущими  заме-
  рами, прибили к борту судна доску (Log-board -  доска  для  записи  показаний
  лага), на которой отмечали отклонение лага.  И  если  ты  вспомнишь,  что  на
  кораблях всего мира всегда идеальный порядок, все  события,  происходящие  на
  корабле, записываются в журнал - бортовой или вахтенный (Log-book), то неуже-
  ли такое важное событие, как скорость корабля, не будет зафиксировано в нем.
       Вполне вероятно, что именно необходимость записывать скорость  судна  на
  протяжении всего пути и неудобство доски для этой цели  привели  к  появлению
  бортового журнала (а так как скорость корабля записывалась при  сдаче  вахты,
  то и вахтенного), в котором последовательно,  в  строгом  временном  порядке,
  производились записи.
       - Но при чем здесь вычислительные машины?- удивился Алеша.
       - А ты посмотри,- замечаю я Алеше,- как последовательно система  записы-
  вала на экране (и как это было в первых  версиях  на  печатающем  устройстве)
  все, что она сделала.
       - И правда,- подхватил Алеша,- значит, слово  LOG,  которое  является  в
  английском языке сокращением от всех упомянутых Вами слов и которое  дословно
  означает "Запись о событии в вахтенном или бортовом журнале", будет  являться
  ключем, разрешающим протоколирование системой  выполняемых  ею  действий.  И,
  соответственно, запрещающим ключем будет /NOLOG. И здесь очень важно отметить
  свойство этой записи - каждая такая запись является  последней  в  момент  ее
  создания. Кроме того, на экране запись о копировании файла  возникает  только
  после успешного выполнения операции.
       - И здесь ты совершенно прав. Но продолжим разговор об этом  слове,  раз
  мы уж углубились в эти изыскания. На этом слове в операционных системах бази-
  руется целый комплекс понятий. Например, чтобы ты сказал про слово LOGIN?
       - Конечно, в свете вышесказанного?- уточнил Алеша.- Практически дословно
  можно сказать, что это команда кому-то - "Запиши [мой] вход".
       - Правильно, и в первых версиях (включая 3.0) были такие команда и прог-
  рамма, ее обслуживающая, которая записывала в определенном файле  информацию,
  кто вошел в систему и когда.
       - И тогда,- продолжает Алеша,- логично будет, чтобы была команда, завер-
  шающая работу пользователя в системе, и записывающая время завершения  работы
  данного пользователя. И называться она должна - LOGOUT.


                                     - 178 -
           RT-11, A step by step                    PIP   14-Nov-92


       - Но так как,- продолжаю я,- RT-11 стала чисто однопользовательской сис-
  темой, то эти команды ей просто не нужны. Но помнить о них нужно, потому  что
  это самые распространенные команды входа в систему и выхода из нее  в  много-
  пользовательских операционных системах. И кроме того, в дальнейшем мы еще раз
  столкнемся как с самим словом LOG, так и с его функциональным значением.
       А теперь вернемся к нашим баранам,- вывожу я из задумчивости Алешу,- что
  нам нужно сделать с виртуальной памятью (устройством VM:), чтобы  загрузиться
  с него, как с диска. Мы ведь уже отмечали, что это возможно.
       - А мы уже говорили,- уверенно отвечает Алеша,- что для одинаковых функ-
  ций не нужно придумывать новые команды. Мы рассматриваем  устройство  VM  как
  диск, поэтому скопируем загрузчик монитора так же, как на диске, и  таким  же
  образом загрузим систему с устройства VM:.

  +---------------
  !  .COPY/BOOT VM:RT11SJ VM:<ВК>
  !  -
  !  .BOOT VM:<ВК>
  !  -
  !

     RT-11SJ  V5.1B (S)
   .SET TT QUIET


                             RT-11 V5.1
                             ----------

       Installation  of  RT-11 version 5.1 is complete and you are
  now  executing  from  the working volume (provided you have used
  the  automatic  installation  procedure).  Digital recomends you
  verify the correct operation of your system's software using the
  verification procedure. To do this, enter the command:

                             IND VERIFY

       Note that verify should be performed only after the distri-
  bution  media have been backed up. This was accomplished as part
  of  automatic  installation  on  all  RL02, RLX02 and RX50 based
  systems, including the micro/PDP-11 and the Professional 300. If
  you  have not completed automatic installation, you must perform
  a  manual  backup  before using VERIFY. Note also, VERIFY is not
  supported   on   RX01  diskettes,  DECtape   I  or  II,  or  the
  Professional 325.

   RT-11 Single Job monitor,  Volume ID   RT11A
   Booted on 23-Sep-86 at 09:11:12 from file VM0:RT11SJ.SYS
   @<EOF>
   .^

       - Вот и все,- говорит Алеша,- и теперь  можно  выключать  диски?  На  их
  контроллере ни одна лампочка не мигает.
       - Конечно, можно,- отвечаю я,- при условии,  что  вся  необходимая  тебе
  информация находится на устройстве VM: или на  каких-либо  других  носителях.
  Если бы мы работали на ЭВМ "Электроника-79"  или  СМ-1420,  у  которых  объем
  памяти достигает 4М байт, то мы могли бы переписать на устройство  VM:  почти
  полтора жестких диска RK:, выключить их, чтобы не изнашивались, а  поработав,
  скопировать сделанное назад, на RK. И работать быстрее, и диски не портятся.
       - Но если что-нибудь случится,- вспомнил Алеша наши приключения,- напри-
  мер, выключат электричество - вся работа может пропасть.


                                     - 179 -
           RT-11, A step by step                    PIP   14-Nov-92


       - Конечно, и поэтому прежде, чем решаться на подобные эксперименты, нуж-
  но убедиться в надежности аппаратуры и электропитания в помещении.
       Однако много программ создают во время своей работы промежуточные файлы,
  которые, во-первых, не нужны после получения окончательных результатов и, во-
  вторых, их всегда можно получить снова. А ты помнишь, как  эти  промежуточные
  файлы разбивают на кусочки пространство на диске - так пусть занимаются  этим
  делом где-нибудь на стороне.
       - И,- догадался Алеша,- устройство VM: самое подходящее для этого место.
       - Правильно.
       Но продолжим работу.






       8.2. Логические диски



       - Алеша, мы ведь не так часто будем работать на  СОТКЕ,-  напоминаю  я,-
  пока нам более доступен ДВК. Поэтому я предлагаю, раз мы имеем такую  возмож-
  ность, подготовить новую систему для ДВК.
       - Но она же будет отличаться от старой,- заметил Алеша,- и, наверное, от
  той, с которой мы сейчас работаем?
       - Это не страшно. От старой она будет отличаться только  дополнительными
  программами, которые мы скопировали  с  архивного  диска.  Мелкие  улучшения,
  которые в ней произошли, мы отметим по пути, когда с ними  столкнемся.  Таким
  образом, все, что мы говорили до сих пор, действительно и для этой системы. И
  во-вторых, от той системы, с которой мы сейчас работаем, она будет отличаться
  только размерами диска.
       - То есть это в нашей власти,- удовлетворенно заметил Алеша,- менять  ее
  возможности и носители.
       - Конечно,- отвечаю я,- но это было не всегда. До появления  версии  4.0
  каждый монитор "знал" только свое устройство,  и  такой  простой  возможности
  переходить от устройства к устройству не было. Это,  например,  касается  тех
  версий ОС ДВК, которые  имеют  монитор  MXMNSJ.SYS,  соответствующий  RT-11SJ
  V3.0. А для начала мы создадим виртуальную модель нашего гибкого диска  прямо
  на нашем рабочем жестком диске. Он ведь надежнее,  и  будет,  таким  образом,
  хранить эталон нашей рабочей системы. Ты, конечно, помнишь полный объем  гиб-
  кого диска?
       - Да,- отвечает Алеша,- 494. блока вместе с каталогом.
       - Прекрасно,- ставлю ему задачу,- тогда нужно создать на диске RK3: файл
  размером 494. блока, и пусть для начала он находится на любом свободном  мес-
  те.
       - Ага,- догадался Алеша,- опять дословный перевод на английский?
       И не теряя времени набрал команду.

  +---------------
  !  .CREATE/ALLOCATE:494. RK3:DVK2M.DSK<ВК>
  !  -
  !  .^
  !

  Пусть наш файл называется так же, как и комплекс, на котором  мы  в  основном
  работаем. И его тип отражает тот факт, что это будет диск. А размер мы  заре-
  зервируем ключем /ALLOCATE, какой нам нужно.
       - Ну что же,- говорю я,- неплохо для  начала.  А  если  посмотреть,  что
  получилось? Только, пожалуйста, не выводи полный каталог.


                                     - 180 -
           RT-11, A step by step                    PIP   14-Nov-92


       - Пожалуйста,- Алеша ввел команду:

  +---------------
  !  .DIR/FU/BL/VOL RK3:DVK*<ВК>
  !  -
  !   14-Mar-88
  !   Volume ID: RT-11SJ V5.1
  !   Owner    : Дотошкин Ал.
  !  DVK2M .DSK  494  14-Mar-88 425   < UNUSED >  3881            919
  !   1 Files, 494 Blocks
  !   3881 Free blocks
  !

  Как и полагается, мы увидели в каталоге запись о файле.
       - Правильно, Алеша,- уточняю я,-  именно  запись.  Здесь  мы  посоветуем
  читателю вернуться к первой главе. В действительности  файла,  как  такового,
  еще нет. Мы не знаем, как организована информация (и, вообще,  имеет  ли  она
  для нас значение) в той области диска, на которую указывает запись в  катало-
  ге. Пока еще нет адекватного соответствия записи о файле и файла, как  объек-
  та.
       Однако необходимо как-то связать эту область на диске, используя, конеч-
  но, эту запись о ней в каталоге, с устройством LDN: (Logical Disk)  с  каким-
  нибудь номером. Как это сделать?
       - Это уже сложно,- нахмурил брови Алеша,- ведь логичнее связывать какие-
  нибудь постоянные объекты. А здесь мы подчеркиваем,  что  с  устройством  LD:
  можно обращаться, как с диском.
       - Это так Алеша,- говорю я,- но если ты хочешь  работать  с  диском,  то
  присмотрись, как устанавливается большинство дисков и диск-пакетов.
       - Они устанавливаются сверху,- оживился Алеша,- и опять лезть в словари?
       - Конечно,- подаю я ему оба словаря,- сначала найди в  русско-английском
  словаре слово "устанавливать".
       - Нашел,- говорит Алеша,- тут очень много  значений,  отражающих  разные
  стороны жизни. Но технических терминов только два - MOUNT и INSTALL.
       - Вот и вычисли логическим путем, как Шерлок Холмс,  какой  из  них  нам
  поможет.
       - А для этого я пойду от  обратного,-  говорит  Алеша,-  посмотрим,  как
  определяет слова MOUNT и INSTALL англо-русский словарь.
       Удивительно, но слово INSTALL имеет основное значение - официальное вве-
  дение в должность. Анализируя остальные значения, которых  достаточно  много,
  можно сказать, что обобщенный смысл слова INSTALL - устанавливать  на  место,
  вводя (водворяя, помещая) вовнутрь.
       - Алеша,- замечаю я,- ты сейчас прикоснулся к очень интересной проблеме:
  имея одинаковый смысл, слова могут отражать традиции их употребления. Во вся-
  ком случае, все, что ты сказал про слово INSTALL, постарайся запомнить.
       - Так, значит, не оно,- Алеша, не унывая, перекинул пару сотен страниц в
  словаре,- тогда я нашел слово MOUNT. У него еще больше значений. Все они  так
  или иначе связаны с горой. И в нашем случае - это "устанавливать на  возвыше-
  ние". Можно в шутку сказать, что логический диск взгромоздился на файл, кото-
  рый находится на жестком диске.
       - Вот именно  -  взгромоздился.  Теперь  осталось  определить  синтаксис
  команды.
       - А в этом нам помогут те поиски смысла  слов,  которые  мы  только  что
  осуществили,- Алеша взялся за карандаш,- команда нам ясна. Файл, который дол-
  жен быть связан с логическим диском, находится на жестком диске RK3:. Поэтому
  логический диск мы должны "взгромоздить на файл, и, соответственно, на  жест-
  кий диск. И если сказать эту фразу полностью  -  взгромоздить  LD4:  на  файл
  RK3:DVK2M.DSK.


                                     - 181 -
           RT-11, A step by step                    PIP   14-Nov-92


       И Алеша ввел команду:

  +---------------
  !  .MOUNT LD4: RK3:DVK2M.DSK<ВК>
  !  -
  !  .^
  !

  И сразу посмотрим, что изменилось в каталоге.

  +---------------
  !  .DIR/FU/BL/VOL RK3:DVK*<ВК>
  !  -
  !   14-Mar-88
  !   Volume ID: RT-11SJ V5.1
  !   Owner    : Дотошкин Ал.
  !  DVK2M .DSK  494P 14-Mar-88 425   < UNUSED >  3881             919
  !   1 Files, 494 Blocks
  !   3881 Free blocks
  !

  Ничего не изменилось, кроме одного признака - файл стал защищенным, т.е.  его
  нельзя  удалить.  Но  с  другой  стороны,  система  теперь  знает,  что  файл
  RK3:DVK2M.DSK может рассматриваться как устройство LD4:. А значит, можно пов-
  торить все операции по инициализации файловой  системы  на  этом  устройстве.
  Можно также заметить, что команда MOUNT по умолчанию требует тип файла  .DSK,
  однако если пользователь его указывает явно, то тип файла может быть любой.
       - Вот так и сделаем,- обрадовался Алеша,- и после  этого  скопируем  все
  файлы нашей рабочей системы на устройство LD4:.
       И Алеша ввел команду.

  +---------------
  !  .INITIALIZE/VOLUMEID LD4:<ВК>
  !  -
  !  LD4:/INITIALIZE - Are you sure? Y<ВК>
  !  --------------------------------
  !  Volume  ID: RT-11SJ V5.1<ВК>
  !  ------------
  !  Owner name: Дотошкин Ал.<ВК>
  !  ------------
  !  .COPY/SYSTEM/NOLOG SY: LD4:<ВК>
  !  -
  !  ?PIP-F-Device full LD4:DVK2M.DSK
  !  --------------------------------
  !  .^
  !  -

       - Ого,- улыбнулся Алеша,- она попыталась скопировать сам файл логическо-
  го диска на устройство LD4:. Ведь я опять дал групповую спецификацию  файлов.
  И ничего страшного не случилось. Ведь файл DVK2M.DSK расположен последним  на
  диске RK3:, и все, что нам нужно было скопировать, влезло.
       - Да, это тот случай, когда на фатальные ошибки можно смотреть спокойно.
  Кроме того, иногда для упрощения команды можно использовать такие приемы.
       - Да, но теперь нужно записать  загрузчик  монитора  в  начальные  блоки
  тома,- здесь Алеша задумался,- и какой загрузчик должен быть, какой монитор в
  первую очередь он должен загрузить и с какого устройства?
       - Вот сколько вопросов сразу,- пытаюсь я помочь Алеше,-  давай  подумаем
  сначала над таким вопросом - можем ли мы  загрузить  систему  из  логического
  диска при включении ЭВМ и что для этого нужно?


                                     - 182 -
           RT-11, A step by step                    PIP   14-Nov-92


       - Для этого нужно выполнить следующие действия,-  Алеша  начал  перечис-
  лять:
       - аппаратный загрузчик должен загрузить систему с какого-нибудь физичес-
  кого диска, в нашем случае с RK3:;
       - эта система должна узнать, с каким  номером  логического  диска  какой
  файл связан, например из команды MOUNT;
       - после этого система должна знать, из какого  логического  диска  нужно
  загружаться, ведь на физическом диске могут находиться несколько файлов, свя-
  занных с логическими дисками и т.д. и т.п.
       - Алеша, а не слишком ли сложно,- останавливаю я его,- может быть, прос-
  то скажем пользователю, что загрузка системы  может  производиться  только  с
  физических устройств.
       - А как же тогда виртуальная память,- спрашивает Алеша,- наше  несущест-
  вующее устройство VM:?
       - Конечно, устройство VM: реально не существует. Но память у  процессора
  реально существует и, более того, ее расположение всегда  известно.  И  после
  загрузки операционной системы  с  диска  известно  состояние  всех  устройств
  управления этой памятью. Кроме того, ты  ведь  производишь  загрузку  с  VM:,
  находясь в клавиатурном мониторе, а не с помощью аппаратного загрузчика. Поэ-
  тому в данном случае мы можем считать устройство VM: реальным.
       - Тогда поставим вопрос по другому,- не отступает Алеша от своей  идеи,-
  мы говорили, что в этом файле создадим эталонную копию системы для  ДВК.  Как
  бы слепок с дискеты диаметром 8 дюймов. Можем ли мы записать на этот том заг-
  рузчик того устройства, на котором система будет реально существовать.
       - Вот это уже другое дело, для этого достаточно указать в команде  копи-
  рования загрузчика имя устройства (из двух символов). Нужно только  отметить,
  что такая возможность появилась только с версии 4.0 и предлагается фирмой DEC
  совершенно для других целей, но так как  логика  команды  это  позволяет,  мы
  можем использовать в данном случае свои имена устройств.
       - Наверное, наше уточнение,- Алеша уже начал набирать  команду,-  должно
  учитывать стиль команд, разобранных выше. Например, так:

  +---------------
  !  .COPY/BOOT:DX LD4:RT11SJ LD4:<ВК>
  !  -
  !  .^
  !  -

  и опять необходимо отметить правило - копировать загрузчик монитора,  находя-
  щегося на том же устройстве, начальные блоки которого он копируется.
       - И последнее, что тебе нужно сделать,- говорю я Алеше,- это скопировать
  устройство LD4: на устройство DX: и  после  этого  загрузиться  с  устройства
  DX0:.
       - Это уже не сложно,- уверенно отвечает  Алеша,-  мы  хотим  скопировать
  одно устройство на другое и поэтому должны об этом сказать в команде COPY.

  +---------------
  !  .COPY/DEVICE LD4: DX0:<ВК>
  !  -
  !  DX0:/COPY; Are you sure? Y<ВК>
  !  ------------------------
  !  .BOOT DX0:<ВК>
  !  -

  И когда после красивой картинки появилась точка, мы можем сказать, что сдела-
  ли все правильно и в результате наших действий "пересели на  другую  табурет-
  ку", т.е. в качестве системного устройства теперь используется DX0:.
       - Ну, Алеша, и погулял ты сегодня по устройствам,-  шучу  я,-  системным
  устройством у тебя сегодня были и RK3:, и VM:, и теперь  DX:.  Нечто  похожее


                                     - 183 -
           RT-11, A step by step                    PIP   14-Nov-92


  происходит, когда ты работаешь в таких популярных системах, как CP/M, MS-DOS,
  RSX-11 или UNIX, только там они не  системные,  а  твои  рабочие  (на  данный
  момент времени) устройства.






       8.3. А если обмануть систему,


                                       или
                            Работа только с каталогами


       - А как это?- недоуменно спрашивает Алеша, прочитав это название.
       - А ты не торопись,- отвечаю я,- а для начала попробуй выполнить  некор-
  ректные действия - скопируй устройство LD4: на устройство VM:.
       - Только мы должны проинициализировать устройство VM:,- сказал Алеша,- а
  уж потом...

  +---------------
  !  .INI/NOQUERY VM:<ВК>
  !  -
  !  .COPY/DEVICE LD4: VM:<ВК>
  !  -
  !  Output device to small; Are you sure? Y<ВК>
  !  --------------------------------------
  !  .^
  !  -

  ... скопировали,- Алеша удивленно заморгал глазами,- но  ведь  все  файлы  не
  должны были влезть, мы уже с этим сталкивались. А если мы посмотрим каталог:

  +---------------
  !  .DIR/FU/BL/VOL VM:<ВК>
  !  -
  !


                                     - 184 -
           RT-11, A step by step                    PIP   14-Nov-92


  то в нем есть все файлы.

   21-Mar-88
   Volume ID: RT-11SJ V5.1
   Owner    : Дотошкин Ал.
  SWAP  .SYS  26P 13-Jan-84   8     RT11SJ.SYS  73P 13-Jan-84  34
  TT    .SYS   2P 13-Jan-84 107     LD    .SYS   8P 13-Jan-84 109
  DX    .SYS   4P 13-Jan-84 117     VM    .SYS   3P 13-Jan-84 121
  RK    .SYS   3P 13-Jan-84 124     DP    .SYS   3P 13-Jan-84 127
  MT    .SYS   9P 13-Jan-84 130     LP    .SYS   2P 13-Jan-84 139
  PC    .SYS   2P 13-Jan-84 141     NL    .SYS   2P 13-Jan-84 143
  SL    .SYS  13P 13-Jan-84 145     PIP   .SAV  29P 13-Jan-84 158
  DUP   .SAV  45P 13-Jan-84 187     DIR   .SAV  19P 13-Jan-84 232
  LET   .SAV   5P 13-Jan-84 251     K52   .SAV  55P 13-Jan-84 256
  DUMP  .SAV   8P 13-Jan-84 311     EDIT  .SAV  19P 13-Jan-84 319
  FORMAT.SAV  21P 13-Jan-84 338     PATCH .SAV   9P 13-Jan-84 359
  STARTS.COM   1P 13-Jan-84 368     V5USER.TXT   2P 13-Jan-84 369
  IND   .SAV  51P 13-Jan-84 371     DATIME.COM   1P 13-Jan-84 422
  < UNUSED >  71            423
   26 Files, 415 Blocks
   71 Free blocks

       - Алеша,- говорю я,- давай вернемся к первой главе, вспомни  рисунок,  в
  котором мы показали руки и глаза системы. Это как раз та ситуация, когда пра-
  вая рука не ведает, что делает левая. Программа  DUP  скопировала,  с  нашего
  благословения, большое устройство на маленькое, столько, сколько влезло, т.е.
  последних файлов, указанных в каталоге, не существует. Так как программа  DIR
  также работает только с каталогами, то и показывает нам, нисколько  над  этим
  не задумываясь, каталог устройства несоответствующий реальному.
       Чтобы лучше понять это (а точнее прочувствовать), давай создадим в  виде
  файла логического диска только каталог LD4:.
       - Да, но для этого необходимо конструировать команду. Ключи, которые  мы
  использовали раньше, если их смысл соответствует нашим целям, не будем приду-
  мывать снова. Итак, мы  опять  копируем  устройство  на  устройство,  поэтому
  используем команду COPY/DEVICE. Но так как мы копируем не все  устройство,  а
  только часть его, то используем ключи /START и /END для входного устройства и
  в качестве аргументов - номера блоков начала и конца копируемой области.
       - Алеша,- напоминаю я ему,- не забудь, что в результате мы должны  полу-
  чить файл, который можно потом будет связать с логическим диском.
       - Конечно,- парирует Алеша,- и для того чтобы в каталоге выходного  уст-
  ройства была создана запись с указанным именем и типом файла, после  специфи-
  кации выходного файла укажем ключ /FILES.

  +---------------
  !  .COPY/DEV LD4:/START:0/END:12. RK3:KATAL.DSK/FILES<ВК>
  !  -
  !  RK3:KATAL.DSK/COPY; Are you sure? Y<ВК>
  !  ----------------------------------
  !  .DIRECTORY/FULL/BLOCKS/VOLUMEID RK3:<ВК>
  !  -
  !  .^
  !  -


                                     - 185 -
           RT-11, A step by step                    PIP   14-Nov-92


       И убедились в том, что появился файл размером 13 блоков.

   21-Mar-88
   Volume ID: RT-11SJ V5.1
   Owner    : Дотошкин Ал.
  SWAP  .SYS   26P 13-Jan-84  10     RT11SJ.SYS  73P 13-Jan-84  36
  TT    .SYS    2P 13-Jan-84 109     LD    .SYS   8P 13-Jan-84 111
  DX    .SYS    4P 13-Jan-84 119     VM    .SYS   3P 13-Jan-84 123
  RK    .SYS    3P 13-Jan-84 126     DP    .SYS   3P 13-Jan-84 129
  MT    .SYS    9P 13-Jan-84 132     LP    .SYS   2P 13-Jan-84 141
  PC    .SYS    2P 13-Jan-84 143     NL    .SYS   2P 13-Jan-84 145
  SL    .SYS   13P 13-Jan-84 147     PIP   .SAV  29P 13-Jan-84 160
  DUP   .SAV   45P 13-Jan-84 189     DIR   .SAV  19P 13-Jan-84 234
  LET   .SAV    5P 13-Jan-84 253     K52   .SAV  55P 13-Jan-84 258
  DUMP  .SAV    8P 13-Jan-84 313     EDIT  .SAV  19P 13-Jan-84 321
  FORMAT.SAV   21P 13-Jan-84 340     PATCH .SAV   9P 13-Jan-84 361
  STARTS.COM    1P 13-Jan-84 370     V5USER.TXT   2P 13-Jan-84 371
  IND   .SAV   51P 13-Jan-84 373     DATIME.COM   1P 13-Jan-84 424
  DVK2M .DSK  494P 16-Mar-86 425     KATAL .DSK  13  21-MaR-88 919
  < UNUSED > 3868            932
   28 Files, 922 Blocks
   3868 Free blocks

       - А теперь, Алеша,- предлагаю я,- смонтируй получившийся файл  (размером
  13. блоков) с логическим диском, например LD2:, и посмотри его каталог.
       - Сейчас,- включился в игру Алеша,- только я каталог  распечатаю  поком-
  пактней.

  +---------------
  !  .MOUNT LD2: RK3:KATAL<ВК>
  !  -
  !  .DIR/FAST/FULL LD2:<ВК>
  !  -

   21-MAR-88
  SWAP  .SYS    RT11SJ.SYS    TT    .SYS    LD    .SYS    DX    .SYS
  VM    .SYS    RK    .SYS    DP    .SYS    MT    .SYS    LP    .SYS
  PC    .SYS    NL    .SYS    SL    .SYS    PIP   .SAV    DUP   .SAV
  DIR   .SAV    LET   .SAV    K52   .SAV    DUMP  .SAV    EDIT  .SAV
  FORMAT.SAV    PATCH .SAV    STARTS.COM    V5USER.TXT    IND   .SAV
  DATIME.COM    < UNUSED >
   26 Files, 415 Blocks
   71 Free blocks

  Вот здорово,- рассмеялся Алеша,- мы то знаем, что файл имеет размер 13.  бло-
  ков. Однако программа DIR в каталоге показывает, что в нем имеются все  (яко-
  бы) файлы и объем этого логического диска составляет 494. блока. Конечно, это
  игра, но позвольте вопрос - зачем это нужно.
       - Котята играют с собственным хвостом, чтобы потом  лучше  охотиться  на
  мышей,- объясняю я,- наша игра в этом случае похожа на игру котят. Хотя  мно-
  гие каталоги в этой книге были получены способом, которым  ты  воспользовался
  сейчас.
       А если серьезно, то ты должен был заметить, что и в  пятой  главе,  и  в
  этой мы неявно рассматривали способы восстановления доступа к нужной информа-
  ции в случае какой-нибудь аварии. Этим мы и занимаемся сейчас.  Продемонстри-
  ровав различные случаи выделения каталогов из  массива  данных,  мы  показали
  способы восстановления информации. Как и в какой последовательности их приме-
  нять, пользователь должен сообразить сам. Один из вариантов может быть такой.
       Если информация на большом диске (например, на диск-пакете или  "Винчес-


                                     - 186 -
           RT-11, A step by step                    PIP   14-Nov-92


  тере") хранится как бы упакованной в логические диски, то ее восстановление в
  случае потери основного каталога во  многом  упрощается.  Начало  логического
  диска найти очень просто - это те шесть блоков плюс  как  минимум  два  блока
  каталога, которые мы рассматривали в начале пятой главы. Найдя  начало  файла
  логического диска, можно в основном каталоге создать запись  об  этом  файле,
  указав его размер, например 40. блоков, - это мы уже  умеем  -  связать  этот
  файл с каким-либо номером логического диска. Все  вышеперечисленные  действия
  не причиняют вреда той информации, до которой мы пока добраться не можем.  Но
  посмотрев каталог, мы очень просто узнаем действительный размер нашего  логи-
  ческого диска. А после этого можно дать "задний ход" - удалить нашу фиктивную
  запись в каталоге и создать новую, с действительным размером файла.
       - Команду для этого придумать нетрудно,-  догадался  Алеша,-  достаточно
  добавить ключ /START:NBLK, указывающий абсолютный номер блока на томе.

  +---------------
  !  .CREATE RK3:PRIMER.DSK/START:600./ALLOCATE:40.<ВК>
  !  -
  !  .^
  !  -

       То, что ключи указаны не в  команде,  а  после  спецификации  файла,  не
  является требованием системы. Это просто логичнее с точки зрения естественно-
  го языка.
       - А можно ли это,- спрашивает Алеша,- сделать  за  один  прием?  Ведь  в
  основном каталоге это место считается свободным. Можем ли мы  увеличить  соз-
  данный нами файл до нужного размера?
       - Попробуй,- предлагаю я ему,- но для этого тебе придется...
       - Найти соответствующий ключ,- перебивает меня Алеша,- и конечно  же,  в
  русско-английском словаре. Как всегда, здесь много значений,  но  одно  прямо
  указывает на нашу цель - увеличение, в смысле расширения,-  EXTENSION.  Тогда
  остается только в  качестве  параметра  использовать  число,  указывающее  НА
  СКОЛЬКО БЛОКОВ нужно увеличить размер файла. Например:

  +---------------
  !  .CREATE RK3:KATAL.DSK/EXTENSION:481.<ВК>
  !  -
  !
     и проверить

  +---------------
  !  .DIR/FU/BL/VOL RK3:KATAL<ВК>
  !  -
  !   21-MAR-88
  !   Volume ID: RT-11SJ V5.1
  !   Owner    : Дотошкин Ал.
  !  KATAL .DSK 494P 21-MAR-88 919    < UNUSED > 3387          1413
  !   1 Files, 494 Blocks
  !   3387 Free blocks

  как и в остальных случаях мы опять можем обойтись без помощи KMON.
       Для создания записи о файле RK3:DVK2M.DSK  пришлось  бы  воспользоваться
  программой DUP. Но так как аналога для ключа /ALLOCATE нет, то придется  вос-
  пользоваться более сложным приемом:


                                     - 187 -
           RT-11, A step by step                    PIP   14-Nov-92


  +---------------
  !  .RUN SY:DUP?ВК>
  !  -
  !  *RK3:DVK2M.DSK[494.]=/C<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  где число в квадратных скобках указывает на размер будущего файла.
       А для того чтобы при этом указать и номер блока, с которого будет  начи-
  наться файл, нужно добавить ключ /G:N.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:PRIMER.DSK[40.]=/C/G:600.<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  Однако до версии 4.0 (команды CREATE тогда еще не было) эта операция выполня-
  лась иначе.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:PRIMER.DSK=/C:600.:400.<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  Причем размер файла (40. блоков) по умолчанию принимался равным одному  блоку
  и мог не указываться.
       Ключ для расширения оставался неизменным на протяжении всех версий. Поэ-
  тому мы можем, не задумываясь, выполнить операцию.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:KATAL.DSK=/T:481.<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

       Что же касается копирования в образе устройства, то здесь также произош-
  ли изменения при появлении версии 4.0, и операцию, которую раньше выполняли в
  два этапа


                                     - 188 -
           RT-11, A step by step                    PIP   14-Nov-92


  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:A=RK3:/I:425.:437.:919.<ВК>
  !  -
  !  RK3:/COPY; Are you syre? Y<ВК>
  !  -------------------------
  !  *RK3:KATAL.DSK/C/G:425.:12.<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  теперь можно выполнять за один прием. Но сначала скажем, что при  копировании
  для выходного устройства необходимо было указывать фиктивное имя файла "A", а
  в качестве параметров для ключа /I - (IMAGE - образ)  нужно  было  последова-
  тельно указать начальный номер блока входного устройства, конечный номер бло-
  ка входного устройства и начальный номер блока выходного устройства. В совре-
  менных версиях (начиная с V4.0 и выше) эта операция выполняется много проще.

  +---------------
  !  .RUN SY:DUP<ВК>
  !  -
  !  *RK3:KATAL.DSK[/G:919.]=LD4:/I/G:0/E:12./F<ВК>
  !  -
  !  RK3:/COPY; Are you sure? Y<ВК>
  !  -------------------------
  !  *^C^C
  !  -
  !  .^

  Здесь используется то свойство,  что  интерпретатор  командной  строки  (CSI)
  начиная с версии 4.0 умеет различать, к входному или выходному файлу относит-
  ся ключ. Это в свою очередь позволило сделать команду логичнее и использовать
  меньший арсенал ключей. Ключ /F - FILES теперь указывает  также  на  то,  что
  копируется файл.

       - А действительно, все оказалось очень серьезным,- сказал Алеша.- А  тот
  случай с двумя диск-пакетами вы также исправили.
       - Да, Алеша,- отвечаю я,- но так как на СОТКЕ есть еще одно  устройство,
  с которым мы не можем работать на ДВК, перейдем к нему.






       8.4. Копирование файлов на магнитную ленту




       - Да,- вспомнил Алеша,-  мы  про  магнитофон  всегда  вспоминали  только
  вскользь. Нужно же нам на нем когда-нибудь поработать.
       - А для этого возьми у Александра Геннадьевича на время  чистую  ленту,-
  говорю я Алеше. Такая лента должна всегда быть под рукой для всяких профилак-
  тических и промежуточных работ.
       - Вот принес,- Алеша сразу включил магнитофон и начал заправлять  ленту.
  Как правило, на магнитофонах  между  подкассетниками  есть  рисунок,  который


                                     - 189 -
           RT-11, A step by step                    PIP   14-Nov-92


  показывает, как заправлять ленту, а мы покажем это на рисунке ниже.

  +----------========-========-========-========-=======-=======-+
  I вкл/выкл !ЗАГРУЗ! !ДИСТАН! !ПЕРЕМ.! !ВПЕРЕД! !НАЗАД! !СБРОС! I
  I----------========-========-========-========-=======-=======-I
  I              WWW                            +++              I
  I         WWWWWWWWWWWWW                  +           +         I
  I      WWWWWWWWWWWWWWWWWWW            +                 +      I
  I    WWWWWWWWWWWWWWWWWWWWWWW        +                     +    I
  I   WWWWWWWWWWWWWWWWWWWWWWWWW      +                       +   I
  I  WWWWWWWWWWWW***WWWWWWWWWWWW    +           ***           +  I
  I WWWWWWWWW***********WWWWWWWWW  +        ***********        + I
  I WWWWWWWW*************WWWWWWWW  +       *************       + I
  IWWWWWWWW***************WWWWWWWW+       ***************       +I
  IWWWWWWWW***************WWWWWWWW+       ***************       +I
  IWWWWWWWW***************WWWWWWWW+       \*************        +I
  I WWWWWWWW*************WWWWWWWW  +       \***********        + I
  I WWWWWWWWW***********WWWWWWWWW  +        \*********         + I
  I  WWWWWWWWWWWW***WWWWWWWWWWWW    +        \  ***           +  I
  I   WWWWWWWWWWWWWWWWWWWWWWWWW      +        \              +   I
  I    WWWWWWWWWWWWWWWWWWWWWWW        +        \            +    I
  I      WWWWWWWWWWWWWWWWWWW            +       \         +      I
  I         WWWWWWWWWWWWW                  +     \     +         I
  I          ....WWW./                          +++\..           I
  I        ./                                      WWW\          I
  I        WW   /--I"""""""""""""""""""""""""""-- WWWWI          I
  I        WW../   I                          I  \.WW/           I
  I................IWWWWWWWWWWWWWWWWWWWWWWWWWWI..................I

       - Все, готово,- отрапортовал Алеша,- заправил.
       - Ошибаешься,- поправляю его я,- нужно еще установить ленту на  логичес-
  кое начало - блестящий маркер. Для этого нажми последовательно и не  торопясь
  кнопки "СБРОС" и "ЗАГРУЗКА". И только после того,  как  лента  установится  в
  начальное положение и загорятся индикаторы "ЗАГРУЗКА" и "ДИСТАН",  магнитофон
  будет готов к работе. Кнопка-индикатор "ДИСТАН" позволяет переводить магнито-
  фон в автономный режим и отключать его от ЭВМ.
       - Теперь,- Алеша уже действует самостоятельно,-  нужно  проинициализиро-
  вать файловую систему.

  +---------------
  !  .INIT/VOL MT0:<ВК>
  !  -
  !  MT0:/INITIALIZE; Are you sure? Y<ВК>
  !  -------------------------------
  !  Volume  ID: ПРОБА<ВК>
  !  ------------
  !  Owner name: АЛЕША<ВК>
  !  ------------


                                     - 190 -
           RT-11, A step by step                    PIP   14-Nov-92


  И сразу посмотреть каталог.

  +---------------
  !  .DIR/FU/BL/VOL MT0:<ВК>
  !  -
  !   21-MAR-88
  !   Volume ID: ПРОБА
  !   Owner    : АЛЕША
  !  < UNUSED >     0                 0
  !  0 Files, 0 Blocks
  !

       - А теперь,- подсказываю я Алеше,- попробуй скопировать файлы, например,
  из LD4: на ленту обычным способом.
       - Сейчас,- и Алеша ввел команду

  +---------------
  !  .COP/SYSTEM LD4: MT0:<ВК>
  !  -
  !             Files copied:
  !             -------------
  !  LD4:SWAP  .SYS  to  MT0:SWAP  .SYS
  !  . . . . . . . . . . . . . . . . .
  !  . . . . . . . . . . . . . . . . .

  - и она так перед каждым файлом будет перематывать ленту в начало,- возмутил-
  ся Алеша,- так она и дырку протрет. Неужели ничего нельзя сделать?
       - Алеша,- успокаиваю я его,- прежде чем расстраиваться, распечатай ката-
  лог магнитной ленты, а потом вспомни пятую главу. И тогда вместе подумаем.
       - Да, но я надеюсь, что каталог она соберет за один проход,-  рассержен-
  ный Алеша ввел команду:

  +---------------
  !  .DIR/FU/BL/VOL MT0:<ВК>
  !  -

   21-MAR-88
   Volume ID: ПРОБА
   Owner    : АЛЕША
  SWAP  .SYS  26  21-MAR-88   1     RT11SJ.SYS  73  21-MAR-88   2
  TT    .SYS   2  21-MAR-88   3     LD    .SYS   8  21-MAR-88   4
  DX    .SYS   4  21-MAR-88   5     VM    .SYS   3  21-MAR-88   6
  RK    .SYS   3  21-MAR-88   7     DP    .SYS   3  21-MAR-88   8
  MT    .SYS   9  21-MAR-88   9     LP    .SYS   2  21-MAR-88  10
  PC    .SYS   2  21-MAR-88  11     NL    .SYS   2  21-MAR-88  12
  SL    .SYS  13  21-MAR-88  13     PIP   .SAV  29  21-MAR-88  14
  DUP   .SAV  45  21-MAR-88  15     DIR   .SAV  19  21-MAR-88  16
  LET   .SAV   5  21-MAR-88  17     K52   .SAV  55  21-MAR-88  18
  DUMP  .SAV   8  21-MAR-88  19     EDIT  .SAV  19  21-MAR-88  20
  FORMAT.SAV  21  21-MAR-88  21     PATCH .SAV   9  21-MAR-88  22
  STWRTS.COM   1  21-MAR088  23     V5USER.TXT   2  21-MAR-88  24
  IND   .SAV  51  21-MAR-88  25     DATIME.COM   1  21-MAR-88  26
   26 Files, 415 Blocks

  - Интересно, а куда подевались начальные  номера  блоков,-  удивился  Алеша,-
  вместо них только порядковые номера файлов. И признака защиты файлов нет.
       - А  по  пути  заметь,  что  дата   создания   файлов   теперь   указана
  сегодняшняя,- говорю я,- мы уже говорили, что при работе с  лентой  последняя
  по времени запись является последней на ленте. И изменение даты создания фай-


                                     - 191 -
           RT-11, A step by step                    PIP   14-Nov-92


  лов, которое ты сейчас увидел, является следствием этого правила. И  по  этой
  причине нет признака PROTECT. Мы не можем удалить файл с ленты или переимено-
  вать его, поэтому эти признаки не имеют смысла.
       Кроме того, ты должен вспомнить, что понятие начального номера  блока  в
  данном случае не совсем корректно. С одной стороны, на каждый файл добавляет-
  ся по метке начала и конца файла, каждая из которых занимает по одному блоку.
  С другой стороны, межфайловые промежутки не имеют строго определенных  разме-
  ров. Поэтому более точно положение файла на ленте определяет  его  порядковый
  номер или позиция файла. Вот опираясь на него (или на нее) и попробуем управ-
  лять магнитофоном.
       Так как мы не указывали ключ /POSITION, то  параметр  при  нем  считался
  равным нулю. В принятой фирмой DEC стратегии (а она во многом схожа со  стра-
  тегией в других системах) это означает, что перед  записью  очередного  файла
  система возвращает ленту в исходное положение и  просматривает  ее  в  поиске
  такой же спецификации файла. Если до достижения метки конца тома будет встре-
  чен файл с таким же именем и типом, система напечатает на терминале сообщение
  и не будет делать копию этого файла.  При  чтении  с  ленты  перемотка  будет
  происходить перед поиском указанного файла. Если указано несколько файлов, то
  перемотка будет происходить перед поиском каждого из них. Этого  можно  избе-
  жать, если указать групповую спецификацию файлов. В  таком  случае  перемотка
  произойдет только один раз, и система скопирует все определенные файлы.
       Другая ситуация получается, если мы укажем ключ  /POSITION:N  с  положи-
  тельным аргументом. При чтении с ленты сначала находится файл с соответствую-
  щим номером позиции, а затем сравнивается его имя и тип с указанным в команд-
  ной строке. Если они совпадают, то файл копируется, в других случаях на  тер-
  минале печатается сообщение об ошибке. Если же в командной строке была задана
  групповая спецификация файлов, то лента перематывается до указанной  позиции,
  а уж после этого просматривается в поиске подходящих имен файлов. При  записи
  система идет до указанного последовательного номера или метки конца  тома,  в
  зависимости от того, что раньше встретилось. После чего записывает  указанный
  файл и новую метку конца тома. Если была указана групповая спецификация  фай-
  лов, то система не перематывает ленту перед каждой  записью  и  не  проверяет
  дублирование имен файлов.
       - И это все?- спрашивает Алеша.
       - Нет,- отвечаю я,- можно дать еще и отрицательную  позицию  в  качестве
  аргумента.
       Так если при чтении с ленты указать номер позиции равный  -1,  то  поиск
  файла будет начинаться с текущей позиции, без перемотки ленты.
       Если же номер позиции равен -1 при записи на ленту, то  лента  перематы-
  вается только до конца предыдущего файла, а затем записывается указанный файл
  и метка конца тома.
       Если при использовании клавиатурного монитора мы для работы с  магнитной
  лентой указываем ключ /POSITION:N, то при вызове программы PIP напрямую нужно
  указывать ключ /M:N, где N - параметр (номер позиции), указывающий, как рабо-
  тать с лентой. И операция копирования может быть выполнена так.

  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *MT0:/M:-1=LD4:/Y<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

       И чтобы не возвращаться потом к СОТКЕ,-  предлагаю  я  Алеше,-  попробуй
  загрузить нашу вновь сформированную дискету на ДВК.
       - Я мигом,- побежал Алеша к нашему обычному месту,- а она опять  ругает-
  ся.


                                     - 192 -
           RT-11, A step by step                    PIP   14-Nov-92


  +---------------
  !    RT-11SJ V5.1  (S)
  !
  !  ?LD-W-Device not installed RK3:
  !  ?LD-W-Device not installed RK3:
  !

       - Алеша,- спрашиваю я,- а  с  какими  логическими  дисками  на  RK3:  ты
  связывался?
       - С LD2: и LD4:,- отвечает Алеша,- но они  были  на  RK3:.  Неужели  LD-
  драйвер их запомнил. Как же теперь от них отказаться?
       - Наверное,- подсказываю я,- нужно выполнить операцию, обратную монтиро-
  ванию этих дисков. А для этого придется поискать приставку,  которая  превра-
  щает слово в обратное по действию.
       - Догадался,- обрадовался Алеша,- таких  приставой  в  английском  языке
  может быть только три - NO, UN, DIS. Попробуем каждую из них  и  узнаем,  что
  подходит в данном случае.
       Алеше не повезло, и удача выпала только на третий раз.

  +---------------
  !  .DISMOUNT LD2:<ВК>
  !  -
  !  .DISMOUNT LD4:<ВК>
  !  -
  !

       - И так нужно делать для всех логических дисков?- спрашивает Алеша.
       - Если ты помнишь номера,- отвечаю я,- то можно только для тех,  которые
  использовал. В противном случае придется освободить все логические диски,  но
  ведь их всего только восемь. А это совсем немного. Зато теперь ты можешь заг-
  рузиться без проблем.






       8.5. Типовой набор операций с файлом



       Работа с файлами имеет некоторый типовой набор операций. Мы уже  замети-
  ли, что не все команды COPY обслуживает программа PIP.  В  каждом  конкретном
  случае решение об этом принимает KMON. Когда же власть в руки берет пользова-
  тель, он должен определить, с чем он хочет работать. Если он  хочет  изменить
  структуру каталога - добавить или переставить записи, записать  информацию  в
  начальные блоки тома,- то пользователь должен выбрать программу DUP.
       Если мы перемещаем файл в системе или изменяем некоторые поля в записи о
  файле (не перемещая ее в каталоге), то должны запустить программу PIP.
       Оставим в стороне каталог и начальные блоки тома и займемся только  фай-
  лом. Что мы можем сделать с файлом как с объектом, содержащим информацию.  По
  всей видимости только одно - сделать его копию, т.е.  скопировать  информацию
  из одного файла в другой. Мы не будем сейчас говорить о преобразовании инфор-
  мации, потому что это особая большая  тема.  Мы  также  не  можем  уничтожить
  информацию в прямом смысле этого слова. Мы  можем  заменить  одну  информацию
  другой, которая для нас сейчас имеет значение. С этой командой  COPY  мы  уже
  сталкивались, и здесь разберем только ее особенности.
       В RT-11 (как и во многих других системах)  имеются  устройства,  которые
  могут быть для удобства пользователя выделены по своим возможностям копирова-


                                     - 193 -
           RT-11, A step by step                    PIP   14-Nov-92


  ния с одного устройства на другое.
       Первое устройство, которое всегда известно системе, - это системная кон-
  соль или системный терминал (а в персональных компьютерах  он  единственный).
  Конечно, мы можем дать обычную команду

  +---------------
  !  .COPY DX0:V5USER.TXT TT:
  !  -
  !

  и получить желаемый результат. Однако вспомним,  что  подключалось  в  давние
  времена в качестве системной консоли - TELETYPE - устройства  фирмы  TELETYPE
  CORPORATION, (шт.Иллинойс, США). Слово это означает "печатать на расстоянии".
  Под этими устройствами в те времена понимались обычные телеграфные  аппараты,
  которые в усовершенствованном виде и до сих пор используются в крупных учреж-
  дениях как телетайпы. Но так как системный терминал находился близко от маши-
  ны, то приставку TELE можно убрать, и мы получим новую команду:

  +---------------
  !  .TYPE DX0:V5USER.TXT
  !

  которая по результату полностью соответствует предыдущей.

       Кроме того, практически в каждой системе  используется  печатающее  уст-
  ройство. Чем  оно  отличается  от  терминала?  Если  мы  вернемся  к  русско-
  английскому словарю, то найдем, что для слова ПЕЧАТАТЬ есть  два  значения  -
  TYPE и PRINT. С чем это связано?
       Слово TYPE имеет главное значение - тип. В ПЕЧАТАТЬ оно  превратилось  с
  изобретением пишущей машинки. Писать типовыми знаками на пишущей  машинке.  А
  так как литерные рычаги ударяют по бумаге, то слово TYPE имеет значение ПЕЧА-
  ТАТЬ ТИПОВЫМИ ЗНАКАМИ НА ПИШУЩЕЙ МАШИНКЕ.
       Слово PRINT произошло от другого вида человеческой деятельности -  печа-
  тать книги - и имеет главное значение  -  отпечаток,  оттиск.  Вычислительная
  техника для вывода информации требовала  более  быстродействующие  печатающие
  устройства, чем пишущие машинки. Фирма IBM, которая была  пионером  в  данном
  области, начала использовать печатающие барабаны, которые состояли из  дисков
  с полным набором литер. Строка, по существу, печаталась за один удар. Поэтому
  такие устройства были названы принтерами. Как ты уже догадался, что команду

       COPY DX0:V5USER.TXT LP:

  можно заменить на

       PRINT DX0:V5USER.TXT

       Таким образом, эти две дополнительные  команды  применяются  только  для
  удобства пользователя и в сущности представляют из себя команду COPY.  Однако
  команды TYPE и PRINT по умолчанию знают тип файла .LST, чего не знает команда
  COPY. С помощью программы PIP эти команды выполняются одинаково:

  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *LP:=DX0:V5USER.TXT<ВК>
  !  -


                                     - 194 -
           RT-11, A step by step                    PIP   14-Nov-92


       или

  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *TT:=DX0:V5USER.TXT<ВК>
  !  -

       Другой вид операций, которые мы можем  проделать  с  файлами,  точнее  с
  записью о файле, - это переименовать его. Или если говорить по-английски,  то
  можно записать

   RENAME DX0:SAMLE.KED DX0:EXEMIN.K52

  синтаксис этой команды нам привычен. Поэтому ясно, что  сначала  записывается
  старое имя и тип файла, а затем новое имя файла. Это также можно выполнить  с
  помощью программы PIP без посредников, используя однобуквенный ключ - /R.

  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *DX0:EXEMIN.K52=DX0:SAMPLE.KED/R<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  Следует помнить, что эта команда не применима к магнитным лентам и  вообще  к
  устройствам, не имеющим стандартного каталога.
       Отметим, что в данном случае информация никуда не перемещается. Запись о
  файле также остается на месте. В записи о файле,  которую  мы  так  тщательно
  изучали в пятой главе, в результате  наших  действий  изменилось  одно  поле.
  Вспомним эти поля.

           SIGN     - признаки состояния файла
           NAME.TYP - имя и тип файла
           SIZE     - размер файла
           STATUS   - состояние файла для системы
           DATE     - дата создания файла

       И если мы можем изменить имя и тип файла, то почему мы не можем изменить
  другие поля записи о файле.
       Основной признак состояния,  благодаря  которому  мы  можем  работать  с
  файлом,- "ПОСТОЯННЫЙ". Если мы изменим этот признак на  "НЕИСПОЛЬЗУЕМЫЙ",  то
  мы как бы удалим этот файл. Имя для такой команды найти нетрудно.  В  русско-
  английском словаре мы найдем несколько слов, обозначающих это  понятие:  MOVE
  OFF, REMOVE, DELETE, ERASE. Какое из этих слов выбрать?
       MOVE OFF - означает переслать куда-то.
       REMOVE - удалить вдаль, удаленный в смысле на расстояние. Хотя это слово
  и используется в операционных системах, но по  смыслу  оно  не  соответствует
  тому, о чем мы говорим.
       DELETE - произошло от латинского DELE,  означающего  корректорский  знак
  выброски, указывающий на вычеркивание символа или части текста, который изоб-
  ражается, как почтовый конверт. Поэтому DELETE - это вычеркивать  текст  (или
  вымарывать).
       ERASE - слово тоже писательское и означает стирать,  затирать  резинкой.
  Трудно придумать способ затирать информацию в записи о файле или в самом фай-
  ле, однако именно это слово используется для  выполнения  данной  операции  в
  операционной системе CP/M фирмы Digital Research.


                                     - 195 -
           RT-11, A step by step                    PIP   14-Nov-92


       После использования команды

       DELETE VM:K52.SAV

  которую мы применяли в предыдущей главе, был виден след этого файла в  распе-
  чатке каталога удаленных файлов. Т.е. как бы вычеркнули файл, но  так,  чтобы
  его можно было увидеть. В любом случае разработчики  RT-11  фирмы  DEC  очень
  точно отразили в названии команды смысл того, что она делает.  Основной  ключ
  для выполнения этой операции программой PIP будет /D.

  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *VM:K52.SAV/D<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  В первых версиях системы нужно было при выполнении групповой операции  удале-
  ния явно указывать ключ /Q (QUERY). Но в версии 5.0 и  далее  при  выполнении
  удаления файлов система будет задавать вопрос во всех случаях, когда не  ука-
  зана явно полная спецификация файла. Т.е. если задана групповая  спецификация
  и подразумевается список файлов, подлежащих удалению, то  нужно  будет  подт-
  верждать выполнение операции для каждого из них.
       Такой подход, кроме помощи забывчивым, дает и  дополнительные  удобства.
  Ключ /SYSTEM теперь не нужен, если задана полная спецификация файла.

       Изменить признак состояния файла  "ЗАЩИЩЕННЫЙ"  на  "НЕЗАЩИЩЕННЫЙ",  или
  попросту снять защиту, мы уже пробовали командой UNPROTECT. А для того  чтобы
  защитить файлы, достаточно дать команду

  +---------------
  !  .PROTECT DX:.SAV<ВК>
  !  -
  !  . . . . . .
  !  . . . . . .
  !  .^

  и дело будет сделано.
       Признак состояния файла "ЗАЩИЩЕННЫЙ" появился в версии  4.0,  в  которой
  команд PROTECT/UNPROTECT еще не было. Но так как изменение признака  является
  переименованием, то делалось это следующим образом.

  +---------------
  !  .RENAME/PROTECT DX:.SAV DX:.SAV<ВК>
  !  -
  !  . . . . .
  !  . . . . .
  !  .^

  А с помощью программы PIP эти команды выполняются одинаковым образом:


                                     - 196 -
           RT-11, A step by step                    PIP   14-Nov-92


  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *DX0:.SAV=DX0:.SAV/R/F<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  для установки защиты от удаления, или

  +---------------
  !  .RUN SY:PIP<ВК>
  !  -
  !  *DX0:.SAV=DX0:.SAV/R/Z<ВК>
  !  -
  !  *^C^C
  !  -
  !  .^

  для снятия защиты от удаления.
       Этот типовой набор команд имеет естественно и  общий  набор  ключей.  Их
  наличие или отсутствие в  конкретной  команде  диктуется  логикой  выполнения
  команды. Команда COPY имеет самый большой набор ключей,  который  включает  в
  себя почти все ключи, используемые в типовом наборе команд. Поэтому начнем  с
  команды COPY.






       8.6. Выбор исходных данных



       Вспомним, как мы работали с программой DIR.  Для  облегчения  работы  мы
  распечатывали каталог с указанной датой, до или после указанной  даты.  Можно
  просто выбрать новые файлы. Мы уже умеем создавать файлы (или хотя бы  записи
  о них), а система считает новыми файлы, у которых дата создания  совпадает  с
  текущей датой системы.
       И раз уж наши потребности при работе с программой PIP и  DIR  совпадают,
  то, наверное, это общий набор ключей, и он нам уже известен.

           BEFORE[:DD:MMM:YY]  - до указанной даты
           DATE[:DD:MMM:YY]    - с указанной датой
           NEWFILES            - с текущей системной датой
           SINCE[:DD:MMM:YY]   - после указанной даты

       Однако, копируя файл, мы можем воздействовать на  запись  в  каталоге  о
  нем. И если мы можем выбрать файлы по указанной дате, то, наверное, мы  можем
  при копировании установить новую дату для выходного файла.  Русско-английский
  словарь подскажет нам составное слово для ключа. Устанавливать - SET, дата  -
  DATE. И ключ будет /SETDATE[:DD:MMM:YY]. А если  дату  опустить,  то  система
  установит текущую системную дату.
       Эти ключи действительны для всех перечисленных команд,  однако  понятно,
  что ключ /SETDATE не может быть применен с командами DELETE,  PRINT  и  TYPE.
  Команда DELETE вычеркивает запись из каталога, поэтому ничего не может  уста-
  новить. Команды PRINT и TYPE копируют файлы на устройство, которые  не  имеют


                                     - 197 -
           RT-11, A step by step                    PIP   14-Nov-92


  каталога.
       Однако, раз мы сразу указываем и однобуквенные ключи CSI, то и для  этой
  группы укажем ключи, которые нужно применять с программой PIP.

           /BEFORE[:DD:MMM:YY]  - /J:DD:MMM:YY
           /DATE[:DD:MMM:YY]    - /C:DD:MMM:YY
           /NEWFILES            - /C
           /SINCE[:DD:MMM:YY]   - /I:DD:MMM:YY
           /SETDATE[:DD:MMM:YY] - /T:DD:MMM:YY






       8.7. Какие файлы мы копируем



       Не умея преобразовывать информацию в файлах, нам хочется сделать послож-
  нее простого копирования. Вот, например, если взять два (или несколько) вход-
  ных файлов и скопировать их в один выходной. Простейший способ это сделать

   COPY DX0:(FILE1+FILE2).TXT DX1:BIGFIL.TWO

  появился только начиная с версии 4.0. А как же было до этого? Если  мы  стали
  пользоваться языком математики, то вспомним, что  такая  операция  соединения
  или объединения называется конкатенацией. Что и дает другую форму этой коман-
  ды.

   COPY/CONCATENATE DX0:FILE1.TXT,DX0:FILE2.TXT DX1:BIGFIL.TWO

  Правда/ наиболее часто ключ /CONCATENATE используется с групповой  специфика-
  цией, когда нужно большую группу файлов (как правило, имеющую общий  признак)
  "слить" в один большой общий файл. Например, так:

   COPY/CONCATENATE LD0:1GL%%.DOC MT0:BOOK1V.DOC

  При этом следует учесть, что файлы будут копироваться в порядке, указанном  в
  каталоге, а также то, что выходной файл не может иметь  групповую  специфика-
  цию.

       Однако не все так просто. Конечно, если мы соединяем  копируемые  файлы,
  невзирая на их наполнение, то проблем не будет. Мы как  бы  от<ображаем  один
  входной файл на выходной, а затем встык к нему (по границе блоков) отображаем
  второй входной файл. И так как система нам ничего не говорит, то, скорее все-
  го действует ключ по умолчанию, который называется /IMAGE - образ.
       А как быть с текстовыми  файлами?<  В  третьей  главе  мы  получали  два
  маленьких текстовых файла - DX0FIL.DIR и DXFILE.DIR. Если их  также  скопиро-
  вать вместе, то между их текстовой частью (в конце второго  блока)  получится
  дырка из нулевых кодов. Чтобы это увидеть, скопируем эти файлы

  +---------------
  !  .COPY DX:(DX0FIL+DXFILE).DIR DX0:TWOFIL.TXT<ВК>
  !  -
  !


                                     - 198 -
           RT-11, A step by step                    PIP   14-Nov-92


  и сразу посмотрим каталог.

  +---------------
  !  .DIR/FU/BL/VOL DX0:<ВК>
  !  -
  !
   14-Aug-89
   Volume ID: RT11SJ V5.00
   Owner    : АРХАНГЕЛСКИЙ
  SWAP  .SYS  26P 13-Jan-84    8      RT11SJ.SYS  73P 10-Mar-84   34
  TT    .SYS   2P 10-Mar-84  107      DX    .SYS   3P 10-Mar-84  109
  SL    .SYS  13P 10-Mar-84  112      LP    .SYS   2P 10-Mar-84  125
  MX    .SYS  10P 10-Mar-84  127      NL    .SYS   2P 10-Mar-84  137
  RK    .SYS   3P 10-Mar-84  139      MT    .SYS   9P 10-Mar-84  142
  DP    .SYS   3P 10-Mar-84  151      LD    .SYS   8P 10-Mar-84  154
  PIP   .SAV  29  06-Feb-84  162      DUP   .SAV  45  06-Feb-84  191
  DIR   .SAV  19  06-Feb-84  236      DUMP  .SAV   9  06-Feb-84  255
  DX0FIL.DIR   2  08-Aug-89  264      DXFILE.DIR   2  08-Aug-89  266
  TWOFIL.TXT   4  14-Aug-89  268      < UNUSED > 222             272
   19 Files, 264 Blocks
   222 Free blocks

  А дырку по стыку можно увидеть, используя дамп объединенного файла.

  +---------------
  !  .DUMP/TERMINAL DX:TWOFIL.TXT<ВК>
  !  -
  !


  DX0:TWOFIL.TXT
  BLOCK NUMBER  000000
  000/ 031040 026 . . . 70 005015 053523 050101 * 26-Jul-86..SWAP*
  020/ 020040 051 . . . 40 033062 020120 031461 *  .SYS    26P 13*
  040/ 045055 067 . . . 40 020040 051040 030524 *-Jan-84      RT1*
  060/ 051461 027 . . . 40 033440 050063 030440 *1SJ.SYS    73P 1*
  100/ 026460 060 . . . 15 052124 020040 020040 *0-Mar-84..TT    *
  120/ 051456 051 . . . 40 020120 030061 046455 *.SYS     2P 10-M*
  140/ 071141 034 . . . 40 042040 020130 020040 *ar-84      DX   *
  160/ 027040 054 . . . 40 050063 030440 026460 * .SYS     3P 10-*
  200/ 060515 026 . . . 23 020040 020040 051456 *Mar-84..SL    .S*
  220/ 051531 020 . . . 20 030061 046455 071141 *YS    13P 10-Mar*
  240/ 034055 020 . . . 40 020120 020040 027040 *-84      LP    .*
  260/ 054523 020 . . . 62 030440 026460 060515 *SYS     2P 10-Ma*
  300/ 026562 032 . . . 40 020040 051456 051531 *r-84..MX    .SYS*
  320/ 020040 020 . . . 61 046455 071141 034055 *    10P 10-Mar-8*
  340/ 020064 020 . . . 14 020040 027040 054523 *4      NL    .SY*
  360/ 020123 020 . . . 40 026460 060515 026562 *S     2P 10-Mar-*
  400/ 032070 005 . . . 40 051456 051531 020040 *84..RK    .SYS  *
  420/ 020040 031 . . . 55 071141 034055 020064 *   3P 10-Mar-84 *
  440/ 020040 020 . . . 40 027040 054523 020123 *     MT    .SYS *
  460/ 020040 020 . . . 60 060515 026562 032070 *    9P 10-Mar-84*
  500/ 005015 050 . . . 56 051531 020040 020040 *..DP    .SYS    *
  520/ 031440 020 . . . 41 034055 020064 020040 * 3P 10-Mar-84   *
  540/ 020040 046 . . . 40 054523 020123 020040 *   LD    .SYS   *
  560/ 020040 050 . . . 15 026562 032070 005015 *  8P 10-Mar-84..*
  600/ 044520 020 . . . 01 020040 020040 034462 *PIP   .SAV    29*
  620/ 020040 033 . . . 55 020064 020040 020040 *  06-Feb-84     *
  640/ 042040 050 . . . 23 020126 020040 032040 * DUP   .SAV    4*


                                     - 199 -
           RT-11, A step by step                    PIP   14-Nov-92


  660/ 020065 030 . . . 42 032070 005015 044504 *5  06-Feb-84..DI*
  700/ 020122 020 . . . 40 020040 034461 020040 *R   .SAV    19  *
  720/ 033060 043 . . . 64 020040 020040 042040 *06-Feb-84      D*
  740/ 046525 020 . . . 26 020040 020040 020071 *UMP  .SAV     9 *
  760/ 030040 026 . . . 70 005015 030440 020066 * 06-Feb-84.. 16 *

  BLOCK NUMBER  000001
  000/ 064506 062 . . . 65 041040 067554 065543 *Files, 256 Block*
  020/ 006563 020 . . . 06 062545 061040 067554 *s.. 230 Free blo*
  040/ 065543 006 . . . 00 000000 000000 000000 *cks.............*
  060/ 000000 000 . . . 00 000000 000000 000000 *................*
  100/ 000000 000 . . . 00 000000 000000 000000 *................*
  120/ 000000 000 . . . 00 000000 000000 000000 *................*
  140/ 000000 000 . . . 00 000000 000000 000000 *................*
  160/ 000000 000 . . . 00 000000 000000 000000 *................*
  200/ 000000 000 . . . 00 000000 000000 000000 *................*
  220/ 000000 000 . . . 00 000000 000000 000000 *................*
  240/ 000000 000 . . . 00 000000 000000 000000 *................*
  260/ 000000 000 . . . 00 000000 000000 000000 *................*
  300/ 000000 000 . . . 00 000000 000000 000000 *................*
  320/ 000000 000 . . . 00 000000 000000 000000 *................*
  340/ 000000 000 . . . 00 000000 000000 000000 *................*
  360/ 000000 000 . . . 00 000000 000000 000000 *................*
  400/ 000000 000 . . . 00 000000 000000 000000 *................*
  420/ 000000 000 . . . 00 000000 000000 000000 *................*
  440/ 000000 000 . . . 00 000000 000000 000000 *................*
  460/ 000000 000 . . . 00 000000 000000 000000 *................*
  500/ 000000 000 . . . 00 000000 000000 000000 *................*
  520/ 000000 000 . . . 00 000000 000000 000000 *................*
  540/ 000000 000 . . . 00 000000 000000 000000 *................*
  560/ 000000 000 . . . 00 000000 000000 000000 *................*
  600/ 000000 000 . . . 00 000000 000000 000000 *................*
  620/ 000000 000 . . . 00 000000 000000 000000 *................*
  640/ 000000 000 . . . 00 000000 000000 000000 *................*
  660/ 000000 000 . . . 00 000000 000000 000000 *................*
  700/ 000000 000 . . . 00 000000 000000 000000 *................*
  720/ 000000 000 . . . 00 000000 000000 000000 *................*
  740/ 000000 000 . . . 00 000000 000000 000000 *................*
  760/ 000000 000 . . . 00 000000 000000 000000 *................*

  BLOCK NUMBER  000002
  000/ 031040 026 . . . 70 005015 053523 050101 * 26-Jul-86..SWAP*
  020/ 020040 051 . . . 40 033062 020120 031461 *  .SYS    26P 13*
  040/ 045055 067 . . . 40 020040 051040 030524 *-Jan-84      RT1*
  060/ 051461 027 . . . 40 033440 050063 030440 *1SJ.SYS    73P 1*
  100/ 026460 060 . . . 15 052124 020040 020040 *0-Mar-84..TT    *
  120/ 051456 051 . . . 40 020120 030061 046455 *.SYS     2P 10-M*
  140/ 071141 034 . . . 40 042040 020130 020040 *ar-84      DX   *
  160/ 027040 054 . . . 40 050063 030440 026460 * .SYS     3P 10-*
  200/ 060515 026 . . . 23 020040 020040 051456 *Mar-84..SL    .S*
  220/ 051531 020 . . . 20 030061 046455 071141 *YS    13P 10-Mar*
  240/ 034055 020 . . . 40 020120 020040 027040 *-84      LP    .*
  260/ 054523 020 . . . 62 030440 026460 060515 *SYS     2P 10-Ma*
  300/ 026562 032 . . . 40 020040 051456 051531 *r-84..MX    .SYS*
  320/ 020040 020 . . . 61 046455 071141 034055 *    10P 10-Mar-8*
  340/ 020064 020 . . . 14 020040 027040 054523 *4      NL    .SY*
  360/ 020123 020 . . . 40 026460 060515 026562 *S     2P 10-Mar-*
  400/ 032070 005 . . . 40 051456 051531 020040 *84..RK    .SYS  *
  420/ 020040 031 . . . 55 071141 034055 020064 *   3P 10-Mar-84 *


                                     - 200 -
           RT-11, A step by step                    PIP   14-Nov-92


  440/ 020040 020 . . . 40 027040 054523 020123 *     MT    .SYS *
  460/ 020040 020 . . . 60 060515 026562 032070 *    9P 10-Mar-84*
  500/ 005015 050 . . . 56 051531 020040 020040 *..DP    .SYS    *
  520/ 031440 020 . . . 41 034055 020064 020040 * 3P 10-Mar-84   *
  540/ 020040 046 . . . 40 054523 020123 020040 *   LD    .SYS   *
  560/ 020040 050 . . . 15 026562 032070 005015 *  8P 10-Mar-84..*
  600/ 044520 020 . . . 01 020040 020040 034462 *PIP   .SAV    29*
  620/ 020040 033 . . . 55 020064 020040 020040 *  06-Feb-84     *
  640/ 042040 050 . . . 23 020126 020040 032040 * DUP   .SAV    4*
  660/ 020065 030 . . . 42 032070 005015 044504 *5  06-Feb-84..DI*
  700/ 020122 020 . . . 40 020040 034461 020040 *R   .SAV    19  *
  720/ 033060 043 . . . 64 020040 020040 042040 *06-Feb-84      D*
  740/ 046525 020 . . . 26 020040 020040 020071 *UMP  .SAV     9 *
  760/ 030040 026 . . . 70 005015 054104 043060 * 06-Feb-84..DX0F*

  BLOCK NUMBER  000003
  000/ 046111 042 . . . 40 031040 020040 020040 *IL.DIR     2    *
  020/ 020040 020 . . . 40 020040 006440 020012 *             .. *
  040/ 033461 043 . . . 54 032462 020070 066102 *17 Files, 258 Bl*
  060/ 061557 071 . . . 62 043040 062562 020145 *ocks.. 228 Free *
  100/ 066142 061 . . . 00 000000 000000 000000 *blocks..........*
  120/ 000000 000 . . . 00 000000 000000 000000 *................*
  140/ 000000 000 . . . 00 000000 000000 000000 *................*
  160/ 000000 000 . . . 00 000000 000000 000000 *................*
  200/ 000000 000 . . . 00 000000 000000 000000 *................*
  220/ 000000 000 . . . 00 000000 000000 000000 *................*
  240/ 000000 000 . . . 00 000000 000000 000000 *................*
  260/ 000000 000 . . . 00 000000 000000 000000 *................*
  300/ 000000 000 . . . 00 000000 000000 000000 *................*
  320/ 000000 000 . . . 00 000000 000000 000000 *................*
  340/ 000000 000 . . . 00 000000 000000 000000 *................*
  360/ 000000 000 . . . 00 000000 000000 000000 *................*
  400/ 000000 000 . . . 00 000000 000000 000000 *................*
  420/ 000000 000 . . . 00 000000 000000 000000 *................*
  440/ 000000 000 . . . 00 000000 000000 000000 *................*
  460/ 000000 000 . . . 00 000000 000000 000000 *................*
  500/ 000000 000 . . . 00 000000 000000 000000 *................*
  520/ 000000 000 . . . 00 000000 000000 000000 *................*
  540/ 000000 000 . . . 00 000000 000000 000000 *................*
  560/ 000000 000 . . . 00 000000 000000 000000 *................*
  600/ 000000 000 . . . 00 000000 000000 000000 *................*
  620/ 000000 000 . . . 00 000000 000000 000000 *................*
  640/ 000000 000 . . . 00 000000 000000 000000 *................*
  660/ 000000 000 . . . 00 000000 000000 000000 *................*
  700/ 000000 000 . . . 00 000000 000000 000000 *................*
  720/ 000000 000 . . . 00 000000 000000 000000 *................*
  740/ 000000 000 . . . 00 000000 000000 000000 *................*
  760/ 000000 000 . . . 00 000000 000000 000000 *................*

  Наверное, чтобы этой дырки не было нужно сказать  системе,  что  мы  копируем
  файлы в коде асции и поэтому коды с нулевым значением нужно при чтении  игно-
  рировать.

  +---------------
  !  .COPY/ASCII DX1:(DX0FIL+DXFILE).DIR DX1:TWODIR.TXT<ВК>
  !  -
  !  .^


                                     - 201 -
           RT-11, A step by step                    PIP   14-Nov-92


  И сразу посмотреть каталог:

  +---------------
  !  .DIR/FU/BL/VOL DX1:<ВК>
  !  -
  !

   14-Aug-89
   Volume ID: RT11SJ V5.00
   Owner    : АРХАНГЕЛСКИЙ
  SWAP  .SYS  26P 13-Jan-84    8      RT11SJ.SYS  73P 10-Mar-84   34
  TT    .SYS   2P 10-Mar-84  107      DX    .SYS   3P 10-Mar-84  109
  SL    .SYS  13P 10-Mar-84  112      LP    .SYS   2P 10-Mar-84  125
  MX    .SYS  10P 10-Mar-84  127      NL    .SYS   2P 10-Mar-84  137
  RK    .SYS   3P 10-Mar-84  139      MT    .SYS   9P 10-Mar-84  142
  DP    .SYS   3P 10-Mar-84  151      LD    .SYS   8P 10-Mar-84  154
  PIP   .SAV  29  06-Feb-84  162      DUP   .SAV  45  06-Feb-84  191
  DIR   .SAV  19  06-Feb-84  236      DUMP  .SAV   9  06-Feb-84  255
  DX0FIL.DIR   2  08-Aug-89  264      DXFILE.DIR   2  08-Aug-89  266
  TWOFIL.TXT   4  14-Aug-89  268      TWODIR.TXT   3  14-Aug-89  272
  < UNUSED > 219             275
   20 Files, 267 Blocks
   219 Free blocks

  и дамп этого файла в месте стыка

  +---------------
  !  .DUMP/TERMINAL DX:TWODIR.TXT<ВК>
  !  -
  !

  DX0:TWODIR.TXT
  BLOCK NUMBER  000000
  000/ 031040 026 . . . 70 005015 053523 050101 * 26-Jul-86..SWAP*
  020/ 020040 051 . . . 40 033062 020120 031461 *  .SYS    26P 13*
  040/ 045055 067 . . . 40 020040 051040 030524 *-Jan-84      RT1*
  060/ 051461 027 . . . 40 033440 050063 030440 *1SJ.SYS    73P 1*
  100/ 026460 060 . . . 15 052124 020040 020040 *0-Mar-84..TT    *
  120/ 051456 051 . . . 40 020120 030061 046455 *.SYS     2P 10-M*
  140/ 071141 034 . . . 40 042040 020130 020040 *ar-84      DX   *
  160/ 027040 054 . . . 40 050063 030440 026460 * .SYS     3P 10-*
  200/ 060515 026 . . . 23 020040 020040 051456 *Mar-84..SL    .S*
  220/ 051531 020 . . . 20 030061 046455 071141 *YS    13P 10-Mar*
  240/ 034055 020 . . . 40 020120 020040 027040 *-84      LP    .*
  260/ 054523 020 . . . 62 030440 026460 060515 *SYS     2P 10-Ma*
  300/ 026562 032 . . . 40 020040 051456 051531 *r-84..MX    .SYS*
  320/ 020040 020 . . . 61 046455 071141 034055 *    10P 10-Mar-8*
  340/ 020064 020 . . . 14 020040 027040 054523 *4      NL    .SY*
  360/ 020123 020 . . . 40 026460 060515 026562 *S     2P 10-Mar-*
  400/ 032070 005 . . . 40 051456 051531 020040 *84..RK    .SYS  *
  420/ 020040 031 . . . 55 071141 034055 020064 *   3P 10-Mar-84 *
  440/ 020040 020 . . . 40 027040 054523 020123 *     MT    .SYS *
  460/ 020040 020 . . . 60 060515 026562 032070 *    9P 10-Mar-84*
  500/ 005015 050 . . . 56 051531 020040 020040 *..DP    .SYS    *
  520/ 031440 020 . . . 41 034055 020064 020040 * 3P 10-Mar-84   *
  540/ 020040 046 . . . 40 054523 020123 020040 *   LD    .SYS   *
  560/ 020040 050 . . . 15 026562 032070 005015 *  8P 10-Mar-84..*
  600/ 044520 020 . . . 01 020040 020040 034462 *PIP   .SAV    29*
  620/ 020040 033 . . . 55 020064 020040 020040 *  06-Feb-84     *


                                     - 202 -
           RT-11, A step by step                    PIP   14-Nov-92


  640/ 042040 050 . . . 23 020126 020040 032040 * DUP   .SAV    4*
  660/ 020065 030 . . . 42 032070 005015 044504 *5  06-Feb-84..DI*
  700/ 020122 020 . . . 40 020040 034461 020040 *R   .SAV    19  *
  720/ 033060 043 . . . 64 020040 020040 042040 *06-Feb-84      D*
  740/ 046525 020 . . . 26 020040 020040 020071 *UMP  .SAV     9 *
  760/ 030040 026 . . . 70 005015 030440 020066 *06-Feb-84..  16 *

  BLOCK NUMBER  000001
  000/ 064506 062 . . . 65 041040 067554 065543 *Files, 256 Block*
  020/ 006563 020 . . . 06 062545 061040 067554 *s.. 230 Free blo*
  040/ 065543 006 . . . 55 066165 034055 006466 *cks.. 26-Jul-86.*
  060/ 051412 040 . . . 23 020123 020040 031040 *.SWAP  .SYS    2*
  100/ 050066 030 . . . 56 032070 020040 020040 *6P 13-Jan-84    *
  120/ 020040 052 . . . 56 051531 020040 020040 *  RT11SJ.SYS    *
  140/ 031467 020 . . . 41 034055 006464 052012 *73P 10-Mar-84..T*
  160/ 020124 020 . . . 23 020040 020040 050062 *T    .SYS     2P*
  200/ 030440 026 . . . 70 020040 020040 020040 * 10-Mar-84      *
  220/ 054104 020 . . . 31 020040 020040 031440 *DX    .SYS     3*
  240/ 020120 030 . . . 55 006464 051412 020114 *P 10-Mar-84..SL *
  260/ 020040 027 . . . 40 030440 050063 030440 *   .SYS    13P 1*
  300/ 026460 060 . . . 40 020040 020040 050114 *0-Mar-84      LP*
  320/ 020040 020 . . . 40 020040 031040 020120 *    .SYS     2P *
  340/ 030061 046 . . . 64 046412 020130 020040 *10-Mar-84..MX   *
  360/ 027040 054 . . . 40 050060 030440 026460 * .SYS    10P 10-*
  400/ 060515 026 . . . 40 020040 046116 020040 *Mar-84      NL  *
  420/ 020040 051 . . . 40 031040 020120 030061 *  .SYS     2P 10*
  440/ 046455 071 . . . 12 020113 020040 027040 *-Mar-84..RK    .*
  460/ 054523 020 . . . 63 030440 026460 060515 *SYS     3P 10-Ma*
  500/ 026562 032 . . . 40 052115 020040 020040 *r-84      MT    *
  520/ 051456 051 . . . 40 020120 030061 046455 *.SYS     9P 10-M*
  540/ 071141 034 . . . 20 020040 027040 054523 *ar-84..DP    .SY*
  560/ 020123 020 . . . 40 026460 060515 026562 *S     3P 10-Mar-*
  600/ 032070 020 . . . 14 020040 020040 051456 *84      LD    .S*
  620/ 051531 020 . . . 20 030061 046455 071141 *YS     8P 10-Mar*
  640/ 034055 006 . . . 40 027040 040523 020126 *-84..PIP   .SAV *
  660/ 020040 031 . . . 66 062506 026542 032070 *   29  06-Feb-84*
  700/ 020040 020 . . . 20 020040 051456 053101 *      DUP   .SAV*
  720/ 020040 020 . . . 60 043055 061145 034055 *    45  06-Feb-8*
  740/ 006464 042 . . . 40 040523 020126 020040 *4..DIR   .SAV   *
  760/ 030440 020 . . . 06 026542 032070 020040 * 19  06-Feb-84  *

  BLOCK NUMBER  000002
  000/ 020040 020 . . . 40 051456 053101 020040 *    DUMP  .SAV  *
  020/ 020040 034 . . . 55 061145 034055 006464 *   9  06-Feb-84.*
  040/ 042012 030 . . . 04 020122 020040 020040 *.DX0FIL.DIR     *
  060/ 020062 020 . . . 40 020040 020040 020040 *2               *
  100/ 020040 005 . . . 06 062554 026163 031040 *  .. 17 Files, 2*
  120/ 034065 041 . . . 63 020012 031062 020070 *58 Blocks.. 228 *
  140/ 071106 062 . . . 43 006563 000012 000000 *Free blocks.....*
  160/ 000000 000 . . . 00 000000 000000 000000 *................*
  200/ 000000 000 . . . 00 000000 000000 000000 *................*
  220/ 000000 000 . . . 00 000000 000000 000000 *................*
  240/ 000000 000 . . . 00 000000 000000 000000 *................*
  260/ 000000 000 . . . 00 000000 000000 000000 *................*
  300/ 000000 000 . . . 00 000000 000000 000000 *................*
  320/ 000000 000 . . . 00 000000 000000 000000 *................*
  340/ 000000 000 . . . 00 000000 000000 000000 *................*
  360/ 000000 000 . . . 00 000000 000000 000000 *................*
  400/ 000000 000 . . . 00 000000 000000 000000 *................*


                                     - 203 -
           RT-11, A step by step                    PIP   14-Nov-92


  420/ 000000 000 . . . 00 000000 000000 000000 *................*
  440/ 000000 000 . . . 00 000000 000000 000000 *................*
  460/ 000000 000 . . . 00 000000 000000 000000 *................*
  500/ 000000 000 . . . 00 000000 000000 000000 *................*
  520/ 000000 000 . . . 00 000000 000000 000000 *................*
  540/ 000000 000 . . . 00 000000 000000 000000 *................*
  560/ 000000 000 . . . 00 000000 000000 000000 *................*
  600/ 000000 000 . . . 00 000000 000000 000000 *................*
  620/ 000000 000 . . . 00 000000 000000 000000 *................*
  640/ 000000 000 . . . 00 000000 000000 000000 *................*
  660/ 000000 000 . . . 00 000000 000000 000000 *................*
  700/ 000000 000 . . . 00 000000 000000 000000 *................*
  720/ 000000 000 . . . 00 000000 000000 000000 *................*
  740/ 000000 000 . . . 00 000000 000000 000000 *................*
  760/ 000000 000 . . . 00 000000 000000 000000 *................*

  уже по каталогу видно, что полученный файл стал короче,  а  дамп  показывает,
  что теперь это чистый текстовый файл.

       Однако, здесь нужно быть осторожным и помнить о  свойствах  кода  ASCII.
  Раз код состоит из 7 бит, то программа PIP будет  обнулять  (для  надежности)
  восьмой бит. Кроме того, символ CTRL/Z принят в системе в  качестве  признака
  конца текста и если он встретится случайно в середине  текста,  то  он  будет
  указывать на конец файла.
       Здесь можно также вспомнить файлы,  записанные  в  специальном  двоичном
  формате фирмы DEC, которые, как правило, имеют тип .OBJ или .LDA.  Эти  файлы
  отличаются тем, что их кусочки различной длины имеют  в  своем  составе  спе-
  циальные контрольные коды, позволяющие проверить правильность соответствующе-
  го куска файла. Система поддерживает и это исключительное свойство, для  чего
  нужно указать ключ /BINARY. В случае несовпадения контрольного кода программа
  PIP выдаст об этом сообщение.
       Понятно, что набор ключей, определяющий типы информации в  файле,  может
  быть применен только с командой COPY. Команды PRINT и TYPE  сами  знают,  что
  работают с кодом ASCII, а  остальные  команды  при  всем  желании  не  смогут
  использовать эту информацию.
       Эту группу однобуквенных ключей CSI для программы PIP мы также приведем:

           /CONCATENATE   - /U
           /ASCII         - /A
           /IMAGE         - --
           /BINARY        - /B






       8.8. Доверяй, но проверяй



       Конечно, система с помощью признаков состояния от драйверов  и  каких-то
  других способов следит за правильностью выполненной операции копирования,  но
  нам тоже хочется вмешаться в это действо.
       Во-первых, мы хотим, чтобы при копировании система дополнительно  прове-
  ряла каждую записанную порцию информации. Сделать это несложно. Слово /VERIFY
  нам уже знакомо, но нужно помнить, что этот ключ  появился  только  в  версии
  5.0. Идея проверки простая. При копировании каждой порции информации  система
  после записи на выходное устройство читает только что записанную информацию и


                                     - 204 -
           RT-11, A step by step                    PIP   14-Nov-92


  сравнивает с той, что хранится в памяти, в буфере  программы  PIP.  Если  при
  сравнении ошибок не найдено, то копирование продолжается.
       При его использовании нужно помнить, каким  образом  устройство  внешней
  памяти записывает информацию. Например, для магнитной ленты его использование
  приведет только к лишнему дерганию ленты и мало поможет качеству записи.  При
  использовании накопителей на магнитных дисках НГМД-6022 с  драйверами  MX  он
  может даже ввести в  заблуждение.  Ведь  эти  накопители  записывают  целиком
  дорожку, а проверять мы будем только последний блок. В  результате  последней
  записи может возникнуть ошибка в первом блоке  (дорожки),  которую  программа
  PIP пропустит.  Оптимальными  устройствами  для  копирования  с  этим  ключем
  являются те, которые записывают информацию блоками или  его  частями,  такие,
  как RK:, DX:, DP:, DZ:, и им подобные.

       Проверка - это хорошо, но если ошибка  возникла  в  текстовом  файле.  А
  текст сам по себе несет избыточную информацию. Как бы проигнорировать  ошибки
  чтения входного файла и тем самым спасти хотя бы то, что  от  него  осталось.
  Ключ для этого мы уже сказали - /IGNORE. Добавим  только,  что  он  не  может
  ужиться рядом с ключем /VERIFY, поэтому применять их вместе нельзя.
       Если мы уж сказали ключ IGNORE, то встретившаяся ошибка во входном файле
  не будет вызывать прекращение копирования. Вместо этого встретится  сообщение
  об ошибке:

   ?PIP-W-Input file error

  и копирование будет продолжаться. Более того, если на одном месте файла будет
  выдано только одно такое сообщение, то это означает, что системе удалось все-
  таки прочитать этот блок.
       Программа PIP копирует файлы достаточно большими кусками,  как  правило,
  по три блока или больше. И тут возникает вопрос - если возникнет  ошибка,  то
  не будет скопирован весь большой кусок. Тут даже ключ IGNORE не поможет. Дело
  в том, что при применении ключа /IGNORE и копировании  с  магнитной  ленты  в
  случае ошибки программа PIP запишет на выходное устройство содержимое  буфера
  столько раз, сколько попыток чтения входного файла потребуется.  Таким  обра-
  зом, выходной файл будет больше входного на количество плохо прочитанных бло-
  ков. Поэтому хотелось бы копировать файл по одному блоку, несмотря на то  что
  это будет заметно медленнее. Скорее всего, английское слово SLOWLY - медленно
  - и будет подходить для этого ключа.
       Сочетание ключей /SLOWLY/VERIFY  очень  эффективно  при  копировании  на
  накопителях с поблочной организацией, таких, как DX:,  RK:,  DP:,  DZ:  и  им
  подобных. А сочетание /SLOWLY/IGNORE позволяет терять минимум информации  при
  копировании с ошибками.
       И, конечно же, эти ключи имеют свои однобуквенные  аналоги  в  программе
  PIP.

         /VERIFY     -  /H
         /IGNORE     -  /G
         /SLOWLY     -  /S



                                     - 205 -
           RT-11, A step by step                    PIP   14-Nov-92


       8.9. Шило на мыло



       Копирование файлов позволяет нам перенести информацию с одного диска  на
  другой. Но при этом на входном томе останутся те же файлы. А если мы  копиро-
  вали файлы для того, чтобы собрать какую-то группу файлов вместе и  при  этом
  освободить место на входном томе? Тогда при копировании нам придется  удалять
  уже скопированные файлы с входного тома. То, что  это  неудобно,  -  полбеды.
  Главное, что при большом количестве файлов можно допустить ошибку  и  удалить
  не тот файл, который копировали. Вот если бы можно было переслать файл,  нап-
  ример, командой MOVE или хотя бы совместить команды COPY  и  DELETE.  А  если
  попробовать так:

  +---------------
  !  .COPY/DELETE DX0:DX0FIL DX1:<ВК>
  !  -
  !        Files copied/deleted
  !        --------------------
  !  DX0:DX0FIL.DIR to DX1:DX0FIL.DIR
  !  .^

  Мы уже привыкли, что в RT-11 все продумано и логично. Поэтому  неудивительно,
  что наши пожелания так легко выполняются. Стоит отметить, что при  выполнении
  этой команды удаление файла происходит только в случае успешного  копирования
  на выходной том.

       А если на нашем выходном томе уже имеется  файл  с  таким  же  именем  и
  типом? Тогда система по умолчанию использует знакомый  нам  ключ  /REPLACE  -
  заменить, т.е. после успешного копирования файл, который первоначально был на
  томе, удаляется, а скопированный получает признак состояния "ПОСТОЯННЫЙ".
       Вот тут систему можно остановить за руку. Если у нас каталог большой, то
  мы могли просто забыть, что дали такое же имя другому файлу. Поэтому во избе-
  жание потери, отменим умолчание, сказав COPY/NOREPLACE. И тогда при копирова-
  нии система будет сообщать о файлах с таким же именем и типом,  имеющихся  на
  выходном томе, но копировать их не будет.

       Все эти хорошие способности системы  нам  помогают  в  случае,  если  на
  выходном томе достаточно места, чтобы разместить очередной файл.  Так  бывает
  не всегда, и часто необходимо предварительно удалить файл с таким же именем и
  типом, чтобы на его место скопировать новый. Команда COPY/PREDELETE  (предва-
  рительно удалить) особенно полезна на малых конфигурациях систем, таких, как,
  например, ДВК.

       Теперь можно оглянуться на другие команды. Наверное, с командой PRINT  и
  TYPE также можно использовать ключ /DELETE, что позволит не задумываться  над
  тем, какие страницы книги распечатали, а какие нет.
       А при переименовании может оказаться, что  файл  с  указанным  именем  и
  типом уже существует. Поэтому ключи /REPLACE и /NOREPLACE также  применимы  с
  командой RENAME.

       Конечно, если мы загрузим программу PIP, то нам придется давать однобук-
  венные аналоги этих ключей из таблицы, приведенной ниже.

          /DELETE     - /D
          /REPLACE    - --
          /NOREPLACE  - /N
          /PREDELETE  - /O


                                     - 206 -
           RT-11, A step by step                    PIP   14-Nov-92


       8.10. Печать многих копий



       Несмотря на то что команды PRINT и TYPE являются аналогами команды COPY,
  они имеют особенность, связанную с размножением текста на принтере. Если  нам
  нужно получить много бумажных копий одного и того же документа, об этом нужно
  просто сказать системе с помощью ключа /COPIES:NN и в качестве аргумента ука-
  зать количество копий (десятичное) от 1 до 32. Сделать это  нетрудно.  Напри-
  мер:

  +---------------
  !  .PRINT/COPIES:3 SY:V5USER.TXT<ВК>
  !  -
  !  .^

  и мы получили на бумаге три красивые картинки, которые  видели  при  загрузке
  системы. Этот полезный ключ программа PIP понимает в его однобуквенном  экви-
  валенте /K:NN.






       8.11. Заключение.


                                       или
                              Некоторые подробности


       Заканчивая наши разговоры о копировании файлов, отметим,  что  программа
  PIP также позволяет копировать на однодисковых системах, хотя  это  и  утоми-
  тельно при больших объемах или большом числе файлов. Ключ /WAIT в этом случае
  превращается в /E.
       И в качестве справочной таблиы приведем возможные  сокращения  команд  и
  имена программ, которые их выполняют.

        COPY                 COP                - PIP
        TYPE                 TY                 - PIP
        DELETE               DEL                - PIP
        PROTECT              PRO                - PIP
        UNPROTECT            UNPR               - PIP
        PRINT                PRI                - PIP
        RENAME               REN                - PIP
        BOOT                 BO                 - DUP
        COPY/BOOT            COP/BO             - DUP
        COPY/DEVICE          COP/DEV            - DUP
        SQUEEZE              SQ                 - DUP
        INITIALIZE           INI                - DUP

  И также приведем сокращения ключей и их аналоги CSI в различных программах.


                                     - 208 -
           RT-11, A step by step             EDITor text  14-Nov-92


                              9. НАЧАЛО СОЗИДАНИЯ,



                                       или
                          Простой редактор текста EDIT

                                             Verba dolant, Scripta manent    .
                                           Слова улетают, написанное остается.


       - Н, вот, Алеша,- говорю я, когда мы в очередной раз пришли  в  машинный
  зал,- мы и добрались до заветной цели нашего путешествия. Сегодня мы займемся
  созданием текста.
       - Наконец-то,- с удовлетворением заметил Алеша,- а то мы только и знаем,
  что перекидываем с места на место кем-то созданные файлы, а сами создавать не
  умеем.
       - Ну, это ты брось,- говорю я,- один способ создавать текстовые файлы ты
  уже знаешь.
       - Это с помощью ключа /OUTPUT для программ DIR и DUMP. Так  это  неинте-
  ресно. Я хочу написать что-нибудь свое.
       - Значит, ты не все понял в прошлый раз,- говорю  я,-  вспомни,  что  мы
  говорили про команду TYPE?
       - Что эта команда введена для удобства пользователя,- вспоминает Алеша,-
  она копирует текстовые файлы на экран терминала и, в  сущности,  представляет
  собой команду:

       COPY/ASCII DEV:FILE.LST TT:

       - Правильно, Алеша. Но ты мог бы догадаться,  что  терминал  состоит  из
  двух устройств: выходного - это экран дисплея - и входного - это клавиатура.
       Поэтому операция копирования может быть выполнена и в обратную  сторону,
  т.е. с клавиатуры в файл.
       - Вот здорово,- загорелся Алеша,- это нужно попробовать:

  +---------------
  !  .COPY TT: DX1:PROBA.LST<ВК>
  !  -
  !            Files copied
  !            ------------
  !  TT:            to  DX1:PROBA .LST
  !  ---------------------------------
  !  ^ЭТОТ ГЛУПЫЙ ТЕКСТ ДЛЯ ПРОБЫ<ВК>
  !  -
  !  НАПИСАЛ АЛЕША<ВК>
  !  ^Z
  !  .^
  !

  - А закончить текст нужно символом CTRL/Z,- сказал Алеша,-  это  я  помню.  И
  сразу можно его посмотреть.


                                     - 209 -
           RT-11, A step by step             EDITor text  14-Nov-92


  +---------------
  !  .COPY DX1:PROBA.LST TT:<ВК>
  !  -
  !         Files copied
  !         ------------
  !  DX1:PROBA .LST  to  TT:
  !  -----------------------
  !  ЭТОТ ГЛУПЫЙ ТЕКСТ ДЛЯ ПРОБЫ
  !  ---------------------------
  !  НАПИСАЛ АЛЕША
  !  -------------
  !  .^
  !

       - И заметь, Алеша,- говорю я,- что здесь нет никакого изобретения, и эта
  возможность просто вытекает из логической основы операции копирования.
       Более того, так как терминал состоит из двух устройств, мы можем  скопи-
  ровать текст с клавиатуры на экран без обработки его клавиатурным  монитором.
  Это бывает нужно, например, для установки некоторых режимов терминалов  VT52,
  VT100  и  др.  Например,  чтобы  на  терминале  VT100  (он   эмулируется   на
  "Электронике-85") изображения набираемых символов было инверсное, т.е  темные
  буквы на светлом фоне, нужно послать на  экран  следующую  последовательность
  символов:

  +---------------
  !  .COPY TT: TT:<ВК>
  !  -
  !            Files copied
  !            ------------
  !  TT:            to  TT:
  !  ----------------------
  !  ^<ESC>[7m^Z
  !  -
  !  .^
  !

  где символ "ESC" на зарубежных терминалах имеет специальную клавишу, на  оте-
  чественных ей соответствует клавиша <АР2>. Кроме  того,  его  можно  получить
  одновременным нажатием клавиш CTRL/[.
       Простота такого способа является большим достоинством, но оно омрачается
  двумя недостатками - мелким и крупным. Мелкий недостаток состоит в том,  что,
  хотя этот способ можно в самом деле  использовать  для  получения  текстового
  файла, как правило в аварийных или нештатных ситуациях, но  помимо  этого  он
  мало на что пригоден. Однако крупный недостаток состоит в том, что  мы  не  в
  состоянии каким-либо образом изменить, отредактировать уже введенный текст.
       Вообще удивительно, как мы до сих пор справлялись с ошибками  при  вводе
  команд. Ведь первый случай создания текста - это ввод командной строки. Пусть
  текст только на экране и в буфере монитора, но он должен быть без ошибок.
       - А я давно догадался,- довольный собой сказал Алеша.
       Если мы внимательно посмотрим на клавиатуру, то увидим либо клавишу <ЗБ>
  ("Забой" на терминалах 15ИЭ-00-013), или <DEL>, <RUBOUT> на зарубежных терми-
  налах, или что-нибудь подобное. Основная функция этой клавиши - удалить  пос-
  ледний введенный символ.
       - Ты прав, Алеша,- добавляю я,- однако сам терминал  удалять  символ  не
  умеет. Его удаляет программа, принимающая символы с клавиатуры. И  в  зависи-
  мости от установленного режима она может вести себя двояким образом.
       Для начала вспомним историю. Когда не было дисплеев у первых мини-ЭВМ, в
  качестве терминала использовалась пишущая машинка или телетайп, которая  была
  установлена на выступающей подставке. Такой выступ в строительном деле  назы-


                                     - 210 -
           RT-11, A step by step             EDITor text  14-Nov-92


  вается - консоль. Системный терминал также стали называть системной консолью.
  И, несмотря на то, что в последствии они стали устанавливаться отдельно, как,
  например, LA36 или LA120 (а для микро-ЭВМ "Электроника-60" - пишущая  машинка
  "Консул"), название сохранилось. Для таких  терминалов  удаление  символа  на
  бумаге технически невозможно. А для того, чтобы показать, что в  памяти  этот
  символ удален, на бумаге печатается знак "\" и символы, которые были удалены.
  Например:

       .DABE\EB\TE

  в результате получится

       .DATE

  но иногда легче сразу удалить всю введенную строку и набрать ее  заново.  Для
  этого используется служебный символ "CTRL/U".
       Для тех случаев, когда система знает, что мы используем дисплей, клавиша
  <ЗБ> или <DEL> будет работать, как ей полагается, т.е. в действительности и в
  памяти, и на экране будет удаляться последний введенный символ.
       И всегда остается силовой прием -  вызвать  KMON  снова,  нажав  клавишы
  "CTRL/C". На экране появится точка, и все можно начинать сначала.






       9.1. Как мы пишем,


                                       или
                                 Что такое текст


       Вот теперь, когда мы имеем средства, хотя и примитивные, но все же  дос-
  таточные для создания текста, можно поговорить, что такое текст.
       - А что о нем говорить,-  не  понимает  Алеша,-  берешь  лист  бумаги  и
  пишешь, где хочешь.
       - Это ты так говоришь, потому что не отдаешь себе отчета в тех командах,
  которые твой мозг посылает руке. И даже при этом ты все-таки пишешь  последо-
  вательно букву за буквой, слово за  словом.  А  если  писать  в  произвольном
  порядке - одну букву здесь, а другую там, то это уже будет не текст, а карти-
  на. Кроме того, читаешь ты текст тоже последовательно. Еще никто не  придумал
  устройство, которое способно распознать сразу такой сложный образ, как  стра-
  ница текста.
       И чтобы как-то отделить твой мозг от исполняющего органа -  руки,  давай
  посмотрим, как ты пишешь на обычной механической пишущей машинке.
       - Я нажимаю на клавишу, которая соответствует нужному символу,- перечис-
  ляет Алеша, для которого эти действия привычны,- рычаг с литерой  ударяет  по
  бумаге и после его опускания каретка передвигается на одну позицию влево.
       - Вот видишь,- говорю я,- ты уже назвал одну отличительную черту  текста
  - позицию символа, - каждый символ в тексте имеет свою позицию  в  строке.  А
  как, например, начать новую строку?
       - В таком случае я либо сам возвращаю каретку в начальное, крайнее  пра-
  вое положение, либо пользуюсь рычагом возврата каретки, который сблокирован с
  механизмом перевода валика, т.е. строки.
       - Итак,- говорю я,- у  тебя  уже  появились  знакомые  символы  "Возврат
  Каретки" и "Перевод Строки". Кстати, заметь, что символ "Пробел" теперь имеет
  такое же значение, как и любой другой символ. Он  так  же  имеет  специальную


                                     - 211 -
           RT-11, A step by step             EDITor text  14-Nov-92


  клавишу и позицию в тексте.
       А теперь посмотрим, как это отражается в системе. Набери в  файл  какой-
  нибудь короткий текст и с помощью  программы  DUMP  посмотри,  как  он  будет
  представлен в памяти системы.
       - Я недавно в словаре юного книголюба прочитал  четверостишье  Пушкина,-
  вспоминает Алеша,- вот его и наберу в файл.

  +---------------
  !  .COPY TT: DX1:VERSE.TXT<ВК>
  !  -
  !  ^ВОДЫ ГЛУБОКИЕ<ВК>
  !  ПЛАВНО ТЕКУТ<ВК>
  !  ЛЮДИ ПРЕМУДРЫЕ<ВК>
  !  ТИХО ЖИВУТ<ВК>
  !  А.ПУШКИН<ВК>
  !  ^Z
  !

       - Сразу посмотрим, что у нас получилось,- сказал Алеша,- а заодно распе-
  чатаем дамп этого файла. Углом с отступом  мы  будем  показывать  угол  листа
  бумаги.

  -------+-------
         !ВОДЫ ГЛУБОКИЕ
         !ПЛАВНО ТЕКУТ
         !ЛЮДИ ПРЕМУДРЫЕ
         !ТИХО ЖИВУТ
         !А.ПУШКИН


  167 157 144 171 040 147 154 165 142 157 153 151 145 015 012 160
  В   О   Д   Ы       Г   Л   У   Б   О   К   И   Е   .   .   П
  154 141 167 156 157 040 164 145 153 165 164 015 012 154 140 144
  Л   А   В   Н   О       Т   Е   К   У   Т   .   .   Л   Ю   Д
  151 040 160 162 145 155 165 144 162 171 145 015 012 164 151 150
  И       П   Р   Е   М   У   Д   Р   Ы   Е   .   .   Т   И   Х
  157 040 166 151 167 165 164 015 012 141 056 160 165 173 153 151
  О       Ж   И   В   У   Т   .   .   А   .   П   У   Ш   К   И
  156 015 012 000 000 000 000 000 000 000 000 000 000 000 000 000
  Н   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

       Мы не будем приводить адреса каждого блока (тем более что он один).  Нам
  нужно только соответствие символа и его восьмеричного кода.
       - А теперь,- говорю я Алеше,- расставь эти коды так, как  выглядит  твое
  стихотворение на бумаге.
       - Тогда,- отвечает он,- я буду ориентироваться на начала строк стихотво-
  рения, так как они начинаются от края бумаги.

  167 157 144 171 040 147 154 165 142 157 153 151 145 015 012
   В   О   Д   Ы       Г   Л   У   Б   О   К   И   Е  """+"""
   +-----------------------------------------------------+
   V
  160 154 141 167 156 157 040 164 145 153 165 164 015 012
   П   Л   А   В   Н   О       Т   Е   К   У   Т  """+"""
   +-------------------------------------------------+
   V


                                     - 212 -
           RT-11, A step by step             EDITor text  14-Nov-92


  154 140 144 151 040 160 162 145 155 165 144 162 171 145 015 012
   Л   Ю   Д   И       П   Р   Е   М   У   Д   Р   Ы   Е  """+"""
   +---------------------------------------------------------+
   V
  164 151 150 157 040 166 151 167 165 164 015 012
   Т   И   Х   О       Ж   И   В   У   Т  """+"""
   +-----------------------------------------+
   V
  141 056 160 165 173 153 151 156 015 012 000
   А   .   П   У   Ш   К   И    Н """+"""  .
  <----------------------------------+

  Сразу видно,- расставив коды и символы,  говорит  Алеша,-  что  любая  строка
  заканчивается кодами 015 и 012.
       - Совершенно верно, и если я тебе подскажу, что  код  015  соответствует
  символу "ВК", а код 012 соответствует символу "ПС", что ты можешь сказать?
       - Тогда мы должны ввести понятие текущей позиции в тексте. Если вернуть-
  ся к пишущей машинке, то это позиция, на  которой  будет  напечатан  (введен)
  следующий символ. В таком случае возврат каретки ("ВК")  соответствует  уста-
  новлению текущей позиции в первую колонку на строке. Но строка при этом оста-
  лась та же и, если мы начнем печатать, то вновь введенные  символы  наложатся
  на те, которые были напечатаны на бумаге. И чтобы этого не  произошло,  вслед
  за "ВК" вводится символ перевода строки "ПС", который  передвигает  валик  на
  одну строку, и номер текущей позиции увеличивается  на  единицу.  Именно  это
  обстоятельство я показал на рисунке,  подчеркнув  коды  015,012  и  обозначив
  стрелкой их действие.
       - Молодец, Алеша,- говорю я,- в понятии ТЕКСТ есть несколько  "мелочей",
  которые пользователей ставят в тупик, и ты объяснил одну из них.  Большинство
  функций команд редактора связано с перемещающимся указателем текущего положе-
  ния, который обычно расположен между ближайшим символом, над которым произво-
  дится операция, и следующим символом в буфере. Важно понимать, что этот  ука-
  затель находится между двумя символами, но не над и не под символом. В начале
  операции редактирования указатель  текущего  положения  предшествует  первому
  символу буфера, хотя это и не отображается на  терминале.  В  любое  время  в
  течение процедуры редактирования необходимо представлять указатель как  теку-
  щую позицию редактора в тексте.  Указатель  перемещается  во  время  операций
  редактирования в зависимости от самой выполняемой операции. При этом  символы
  "ВК", "ПС", "ГТ", "ПФ" воспринимаются как обычные одиночные символы пользова-
  теля. Но в набранном тобой тексте есть одна "некрасивость". Все слова прижаты
  к началу строк, а везде принято фамилию автора печатать ближе к правому  краю
  бумаги или хотя бы под концом строк стихотворения.
       - Я согласен,- отвечает Алеша.- Чтобы это сделать,  есть  самый  простой
  способ - между кодами 015,012 и последующими  символами  "А.ПУШКИН"  вставить
  символы "Пробел". Каждый из них занимает ровно одну позицию, а на  бумаге  не
  печатается, и его код мы уже видели в нашем тексте - это 040.  Но  для  этого
  нужно использовать редактор текста, либо, если пользоваться нашим примитивным
  способом, набрать ВЕСЬ текст снова.
       Ну что же, начнем работать с редактором.

       История редактора текстовых файлов EDIT восходит еще к мини-ЭВМ PDP-8  и
  ее операционной системе OS-8. Тщательно определенный набор  команд  привел  к
  тому, что практически все время EDIT просуществовал без изменений.  За  такое
  долгое время эксплуатации (только в RT-11 уже 17 лет)  большинство  ошибок  в
  нем было выявлено. Ограниченные  возможности  компенсируются  высокой  надеж-
  ностью и неприхотливостью к параметрам  аппаратуры.  Можно  сказать,  что  на
  редакторе текста EDIT висит вывеска "Проверено! Мин нет!".
       Простота концепции EDITа привлекла и Гарри Кэлдела.  Текстовой  редактор
  ED из операционной системы CP/M отличается от EDITа из RT-11 лишь несколькими
  мелочами, не существенными для пользователя.


                                     - 213 -
           RT-11, A step by step             EDITor text  14-Nov-92


       Исторически сложилось так, что при проектировании редактора EDIT сущест-
  вовали только посимвольные печатающие устройства -  телетайпы  (отечественный
  аналог - пишущая машинка "Консул", поставляемая с "Электроника-60") - и  гра-
  фические векторные дисплеи VT11 (отечественный аналог СМ-7300  или  ЭПГ  СМ).
  Поэтому редактор позволял выполнять на телетайпах и пишущих машинка  построч-
  ное редактирование, а на графических терминалах - непосредственное редактиро-
  вание, показывая на экране целый кусок текста в 20 строк.
       Графический терминал VT11 уже стал исторической редкостью, поэтому рабо-
  ту с ним мы описывать не будем. Пишущие машинки тоже канули в лету, но именно
  ограниченность возможностей пишущей машинки позволяет редактору EDIT работать
  с любыми терминалами, не обращая внимания на различного  рода  изобретения  и
  усовершенствования.
       Так как редактирование происходит в одной строке и необходимо  одними  и
  теми же средствами вводить команды для редактора и сам текст пользователя, то
  основная трудность состоит в том, чтобы однозначно разделить команды редакто-
  ра и текст пользователя.
       Основная концепция текстового редактора EDIT заключена в следующем: выб-
  ран специальный символ "ESCape", который в обычном тексте пользователя встре-
  чаться не может, в силу чего его можно использовать как  разделитель  команд.
  Два символа  "ESC",  введенных  подряд,  инициируют  обработку  всего  набора
  команд, введенных оператором.
       В результате всю командную строку в общем виде можно изобразить  следую-
  щим образом:

    *команда-1<ESC>команда-2<ESC>команда-3<ESC><ESC>


       Примечание. На терминале редактор EDIT отображает символ "ESC" с помощью
  символа "DOLLARS" - $, поэтому нужно  быть  внимательным,  чтобы  не  спутать
  истинный знак доллара с отображением символа "ESC".
       В дальнейшем символ "ESC" стал  применяться  для  управления  отдельными
  функциями терминалов и принтеров и в принципе в  тексте  пользователя  встре-
  чаться может. Есть также редакторы текста, например KED,  позволяющие  встав-
  лять этот символ в текст пользователя. Конец примечания.

       В командах различают три элемента, не все из которых  могут  присутство-
  вать, но если присутствуют, то должны быть введены в следующей последователь-
  ности.

     - Числовой аргумент

     - Имя команды

     - Текстовой аргумент

       Причем, если команда не требует текстового аргумента,  то  использование
  символа "ESC" для разделения команд необязательно.

       ЧИСЛОВОЙ АРГУМЕНТ может представлять собой десятичное число в  диапазоне
  от -16383. до +16383. или символы "/", "=". При этом знак "+" может опускать-
  ся, а отсутствие аргумента предполагает значение 1 (или -1, если перед коман-
  дой стоит знак "-").
       ИМЯ КОМАНДЫ состоит из  одного  или  двух  латинских  символов  верхнего
  регистра. Редактор в командном режиме сам переводит символы нижнего  регистра
  в символы верхнего.
       ТЕКСТОВОЙ АРГУМЕНТ - строка или  несколько  строк  текста  пользователя,
  которые могут включать символы "ВК", "ПС", "ПФ", "ГТ"  и  т.п.  Так  как  имя
  команды представляет собой обычный символ, то в случае пропуска имени команды
  в ее качестве используется первый символ текста.


                                     - 214 -
           RT-11, A step by step             EDITor text  14-Nov-92


       - В таком случае,- говорит Алеша,- синтаксис команды можно описать  сле-
  дующим образом:

       Команда:=[N]<ИМЯ>[текст]$

  И на все определение у нас ушло меньше странички.
       - Почти,- говорю я,- есть еще маленькое дополнение.
       Команду или последовательность команд  можно  выполнить  несколько  раз,
  заключив всю последовательность в угловые скобки, и указав перед  ними  число
  повторений. Вот так:

    3<Команда-1$5<Команда-2$Команда-3$>>$$

       Редактор позволяет использовать до 20 уровней скобок и перед выполнением
  команд проверяет корректность использования скобок.
       - Вот и все, что нужно знать о синтаксисе редактора EDIT,- говорю я,-  а
  теперь давай исправляй свой текст.
       - Мы все время говорили, что редактирование текстов  занимает  в  работе
  пользователя наибольшую часть,- начал Алеша,-  поэтому  логично  будет,  если
  команда, вызывающая редактор текста, будет называться EDIT, и для  редактиро-
  вания текста достаточно набрать команду

  +---------------
  !  .EDIT DX1:VERSE.TXT<ВК>
  !  -
  !  *^
  !

       - Ты совершенно прав, но начиная с версии 5.2 этой командой по умолчанию
  вызывается более мощный и современный редактор KED. Если ты хочешь,  чтобы  в
  современных версиях вызывался по умолчанию редактор EDIT, то  нужно  об  этом
  сказать системе.
       - Либо воспользоваться явным способом,- говорит Алеша,- набрав команду

  +---------------
  !  .RUN SY:EDIT DX1:VERSE.TXT<ВК>
  !  -
  !  *^
  !

       - Правильно,- говорю я,- в любом случае после вызова редактора в  начале
  строки будет напечатана звездочка, которая говорит о том, что редактор  готов
  к приему команд.
       - И теперь можно редактировать текст,- торопится Алеша.
       - А текста еще нет в памяти, поэтому редактировать нечего. А для  начала
  сразу разберем процессы, которые происходят при работе редактора.
       Во-первых, какие файлы участвуют в данной операции? Общее правило  фирмы
  DEC, которое выполняется и в других ее системах,- ничего не изменять в исход-
  ном файле. Поэтому редактор сразу открывает  второй  файл,  который  является
  выходным, и все изменения записывает в него. После окончания работы и  закры-
  тия выходного файла входной файл переименовывается в тип .BAK  (запасной),  а
  выходной файл наследует имя и тип входного. Это  можно  изобразить  следующим
  образом.


                                     - 215 -
           RT-11, A step by step             EDITor text  14-Nov-92


  +---------+    +------------------------+    +'''''''''+
  !VERSE.TXT!===>! **** ****   ***  ***** !===>!VERSE.TXT!
  +---------+    ! *     *  *   *     *   !    +.........+
      V          ! ***   *  *   *     *   !         V
  +---------+    ! *     *  *   *     *   !    +---------+
  !VERSE.BAK!    ! **** ****   ***    *   !    !VERSE.TXT!
  +---------+    +------------------------+    +---------+


       Такая стратегия позволяет защититься от аварий и ошибок самого пользова-
  теля. И из нее вытекает два момента.
       Мы можем явно  указать  спецификацию  выходного  файла,  используя  ключ
  /OUTPUT, так же, как мы это делали в программах DIR или DUMP. В  этом  случае
  редактор не будет переименовывать входной файл в тип .BAK.
       Кроме того, мы можем указать,  что  не  будем  вносить  изменения,  т.е.
  использовать входной файл только для  просмотра.  Этот  весьма  строгий  ключ
  /INSPECT стоит применять всегда, когда редактирование не предполагается.
       - А если у нас еще нет файла для редактирования,- догадался Алеша,-  мы,
  наверное, должны использовать ключ /CREATE -  создать,-  и  редактор  создаст
  запись в каталоге и зарезервирует на диске свободное место.
       - Совершенно верно,- говорю я,- но все эти команды мы делали из  клавиа-
  турного монитора, а иногда имеет смысл делать эти операции, находясь в редак-
  торе.
       - И если мы введем команду

  +--------------
  !  .RUN SY:EDIT<ВК>
  !  -
  !  *^
  !

  - спрашивает Алеша,- редактор позволит выполнить те же действия?
       - И не только позволит,- отвечаю я,- но и явно разъяснит, что он делает.
  Кроме того, все это время сохраняется текстовой буфер редактора,  что  позво-
  ляет переносить достаточно большие куски текста из одного файла в другой.
       Первое, что нужно сделать, - это открыть файл для чтения  и  подготовить
  его для редактирования. Команда Edit Read сокращенно  записывается  следующим
  образом:

  +---------------
  !  *ERdev:filnam.typ$$
  !  -
  !  *^
  !

  Команда не влияет на содержимое буферов, а только устанавливает связь  редак-
  тора с файлом. Так как одновременно может быть открыт только  один  файл  для
  чтения, то команда ER закрывает предыдущий файл, если он был открыт.
       - И наверное,- говорит Алеша,- если мы входим в  EDIT  из  клавиатурного
  монитора по команде EDIT/INSPECT или EDIT/OUTPUT, команда Edit Read автомати-
  чески выполняется для файла, названного в команде EDIT.
       - Правильно,- подтверждаю я,- но нам необходимо и записывать файл.
       - По аналогии,- подхватывает Алеша,- команда должна быть  Edit  Write  и
  записывается следующим образом.

  +--------------
  !  *EWdev:filnam.typ[nblk]$$
  !  -
  !  *^


                                     - 216 -
           RT-11, A step by step             EDITor text  14-Nov-92



       - Да, команда EW открывает файл,- продолжаю я,- для вывода вновь создан-
  ного или отредактированного текста. Однако ни выходной текст,  ни  содержимое
  буферов не изменяется. И так как для вывода может  быть  открыт  только  один
  файл, EDIT закрывает уже открытый файл и сохраняет сделанные в нем изменения.
  Десятичное число, указанное в квадратных скобках (они являются частью  специ-
  фикации файла и должны вводиться пользователем), определяет  длину  выходного
  файла.
       - Или, если мы  будем  работать  с  клавиатурным  монитором,-  добавляет
  Алеша,- это соответствует ключу /ALLOCATE:nblk. И также если мы войдем в EDIT
  из монитора по команде EDIT/CREATE или EDIT/OUTPUT, команда EW  автоматически
  выполняется для файла, указанного с ключем /OUTPUT или в команде EDIT.
       - А какая же команда,- спрашивает Алеша,- будет соответствовать  обычной
  команде монитора EDIT, т.е. если я в клавиатурном мониторе даю команду:

  +---------------
  !  .EDIT DX1:VERSE.TXT<ВК>
  !  -
  !

       - То,- отвечаю я,- в редакторе это эквивалентно следующим действиям.

  +---------------
  !  .RUN SY:EDIT<ВК>
  !  -
  !  *EBDX1:VERSE.TXT[nblk]$$
  !  -

  Команда Edit Backup также резервирует нужное количество блоков, как и команда
  Edit Write. Кроме того, по завершению редактирования переименовывает  входной
  файл в тип .BAK.
       И наконец, мы можем просто закрыть выходной файл командой End File (EF),
  не прекращая работы с входным.

       - Но все наши долгие разговоры,- говорит Алеша,- касались  только  того,
  как указать редактору спецификацию файла и способ работы с ним.  А  ведь  нам
  нужно еще прочитать наш файл.
       - И не только прочитать, но и записать,- отвечаю я.






       9.2. Команды ввода/вывода




       - Я думаю, тебе понятно,- продолжаю я,- что редактор не может  прочитать
  в память весь файл, потому что он может быть очень большой. Поэтому  редактор
  читает файл страницами.
       - Это соответствует странице на бумаге?- спрашивает Алеша.
       - И да, и нет,- отвечаю я,- дело в том, что здесь еще нет четкого  опре-
  деления страницы. Чтение страницы прекращается либо  если  встретится  символ
  перевода формата "ПФ", либо если заполнен  внутренний  текстовой  буфер,  что
  примерно соответствует странице, хотя и разной  длины,  так  как  его  размер
  зависит от объема свободной памяти в системе.


                                     - 217 -
           RT-11, A step by step             EDITor text  14-Nov-92


       - И наверное,- заметил Алеша,- чтение может прекратиться, если  редактор
  встретил конец входного файла.
       - Правильно!
       - Но тогда у нас,- не унимается Алеша,- должны быть средства для  записи
  буфера в файл.
       - Конечно,- отвечаю я,- но запись уже происходит либо по  строкам,  т.е.
  ты указываешь сколько строк нужно записать в  файл;  либо  целиком  текстовой
  буфер, в том объеме, на сколько он заполнен. При  этом  следует  учесть,  что
  текстовой буфер освобождается на объем выведенного в файл текста.
       - Значит,- говорит  Алеша,-  весь  процесс  редактирования  представляет
  собой поочередное чтение текста из входного файла в буфер и запись отредакти-
  рованного текста из буфера в выходной файл.
       - И для того чтобы упростить этот процесс,- добавляю  я,-  была  введена
  комбинированная команда, которая сначала записывает текстовой буфер в  выход-
  ной файл, очищает его и читает в него следующую страницу текста  из  входного
  файла.
       И так как ты у нас знаток английского языка,-  предлагаю  я  Алеше,-  то
  назови названия этих трех команд.
       - Пожалуйста,- не смущаясь отвечает Алеша,- команда чтения  страницы  из
  входного файла так и будет называться Read - чтение - и  мы  сократим  ее  до
  одной буквы R.
       Команда записи текста в выходной файл будет  также  прямым  переводом  -
  Write - писать, - и также мы сократим ее до одной буквы W. Но она уже  должна
  иметь числовой аргумент, который может принимать следующие значения:

  +N
     - записывает N строк текста, начиная от указателя и кончая  концом  N-ой
       строки;

  -N
     - записывает N строк текста, начиная с первого символа на  -N  строке  и
       кончая указателем;

  0
     - записывает в выходной файл текущую строку от начала до указателя;

  /
     - записывает в выходной файл текст от указателя до конца буфера.

       И наконец, следущая страница читается командой Next,  также  сокращенной
  до одной буквы N. Так как мы можем писать в выходной  буфер  только  в  одном
  направлении - вперед, то числовой аргумент может быть только положительный  и
  означает, сколько страниц нужно переписать  из  входного  файла  в  выходной.
  Команда Next с числовым аргументом - это удобный и быстрый  способ  добраться
  до известной страницы текста, если в начальных  страницах  нет  необходимости
  вносить изменения.
       - Молодец Алеша,- завершаю я наш разговор,- в  заключение  нужно  только
  сказать о команде EXit, которая заканчивает сеанс редактирования. Команда  EX
  последовательно выполняет следующие действия:

     - записывает текстовый буфер в файл;
     - переносит остаток входного файла в выходной файл;
     - закрывает все входные и выходные файлы;
     - переименовывает входной файл в тип .BAK, если команда EB была в дейст-
       вии;
     - возвращает управление клавиатурному монитору.

       Аргументов у этой команды нет, поэтому если напечатать:


                                     - 218 -
           RT-11, A step by step             EDITor text  14-Nov-92


  +---------------
  !  *EX$$
  !  -
  !  .^
  !

  то все действия, необходимые  для  завершения  сеанса  редактирования,  будут
  выполнены.






       9.3. Начало редактирования



       - И теперь можно приступать к  редактированию,-  сказал  Алеша,  набирая
  команду

  +---------------
  !  .EDIT DX1:VERSE.TXT<ВК>
  !  -
  !  *R$$
  !  -
  !  *

  И никакого текста на экране,- удивленно сказал Алеша.
       - А чему ты удивляешься,- говорю я,- мы говорили, что редактор  построч-
  ный и предназначен для пишущих  машинок,  поэтому  для  того,  чтобы  увидеть
  текст, нужно дать ему команду.
       - Распечатки программ называются листингами,- говорит Алеша,- и так  как
  раньше ЭВМ использовались в основном программистами, то возможно, что  коман-
  да, распечатывающая текст, будет называться List, и сократив ее до одной бук-
  вы, попробуем:

  +---------------
  !  *R$$
  !  -
  !  *L$$
  !  -
  !  ВОДЫ ГЛУБОКИЕ
  !  -------------
  !  *

       - Ты оказался прав,- говорю я Алеше,- но распечатал только одну строку.
       - Это потому, что числовой  аргумент,-  отвечает  Алеша,-  по  умолчанию
  равен 1. Если я укажу его равным 5, по числу строк в нашем тексте


                                     - 219 -
           RT-11, A step by step             EDITor text  14-Nov-92


  +---------------
  !  *5L$$
  !  -
  !  ВОДЫ ГЛУБОКИЕ
  !  -------------
  !  ПЛАВНО ТЕКУТ
  !  ------------
  !  ЛЮДИ ПРЕМУДРЫЕ
  !  --------------
  !  ТИХО ЖИВУТ
  !  ----------
  !  А.ПУШКИН
  !  --------
  !  *

  то увидим полный текст.
       - А что нужно сделать,- спрашиваю я,- для того, чтобы переместить  слово
  "А.ПУШКИН" на несколько позиций вправо?
       - Нужно сначала переместить наш невидимый указатель на пятую  строку,  а
  затем вставить несколько пробелов,- отвечает Алеша.
       Так как мы уже стоим на первой строке, то нужно продвинуться  на  четыре
  строки. Английское слово Advance - продвинуться я сокращу до  одной  буквы  и
  перед ним укажу числовой аргумент - 4. А для вставки нет лучшей команды,  чем
  слово Insert - вставлять,- и его я также сокращу до одной буквы. Кроме  того,
  я больше не буду подчеркивать тот текст, который печатает система или  редак-
  тор, так как это будет понятно из контекста. И вот что у меня получилось:

  +---------------
  !  *4A$I    $L$$
  !  А.ПУШКИН
  !  *
  !

  Ничего не понял,- Алеша задумался,- вставлял, вставлял, а увидел только  пос-
  леднее слово. Для того чтобы посмотреть предыдущие строки, укажу-ка я отрица-
  тельный аргумент:

  +---------------
  !  *-4L$$
  !  ВОДЫ ГЛУБОКИЕ
  !  ПЛАВНО ТЕКУТ
  !  ЛЮДИ ПРЕМУДРЫЕ
  !  ТИХО ЖИВУТ
  !
  !  *
  !

  Опять непонятно,- сказал Алеша.
       - Ты забыл об указателе позиции в тексте,- объясняю я Алеше,- сначала ты
  передвинул его на четыре строки вниз. Потом вставил четыре пробела и этим так
  же сдвинул указатель, но уже на четыре позиции по строке. А так  как  команда
  List с положительным аргументом печатает текст от указателя и дальше,  то  ты
  увидел только слово "А.ПУШКИН".
       Когда ты распечатал текст с отрицательным аргументом,  то  команда  List
  распечатала текст до указателя. Но так как после этого нужно было  напечатать
  звездочку в начале следующей строки, то вместо пробелов (невидимых) ты увидел
  только пустую строку.
       Всю строку, на которой находится указатель, можно  посмотреть  следующим
  образом.


                                     - 220 -
           RT-11, A step by step             EDITor text  14-Nov-92


  +---------------
  !  *0LL$$
  !      А.ПУШКИН
  !  *
  !

  Команда 0L показывает текст от начала строки до указателя, а команда L  пока-
  зывает текст от указатели до конца строки. Для  удобства  эта  последователь-
  ность команд может быть выполнена с помощью комбинированной  команды  Verify,
  которая показывает всю строку, на которой находится указатель.
       Но у Алеши оказался сложный  случай,  когда  указатель  текущей  позиции
  находится между пробелами и текстом. И так как пробелы на экране  не  отобра-
  жаются, то узнать, сколько их находится перед текстом, можно косвенным  обра-
  зом. Для этого нужно сначала распечатать всю строку, а затем ее  часть  после
  указателя.

  +---------------
  !  *VL$$
  !      А.ПУШКИН
  !  А.ПУШКИН
  !  *
  !

       И, чтобы закончить разговор о команде List, скажем, что команда /L  рас-
  печатывает весь текст от указателя до конца буфера.
       - А мне кажется,- говорит Алеша,- что нужно еще вставить несколько  про-
  белов. Для того чтобы было удобней считать, я сделаю это следующим образом.

  +---------------
  !  *-5LV$$
  !  ВОДЫ ГЛУБОКИЕ
  !  ПЛАВНО ТЕКУТ
  !  ЛЮДИ ПРЕМУДРЫЕ
  !  ТИХО ЖИВУТ
  !      А.ПУШКИН
  !  *I   $-5LV$$
  !  ВОДЫ ГЛУБОКИЕ
  !  ПЛАВНО ТЕКУТ
  !  ЛЮДИ ПРЕМУДРЫЕ
  !  ТИХО ЖИВУТ
  !         А.ПУШКИН
  !  *EX$$
  !  .
  !

  Т.е. распечатав несколько строк  перед  той,  на  которой  стоит  указатель,-
  объясняет свои действия Алеша,- и текущую строку на экране (или  на  бумаге),
  можно получить более полное представление о текущем состоянии  текста.  Кроме
  того, после завершения редактирования я могу распечатать этот текст на  бума-
  ге.
       - А для нас,- прошу я,- сделай еще и  такой  же  дамп  с  расставленными
  кодами, как в предыдущем случае. Это позволит  нагляднее  увидеть  результаты
  нашей работы.


                                     - 221 -
           RT-11, A step by step             EDITor text  14-Nov-92


  -------+-------------
         !ВОДЫ ГЛУБОКИЕ
         !ПЛАВНО ТЕКУТ
         !ЛЮДИ ПРЕМУДРЫЕ
         !ТИХО ЖИВУТ
         !       А.ПУШКИН

  167 157 144 171 040 147 154 165 142 157 153 151 145 015
   В   О   Д   Ы       Г   Л   У   Б   О   К   И   Е  012
   +---------------------------------------------------+
   V
  160 154 141 167 156 157 040 164 145 153 165 164 015
   П   Л   А   В   Н   О       Т   Е   К   У   Т  012
   +-----------------------------------------------+
   V
  154 140 144 151 040 160 162 145 155 165 144 162 171 145 015
   Л   Ю   Д   И       П   Р   Е   М   У   Д   Р   Ы   Е  012
   +-------------------------------------------------------+
   V
  164 151 150 157 040 166 151 167 165 164 015
   Т   И   Х   О       Ж   И   В   У   Т  012
   +---------------------------------------+
   V
  040 040 040 040 040 040 040 141 056 160 165 173 153 151 156 015
                               А   .   П   У   Ш   К   И   Н  012
  <------------------------------------------------------------+


       Вот теперь в дампе хорошо видно, что мы  вставили  семь  пробелов  перед
  словом "А.ПУШКИН".
       - Но, если ты заметил,- обращаю я внимание Алеши,- текст у нас  оказался
  прижатым к краю бумаги, а правая часть совсем пустая. Если ты читал  сборники
  стихов, то замечал, что стихи печатаются по середине страницы, или в  крайнем
  случае отступив от начала обычного текста.
       - Я тоже могу отступить,- возразил Алеша,- только  я  вставлю  в  начало
  каждой строки символ горизонтальной табуляции  (мы  нажатие  этой  клавиши  в
  редакторе будем обозначать - <ГТ>). Те пробелы, которые мы только что встави-
  ли, я заменю на два символа горизонтальной табуляции. Для  этого  потребуется
  выполнить следующие команды.

  +---------------
  !  .EDIT DX1:VERSE.TXT<ВК>
  !  *R5L$$
  !  ВОДЫ ГЛУБОКИЕ
  !  ПЛАВНО ТЕКУТ
  !  ЛЮДИ ПРЕМУДРЫЕ
  !  ТИХО ЖИВУТ
  !         А.ПУШКИН
  !  *I<ГТ>$AI<ГТ>$AI<ГТ>$AI<ГТ>$-3L2L$$
  !          ВОДЫ ГЛУБОКИЕ
  !          ПЛАВНО ТЕКУТ
  !          ЛЮДИ ПРЕМУДРЫЕ
  !          ТИХО ЖИВУТ
  !         А.ПУШКИН
  !  *
  !

  Т.е я сначала прочитал первую страницу в буфер,- поясняет Алеша,- и  распеча-
  тал наш текст на экране. При этом положение указателя текущей позиции в текс-


                                     - 222 -
           RT-11, A step by step             EDITor text  14-Nov-92


  те не изменилось и он находился в первой позиции первой строки. Затем я вста-
  вил символ "ГТ" в начало первой строки и передвинул  указатель  на  следующую
  строку, и так как команда Advance устанавливает указатель в начало строки, то
  я мог сразу вставлять символ "ГТ" и так далее.
       И наконец, последней группой команд я распечатал то, что у меня  получи-
  лось. Команда -3L распечатала измененный текст, предшествующий  указателю,  а
  команда 2L распечатала то, что у меня осталось.
       Но, я не знаю, как мне удалить семь пробелов в начале следующей строки,-
  закончил свои объяснения вопросом Алеша.
       - Здесь есть несколько вариантов,- отвечаю я,- давай разберем их по оче-
  реди, от простого к сложному.
       Во-первых, можно как  обычно  продвинуться  в  начало  следующей  строки
  командой Advance и удалить семь символов командой 7Delete. При этом  числовой
  аргумент действует так, как мы об  этом  говорили  выше,  т.е.  положительный
  аргумент распространяет действие команды от указателя в сторону конца текста.
  А затем вставить два символа "ГТ". Таким образом,  продолжая  твои  действия,
  это могло выглядеть так.

  +---------------
  !  *A$7D$I<ГТ><ГТ>$V$$
  !                  А.ПУШКИН
  !  *
  !

       Во-вторых, следует отметить, что подобные операции удаления с  последую-
  щей вставкой символов очень часто  встречаются  при  редактировании  текстов.
  Было бы разумно заменить эту комбинацию одной командой Change -  замена.  При
  этом числовой агрумент взят от команды Delete, а текстовой аргумент от коман-
  ды Insert. Вот как это выглядит на практике.

  +---------------
  !  *A$7C<ГТ><ГТ>$V$$
  !                  А.ПУШКИН
  !  *
  !

       Эти  два  варианта  демонстрировали  действие   символьноориентированных
  команд Delete и Change. Однако то же самое можно сделать и с помощью строкоо-
  риентированных команд. Иногда это бывает более удобным. Поэтому:
       В-третьих, можно полностью убить (Kill) следующую строку  и  вместо  нее
  набрать новую. Команда  Kill  имеет  числовой  аргумент,  который  показывает
  сколько строк нужно удалить. А вставлять нужный текст мы будем любимой коман-
  дой Insert. Вот как это делается.

  +---------------
  !  *A$K$I<ГТ><ГТ>А.ПУШКИН$V$$
  !                  А.ПУШКИН
  !  *
  !

       В-четвертых, так же как мы комбинировали вместе команды Delete и Insert,
  можно скомбинировать команды Kill и Insert, получив при этом команду Exchange
  - обмен,- которая производит обмен указанного числовым аргументом  количества
  строк текстового буфера и текстовым аргументом команды. Покажем это на приме-
  ре.


                                     - 223 -
           RT-11, A step by step             EDITor text  14-Nov-92


  +---------------
  !  *A$1E<ГТ><ГТ>А.ПУШКИН$V$$
  !                  А.ПУШКИН
  !  *
  !
       И так же, как в предыдущем случае,- прошу я Алешу,- распечатай  получив-
  шийся текст и дамп с расставленными кодами.

  -------+----------------
         !        ВОДЫ ГЛУБОКИЕ
         !        ПЛАВНО ТЕКУТ
         !        ЛЮДИ ПРЕМУДРЫЕ
         !        ТИХО ЖИВУТ
         !                А.ПУШКИН

  011 167 157 144 171 040 147 154 165 142 157 153 151 145 015
   .   В   О   Д   Ы       Г   Л   У   Б   О   К   И   Е  012
   +-------------------------------------------------------+
   V
  011 160 154 141 167 156 157 040 164 145 153 165 164 015
   .   П   Л   А   В   Н   О       Т   Е   К   У   Т  012
   +---------------------------------------------------+
   V
  011 154 140 144 151 040 160 162 145 155 165 144 162 171 145 015
   .   Л   Ю   Д   И       П   Р   Е   М   У   Д   Р   Ы   Е  012
   +-----------------------------------------------------------+
   V
  011 164 151 150 157 040 166 151 167 165 164 015
   .   Т   И   Х   О       Ж   И   В   У   Т  012
   +-------------------------------------------+
   V
  011 011 141 056 160 165 173 153 151 156 015
   .   .   А   .   П   У   Ш   К   И   Н  012
  <----------------------------------------+


  Итак, Алеша,- говорю я,- твое стихотворение уже начало  приобретать  красивую
  форму. Но если уж редактировать его до конца, то  давай  сделаем  все  строки
  одинаковой длины и, чтобы у нас текст принимали в редакциях, расставим строч-
  ки через одну.
       - Я понимаю, что это не так сложно,- говорит Алеша,- но  для  этого  нам
  нужно научиться двигаться по символам, иначе мы не сможем добраться до  сере-
  дины строки, т.е. до того места, где нам нужно вставлять пробелы.
       - И команда эта назывется Jump - прыжок,-  подсказываю  я,-  а  числовой
  аргумент используется как обычно с символьноориентированными командами.
       - Тогда,- берется за дело Алеша,- чтобы не считать пробелы в уме, я буду
  перед редактированием каждой строки распечатывать наш текст полностью  (благо
  он небольшой) и вслед за ним текущую строку. Вот таким образом.

  +---------------
  !  .EDIT DX1:VERSE.TXT<ВК>
  !  *R10LV$$
  !          ВОДЫ ГЛУБОКИЕ
  !          ПЛАВНО ТЕКУТ
  !          ЛЮДИ ПРЕМУДРЫЕ
  !          ТИХО ЖИВУТ
  !                  А.ПУШКИН
  !          ВОДЫ ГЛУБОКИЕ


                                     - 224 -
           RT-11, A step by step             EDITor text  14-Nov-92


  !  *5J0L$$
  !          ВОДЫ
  !  *I $V$$
  !          ВОДЫ  ГЛУБОКИЕ
  !  *
  !

  Я не буду теперь разделять команды символами $,- поясняет  Алеша,-  там,  где
  это допустимо. Кроме того, позицию указателя я буду проверять командой 0L,  а
  результаты своих действий - командой V. И  чтобы  сгруппировать  действия  по
  функциям, я сначала расставлю пробелы, а потом займусь строками.

  +---------------
  !  *A7J-2L5LV0L$$
  !          ВОДЫ  ГЛУБОКИЕ
  !          ПЛАВНО ТЕКУТ
  !          ЛЮДИ ПРЕМУДРЫЕ
  !          ТИХО ЖИВУТ
  !                  А.ПУШКИН
  !          ПЛАВНО ТЕКУТ
  !          ПЛАВНО
  !  *I  $V$$
  !          ПЛАВНО   ТЕКУТ
  !  *
  !
  Эту сложную команду,- предлагает Алеша,- которую я только что выполнил, пусть
  читатели разберут сами, тем более что результаты ее  работы  хорошо  видны  в
  распечатке. А я продолжу дальше.

  +---------------
  !  *2A5J-5L5LV0L$$
  !          ВОДЫ  ГЛУБОКИЕ
  !          ПЛАВНО   ТЕКУТ
  !          ЛЮДИ ПРЕМУДРЫЕ
  !          ТИХО ЖИВУТ
  !          ТИХО ЖИВУТ
  !          ТИХО
  !  *4<I $>$V$$
  !          ТИХО     ЖИВУТ
  !  *
  !

  Теперь мне нужно вернуться в начало буфера,- говорит Алеша,- не  нужно  долго
  думать, чтобы понять, что команда для этого  будет  называться  Beginning.  И
  разбивку по строкам можно выполнить одной сложной командой.



                                     - 225 -
           RT-11, A step by step             EDITor text  14-Nov-92


  +---------------
  !  *B$4<AI<ВК><ПС>$A>A$-10LV$$
  !          ВОДЫ  ГЛУБОКИЕ
  !
  !          ПЛАВНО   ТЕКУТ
  !
  !          ЛЮДИ ПРЕМУДРЫЕ
  !
  !          ТИХО     ЖИВУТ
  !
  !                  А.ПУШКИН
  !  *EX$$
  !  .
  !

  Завершив редактирование,- говорит Алеша,- я распечатаю то, что у нас  получи-
  лось, и дамп с расставленными кодами.

  -------+--------------
         !        ВОДЫ  ГЛУБОКИЕ
         !
         !        ПЛАВНО   ТЕКУТ
         !
         !        ЛЮДИ ПРЕМУДРЫЕ
         !
         !        ТИХО     ЖИВУТ
         !
         !                А.ПУШКИН

  011 167 157 144 171 040 040 147 154 165 142 157 153 151 145 015
   .   В   О   Д   Ы           Г   Л   У   Б   О   К   И   Е  012
  015 012 <----------------------------------------------------+
  """/"""
  011 160 154 141 167 156 157 040 040 040 164 145 153 165 164 015
   .   П   Л   А   В   Н   О               Т   Е   К   У   Т  012
  015 012 <----------------------------------------------------+
  """/"""
  011 154 140 144 151 040 160 162 145 155 165 144 162 171 145 015
   .   Л   Ю   Д   И       П   Р   Е   М   У   Д   Р   Ы   Е  012
  015 012 <----------------------------------------------------+
  """/"""
  011 164 151 150 157 040 040 040 040 040 166 151 167 165 164 015
   .   Т   И   Х   О                       Ж   И   В   У   Т  012
  015 012 <----------------------------------------------------+
  """/"""
  011 011 141 056 160 165 173 153 151 156 015
   .   .   А   .   П   У   Ш   К   И   Н  012
  <----------------------------------------+



                                     - 226 -
           RT-11, A step by step             EDITor text  14-Nov-92


       9.4. Контекстный поиск



       - Тот набор команд,- говорю я Алеше,- который мы использовали при редак-
  тировании стихотворения, является достаточным для создания  и  редактирования
  практически любого текста.
       - Он даже является избыточным,- замечает Алеша,- ведь в нем есть  комби-
  нированные команды.
       - И в то же время,- продолжаю  я,-  для  эффективной  работы  желательно
  иметь набор команд, позволяющий найти в  тексте  заданную  последовательность
  символов. Т.е. то, что называется контекстным поиском.
       Основная команда для поиска Get - получить -  ищет  в  текстовом  буфере
  текущей страницы последовательность символов, которая задана в  ее  текстовом
  аргументе. А что, по-твоему,- спрашиваю я Алешу,- будет  обозначать  числовой
  аргумент?
       - Так как команда Get,- ищет ответ Алеша,- не работает ни  со  строками,
  ни с символами, то, скорее всего, числовой аргумент  будет  обозначать  число
  повторений поиска. Т.е. если заданная последовательность символов встречается
  в тексте несколько раз, то ее N-ое появление можно найти, задав N в  качестве
  числового аргумента в команде Get.
       - Молодец, Алеша,- говорю я,- только нужно отметить, что  в  силу  того,
  что ты сейчас сказал, числовой аргумент не может быть отрицательным или  рав-
  ным нулю, а только положительным.
       Еще одно свойство команды Get заключается в ограниченности ее  действия.
  Поиск осуществляется только в  пределах  текстового  буфера  страницы.  Более
  сильная команда Find - искать - ищет по всему файлу, и по своей сути является
  комбинированной командой Get, Next. Однако так как мы не можем  прочитать  из
  выходного файла уже записанную страницу, то такой поиск может  осуществляться
  только в одну сторону - от начала файла к его концу. Для возвращения в начало
  файла нужно закрыть выходной файл командой  EXit,  завершив  при  этом  сеанс
  редактирования, и начать новый сеанс.
       - Команда Get,- добавляет Алеша,- тоже не умеет искать назад, но я  могу
  дать команду Beginning и вернуться в начало буфера.
       - И еще нужно отметить общее свойство команд поиска в  EDIT,-  продолжаю
  я,- указатель текущей позиции после завершения поиска устанавливается в конец
  найденной модели поиска.
       - И других вариантов поиска,- спрашивает Алеша,- вроде бы не существует?
       - Ошибаешься,- поправляю я его,- ты мог бы заметить,  что  команда  Find
  переписывает в выходной файл все страницы, поиск в которых оказался  неуспеш-
  ным. В то же время, чтобы уравновесить команду End File, которая позволяет  в
  таком случае создать выходной файл из первой части входного файла, была  вве-
  дена команда Position, которая позволяет быстро  получить  выходной  файл  из
  второй части входного. Для этого необходимо в тексте иметь некоторую последо-
  вательность символов, которая является разделителем частей файла. Затем  осу-
  ществляются следующие действия.

  +---------------
  !  .EDIT BIGFILE.TXT<ВК>
  !  *R$$                  - чтение первой страницы
  !  *PКОНЕЦ 1 ЧАСТИ$$     - поиск разделителя
  !  *EX$$                 - запись оставшейся части в файл
  !  .
  !
       - А если мне  нужно  установить  указатель  в  начало  найденной  модели
  поиска,- спрашивает Алеша,- я должен сам считать,  на  сколько  символов  мне
  нужно вернуться?
       - Ты правильно заметил эту особенность,- отвечаю  я  ему,-  поэтому  мы,
  несмотря на некоторые повторения, суммируем все свойства числового аргумента:


                                     - 227 -
           RT-11, A step by step             EDITor text  14-Nov-92


  N
     - указывает целое положительное число символов или  строк  от  указателя
       текущего положения в тексте в сторону конца файла или текстового буфе-
       ра;

  -N
     - указывает число символов или строк, которое используется в операции, и
       предшествует указателю текущего положения;

  0
     - указывает на текст от начала  текущей  строки  до  указателя  текущего
       положения;

  /
     - указывает на текст от указателя текущего положения и до конца  тексто-
       вого буфера;

  =
     - определяет количество символов, которое было использовано в предыдущем
       текстовом аргументе.

       Последнее можно пояснить на примере. Если мы искали  некоторое  слово  и
  хотим вернуться в начало найденной модели поиска, то  должны  дать  следующую
  последовательность команд:

      GПРЕМУДРЫЕ$=J$$

       Таким образом, комбинация "=J" вернет указатель текущего положения назад
  на длину предыдущего текстового аргумента.
       - И также, наверное, можно удалять символы,-  говорит  Алеша,-  если  мы
  хотим удалить всех премудрых из файла, то должны  дать  такую  последователь-
  ность команд:

       100<FПРЕМУДРЫЕ$=D$>$$

       - Это ты написал правильно,- говорю я,- но можно не удалять премудрых, а
  заменить их, например, на умных. Для этого можно  дать  такую  последователь-
  ность команд:

      100<FПРЕМУДРЫЕ$=CУМНЫЕ$>$$

       Других случаев применения знака "=" нет, потому что он работает только с
  символами.






       9.5. Другие полезные команды



       - А  что,  разве  при  редактировании  текста   может   еще   что-нибудь
  понадобиться?- удивленно спрашивает Алеша.
       - Конечно,- отвечаю я,- дополнительный сервис всегда  полезен,  если  он
  удобно выполнен.

       Например, очень часто нужно  переставить  в  тексте  значительные  куски


                                     - 228 -
           RT-11, A step by step             EDITor text  14-Nov-92


  текста или вставить один и тот же текст в разных частях файла. Для этого нуж-
  но уметь сохранять текст в каком-то особом буфере и иметь команды  восстанов-
  ления текста из него.
       EDIT выделяет память для такого буфера динамически, т.е.  в  зависимости
  от размера доступной памяти в системе, от размера  текстового  буфера  и  др.
  Каких-либо особых действий со стороны пользователя для  этого  не  требуется.
  Достаточно дать команду Save - сохранить,- числовой аргумент которой  опреде-
  ляет число строк, которое необходимо сохранить в буфере, от указателя текуще-
  го положения в сторону конца текстового буфера. Т.е. числовой аргумент  может
  быть только положительным. Команда Save  не  изменяет  содержимое  текстового
  буфера и положение указателя текущей позиции в нем.
       - Тогда я знаю команду,- говорит Алеша,- которая  восстанавливает  текст
  из буфера - это Unsave. Естественно, что она  не  изменяет  содержимое  Save-
  буфера и не требует никаких аргументов.
       - Может быть,- спрашиваю я,- ты сможешь назвать команду, которая очищает
  этот буфер сохранения?
       - Я попробую ее вычислить,- отвечает  Алеша,-  мы  не  можем  для  этого
  использовать команду 0S, так как по логике предыдущих команд это означало  бы
  сохранение текущей строки от начала до указателя текущего положения. С другой
  стороны, команда 0U не имела бы смысла в контексте восстановления, так как мы
  не можем восстанавливать буфер 0 раз. Если рассматривать  комбинацию  0U  как
  особый случай, то можно принять его за команду очистки буфера сохранения.
       - Превосходно, Алеша,- хвалю я его за грамотный анализ языка,- тогда  мы
  можем познакомиться еще с одним буфером.

       По аналогии с текстовым буфером сохранения, можно говорить  и  о  буфере
  сохранения команд.
       По определению Краткого Оксфордского словаря английского  языка  префикс
  macro происходит от греческого macros, обозначающего "длинный" или "большой".
  Как префикс macro употребляется во многих составных  научных  словах,  таких,
  как "макрокосмос" (обозначающем Вселенную) и "макроскопический" (обозначающем
  видимый невооруженному глазу). В программировании термин макрос  используется
  в том же смысле, поскольку по одной макрокоманде обычно генерируется  длинная
  последовательность основных команд. Таким же образом можно запомнить последо-
  вательность команд в редакторе текста и затем использовать ее много раз,  как
  одну большую команду.
       - А зачем макрокоманда нужна в редакторе текста?- не понял Алеша.
       - Простейшие случаи применения макрокоманды,-  отвечаю  я,-  встречаются
  очень часто. Например, нужно во всем тексте заменить несколько подряд  идущих
  пробелов на один или убрать пробелы, стоящие перед точкой. И  EDIT  поддержи-
  вает такую возможность отдельной командой.
       - А название у нее будет Macro,- говорит Алеша,- и у нее не будет число-
  вого аргумента.
       - Все это так,- продолжаю я,- но нас ждет проблема,  как  отделить  одни
  команды от других, например от самой команды Macro.  Для  этого  используются
  специальные символы - ограничители. Они  выбираются  пользователем  и  должны
  отвечать следующим условиям: быть парными, т.е  один  начинает  макрокоманду,
  второй - завершает, и не встречаться в тексте макрокоманды. Например:

       M/GПРЕМУДРЫЕ$=CУМНЫЕ$/$$

       При этом нужно быть внимательным и предусмотрительным. Необходимо учиты-
  вать порядок действий, так как макрокоманда будет повторяться несколько  раз.
  Так, например, предыдущий пример лучше записать следующим образом.

     M/GПРЕМУДРЫЕ$=CУМНЫЕ$GПРЕМУДРЫЕ$=J-JV$/$$

  Это позволит перед повторным выполнением макрокоманды подумать, - а нужно  ли
  ее выполнять в данном месте.


                                     - 229 -
           RT-11, A step by step             EDITor text  14-Nov-92


       - А я опять могу назвать  команду  для  выполнения  этой  макрокоманды,-
  вставляет Алеша,- "выполнить" по-английски  будет  EXECUTE,  поэтому  команда
  будет называться Execute Macro, и сократить ее нужно до двух букв - EM. После
  определения макрокоманды ее можно выполнить в любом месте следующим образом:

  +---------------
  !  *EM$$
  !

  Она также может иметь числовой аргумент, который указывает,  сколько  раз  ее
  нужно выполнить. Макрокоманду можно заключать в угловые скобки и  включать  в
  цепочки обычных команд. Уфф!!
       - Ну и ну,- подыгрываю я уставшему Алеше,- тогда уж скажи, как  очистить
  буфер макрокоманд.
       - Это совсем просто,- перевел дух Алеша,- во-первых,  буфер  макрокоманд
  обновляется при определении новой макрокоманды.  Во-вторых,  это  следует  из
  предыдущего если мы дадим определение макрокоманды с  пустым  аргументом,  то
  буфер, естественно, очистится. Например, так:

      M//$$

       И, в-третьих, по аналогии с очисткой текстового буфера сохранения, можно
  дать определение макрокоманды с нулевым числовым аргументом.

       - Наконец,- завершаю я разговор  о  полезных  командах,-  есть  команды,
  включенные в EDIT просто для удобства работы.

       Например, если ты помнишь, что мы говорили о верхнем и нижнем  регистрах
  кода ASCII, то EDIT позволяет управлять этими регистрами. По-английски  верх-
  ний регистр называется Uppercase  и  определяет  прописные  буквы,  а  нижний
  регистр называется Lowercase, который определяет строчные буквы. EDIT  позво-
  ляет при вводе символов нижнего регистра автоматически переводить их в симво-
  лы верхнего регистра. Для этого нужно использовать команду Edit  Upper  (EU).
  Для разрешения ввода символов обоих регистров используется команда Edit Lower
  (EL). При этом следует отметить, что символы, вводимые  как  команды,  всегда
  переводятся в верхний регистр.

       И последняя команда просто позволяет посмотреть номер  версии  редактора
  EDIT. Она так и называется Edit Version (EV).






       9.6. Сообщения об ошибках



       Такие достаточно большие интерактивные программы, как  текстовой  редак-
  тор, как правило, должны иметь богатый набор сообщений об ошибках, в  против-
  ном случае пользователь очень часто будет попадать в тупиковые ситуации. Ниже
  приводятся сообщения текстового редактора EDIT, поставляемого с RT-11 V5.4.

  "<>" error
     - Ошибка скобок
       При группировке команд с помощью угловых скобок была  нарушена  парность
  левых и правых скобок.


                                     - 230 -
           RT-11, A step by step             EDITor text  14-Nov-92


  Invalid argument
     - Неверный аргумент
       При вводе команды был указан неверный, как правило  числовой,  аргумент.
  Проверьте командную строку.

  Invalid command
     - Неверная команда
       Как правило, сообщение выдается, когда пропущена команда Insert, и  пер-
  вый символ текстового аргумента воспринимается как имя  команды,  которой  не
  существует.

  ?EDIT-W-Command bufer almost full
     - Буфер команд почти заполнен
       Первый раз сообщение выдается, когда в буфере команд осталось 10 свобод-
  ных символов. Необходимо завершить команду в пределах этих 10 символов. Сооб-
  щение будет выдаваться при вводе каждого символа в этой критической зоне.

  Command buffer full; no command(s) executed
     - Буфер команд полон, команды не выполнялись
       Вы  не  смогли  уложиться  в  10  символов  критической  зоны,   поэтому
  команду(ы) нужно набирать заново.

  Insufficient memory
     - Недостаточно памяти
       Сообщение выдается, когда не хватает памяти  для  одного  из  буферов  -
  текстового буфера текущей страницы, буфера сохранения текста или буфера  мак-
  рокоманд. Так как размеры буферов  определяются  динамически,  то  уменьшение
  размера любого буфера освобождает место  для  других.  Уменьшение  текстового
  буфера текущей страницы достигается переписыванием его части в выходной файл.
  Для уменьшения буфера сохранения  текста  нужно  уменьшить  количество  строк
  запоминаемого текста.

  Search failed
     - Неудачный поиск
       Как правило, при многократном поиске или поиске в  составе  макрокоманды
  был обнаружен конец файла или, если использовалась команда Get, конец тексто-
  вого буфера. В большинстве случаев на эту ошибку можно не реагировать.

  Invalid macro
     - Неверная макрокоманда
       При определении макрокоманды допущена ошибка. Необходимо проверить опре-
  деление макрокоманды и в первую очередь символы-ограничители.

  End of input file
     - Конец входного файла
       При выполнении какой-либо  команды,  например  Read,  Next,  достигается
  конец входного файла.

  Input error
     - Ошибка чтения входного файла
       При выполнении команд Read, Next, Find, Position произошла ошибка чтения
  входного файла.

  Output file full
     - Выходной файл полон
       При редактировании в файл вставлено текста больше, чем это возможно  при
  текущем размере открытого выходного файла.


                                     - 231 -
           RT-11, A step by step             EDITor text  14-Nov-92


  Invalid device
     - Неверное устройство
       При попытке открыть файл в спецификации было указано неверное  устройст-
  во. Иногда может оказаться, что не загружен драйвер этого устройства.

  File not found
     - Файл не найден
       При попытке открыть файл имя файла, указанное в спецификации, не найдено
  в каталоге указанного устройства.

  No file open for output
     - Не открыт файл для вывода
       Попытка выполнить команды Write, Next и им подобные, не  открывая  файла
  для вывода.

  Directory full
     - Каталог полон
       При попытке открыть выходной файл оказывается, что нет места в  каталоге
  для записи о файле (см. 5 главу).

  Invalid file name
     - Неверное имя файла
       При открытии файла была допущена ошибка в имени файла  -  либо  неверный
  символ, либо слишком длинное, более 6 символов, имя.

  System I/O error
     - Ошибка системного ввода/вывода.

  Device full
     - Устройство заполнено
       На устройстве, предназначенном для выходного файла, нет достаточно  мес-
  та.

  No file open for input
     - Не открыт входной файл
       Попытка прочитать следующую текстовую страницу из входного файла,  когда
  он не был открыт. Например, при создании нового текста, когда  открыт  только
  выходной файл.

  Output error
     - Ошибка вывода
       При выполнении команд Write, Next и им подобных  произошла  ошибка  уст-
  ройства или носителя. Рекомендуется прервать сеанс редактирования и проверить
  устройство на плохие блоки.

  Command aborted
     - Выполнение команды прервано
       При выполнении команды встретилась  ошибка,  препятствующая  дальнейшему
  выполнению команды. Рекомендуется не строить очень длинные последовательности
  команд.

  Protected file already exists
     - Защищенный файл уже существует
       При попытке открыть выходной файл на этом же устройстве обнаружен файл с
  таким же именем и типом.

  ?EDIT-W-Superseding existing file
     - Существующий файл заменен
       EDIT печатает это предупреждающее сообщение в ответ на команды EXit, End


                                     - 232 -
           RT-11, A step by step             EDITor text  14-Nov-92


  File, Edit Write, если на выходном устройстве уже был файл с указанным именем
  и типом.


       - И несколько слов  в  заключение,-  обращаюсь  я  к  Алеше  и  к  нашим
  читателям,- на протяжении всей книги мы занимались проблемами, которые  прак-
  тически невозможно запомнить - их нужно понять и прочувствовать. Это  в  осо-
  бенной мере касается редактора текстов EDIT. И не только потому,  что  указа-
  тель текущей позиции никак не отображается. Его нужно чувствовать, он  должен
  постоянно отображаться в нашем сознании. Это понимание  в  дальнейшем  сильно
  облегчит работу с мощными экранными текстовыми редакторами.
       Здесь рекомендуется прервать чтение книги и поработать некоторое время с
  редактором EDIT, написать какие-нибудь тексты, например письма  к  родным,  а
  заодно проверить понимание предыдущего материала.


                                     - 233 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


                          10. ЭКРАННЫЙ РЕДАКТОР ТЕКСТА





       После небольшого, запланированного перерыва мы снова встретились с  Але-
  шей у ДВК. Он уже освоил редактор EDIT (а как Вы?) и готов к новым боям. Опыт
  показывает, что для освоения редактора EDIT требуется  не  более  недели  при
  ежедневной работе за терминалом около 3 часов. Опыт работы с текстовым редак-
  тором EDIT должен был показать, что  непосредственное  редактирование  текста
  (из головы) за экраном не очень эффективно, даже с появлением экранных редак-
  торов. Главная причина в том, что при редактировании текста на  бумаге  можно
  одним взглядом охватить несколько страниц, а на экране только 24 строки. Кро-
  ме того, в дальнейшем мы получим дополнительные доводы в пользу  редактирова-
  ния старым, дедовским способом на бумаге. Главное же преимущество  редакторов
  текста в писательской деятельности в том, что после исправления  старых  оши-
  бок, новые не появляются. Кроме того,  получение  чистого,  после  изменений,
  экземпляра рукописи возможно в 20 - 25 раз быстрее и без существенных эмоцио-
  нальных и других затрат для автора.
       Экранный редактор KED был создан фирмой DEC для писателей, хотя в  даль-
  нейшем программисты настояли на своем. Как бы то  ни  было,  но  сегодня  это
  штатный экранный редактор для всех операционных  систем  фирмы  DEC,  хотя  в
  начале он создавался  для  операционных  систем  RT-11  V4.0,  RSX-11M  V3.2,
  RSX-11M/Plus V1. Основные его возможности реализуются при помощи дополнитель-
  ной цифровой клавиатуры, имеющейся на терминалах VT100,  VT52,  VT55  и  др.,
  которая используется как управляющая. В обычном режиме эта клавиатура  дубли-
  рует цифровые клавиши основной алфавитно-цифровой клавиатуры. А так как  мно-
  гие фирмы спешно копируют терминал VT100, ставший стандартным в  отрасли,  то
  можно с большой вероятностью встретить этот редактор (возможно и  под  другим
  названием) в системах других фирм.
       Как любое обожествляемое существо, редактор KED един в трех  лицах,  т.е
  фирма DEC поставляет его в трех вариантах:
       - KED - экранный редактор для терминала VT100. Так как на  ПЭВМ  Profes-
  sional ("Электроника-85") эмулируется именно этот терминал,  то  пользователи
  "Электроники-85" в более выгодном положении.
       - KEX - тот же экранный редактор KED, но предназначенный для использова-
  ния с монитором расширенной памяти  RT11XM.  В  этом  случае  рабочие  буферы
  редактора могут быть существенно больше, и тем самым уменьшается число  обра-
  щений к диску.
       - K52 - более ранние терминалы VT52, VT55 обладали меньшими возможностя-
  ми, чем VT100, хотя и совместимы с ним  по  своей  концепции.  Распространены
  терминалы VT52  настолько  широко  (только  в  соцстранах  -  это  MERA-7953,
  Videoton-52130, 15ИЭ-00-013), что фирма DEC не могла это не учитывать.  Таким
  образом, редактор K52 - это чуть сокращенная версия редактора KED для  терми-
  налов VT52, VT55 и им подобных.

       Так как редактор KED более полный, то изучать мы будем именно его, но по
  ходу дела мы укажем те шесть команд, которые отсутствуют в редакторе K52.
       Кроме того, следует отметить еще одно обстоятельство - экранный редактор
  KED много сложнее EDIT (хотя работать с ним много проще) и запомнить все  его
  возможности практически невозможно. К тому же большинство операций, встречаю-
  щихся на практике, можно  выполнить  многими  различными  способами.  Поэтому
  рекомендуется прочитать и попробовать все, что написано здесь про возможности
  редактора, чтобы представлять пределы его действий. Затем ограничиться основ-
  ным набором команд, которого, как правило, более  чем  достаточно,  и  только
  после их полного освоения постепенно включать в свой арсенал новые функции  и
  команды.


                                     - 234 -
           RT-11, A step by step          Keypad Editor   14-Nov-92



       10.1. Загрузка редактора



       - А загружать его нужно так же, как EDIT?- спрашивает Алеша.
       - И да и нет,- отвечаю я,- так как KED внедрялся уже в живую систему, то
  этот процесс происходил постепенно.
       Во-первых, уже по редактору EDIT ты понял,  что  основной  командой  для
  вызова редактора текстов является EDIT, ключи которого мы сейчас напомним.

       EDIT/CREATE        - создать файл вновь
           /OUTPUT:SPFILE - результат вывести в файл SPFILE
           /INSPECT       - только читать файл
           /ALLOCATE:NN   - зарезервировать для выходного
                            файла NN блоков

  При этом, если не указан ни один из ключей, создается новый  файл  с  тем  же
  именем и типом, а старый переименовывается в файл с типом .BAK.  Если  указан
  ключ /OUTPUT со спецификацией файла отличной от исходного, то создается новый
  файл и исходный остается без изменений (в том числе и спецификации).
       Ключ ALLOCATE используется, если известно, сколько  места  может  занять
  файл после редактирования. Если он не указан, то память на носителе распреде-
  ляется стандартным для системы образом. Максимальный размер файла, с  которым
  может работать редактор, равен 16383. блокам. Это примерно в 10  раз  больше,
  чем размер этой книги.
       Во-вторых, также в связи с редактором EDIT  мы  упоминали,  что  реально
  система по этой команде вызывает тот редактор, который установлен по  умолча-
  нию. Поэтому, начиная с версии 5.2, для  мониторов  RT11SJ,  RT11FB,  RT11AI,
  RT11BL по умолчанию используется редактор KED; для монитора RT11XM - редактор
  KEX.
       В-третьих, для ранних версий, начиная с RT-11  V4.0  и  далее,  можно  в
  команде EDIT с помощью ключей /K52, /KED, /KEX, /TECO (еще один редактор фир-
  мы DEC) явно указать системе, какой редактор мы хотим использовать.
       - И кроме того, напоминает Алеша,- у нас всегда  есть  силовой  прием  -
  вызвать редактор, как обычную программу пользователя:

       .RUN DEV:K52

  После чего редактор вызывает интерпретатор командной строки и ждет ввода спе-
  цификации файла. После спецификации файла могут быть указаны ключи:

     /C    - создать файл вновь
     /I    - просмотреть файл (только чтение)
     /A:NN - зарезервировать для файла NN блоков

  В этом случае после закрытия редактируемого файла редактор снова  выходит  на
  звездочку, и можно вводить следующую спецификацию файла.


       Примечание. Все установленные режимы, а также содержимое всех буферов  в
  таком случае сохраняются. Конец примечания.

       Спецификация файла для вывода редактируемого файла на другое  устройство


                                     - 235 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  (например, если на одном устройстве не хватает места) задается в формате  CSI
  обычным образом:

       Специф.Выходн.Файла=Специф.Входн.Файла


       Для ОС RT-11 V5.0 и выше, а также для ФОДОС-2 допустимы следующие коман-
  ды:

       .KED DEV:INPNAM.TYP

  если файл существует

       .KED DEV:NAME.TYP/C/A:NN

  если файл необходимо создать вновь,

       .KED DEV:INPNAM.TYP DEV:OUTNAM.TYP/A:NN

  если выходной файл должен создаваться на другом устройстве или с другим  име-
  нем.

       - Но в данном случае,- продолжаю я,- разговор о файлах, с которыми рабо-
  тает редактор, на этом закончить нельзя. Дело в том, что KED позволяет  поль-
  зователю открыть еще два вспомогательных файла.
       - Это что же,- пугается Алеша,- я, кроме указателя текущей позиции, дол-
  жен держать в голове еще и пути взаимодействия четырех файлов.
       - Ну, во-первых, это не так много,- успокаиваю я  его,-  в  операционной
  системе Unix редактор Vi позволяет открывать до 10  файлов  и  все  на  одном
  экране - вот это уже много. Кроме того, мы сейчас дадим определения всех фай-
  лов и по картинке объясним все пути их взаимодействия, как  ты  правильно  их
  назвал.

  РАБОЧИЙ ФАЙЛ (входной файл)
       - тот, который редактируется. Физически всегда остается  без  изменения.
  Если в командной строке не была  указана  спецификация  выходного  файла,  по
  завершению сеанса редактирования рабочий  файл  переименовывается  в  файл  с
  типом .BAK (запасной), а его имя и тип получает временный файл.

  ВРЕМЕННЫЙ ФАЙЛ (выходной файл)
       - файл, в котором происходит редактирование. В этот  файл  вносятся  все
  изменения. По завершению сеанса редактирования, если результаты  должны  быть
  сохранены, получает имя и тип рабочего файла и в следующем сеансе  редактиро-
  вания становится рабочим.

  ВСПОМОГАТЕЛЬНЫЙ ВХОДНОЙ ФАЙЛ
       - файл, находящийся на устройстве с произвольным доступом, и может  быть
  открыт для чтения. Информация из этого файла может быть переписана во времен-
  ный файл в то место, на которое указывает курсор.  Курсор  устанавливается  в
  конце прочитанного сегмента.

  ВСПОМОГАТЕЛЬНЫЙ ВЫХОДНОЙ ФАЙЛ
       - свободная зона на устройстве с произвольным  доступом,  которая  может
  быть объявлена пользователем как файл для записи, в который записываются выб-
  ранные пользователем элементы редактирования из временного или рабочего  фай-
  лов. Информация в выходной вспомогательный файл записывается всегда в  конец,
  после существующей. По окончании работы с этим файлом его можно закрыть, сох-
  ранив при этом информацию, или освободить, оставив при этом  свободную  зону.
  Для того чтобы открыть этот файл для чтения, его необходимо сначала  закрыть,


                                     - 236 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  сделав постоянным.

       И теперь приведем общую картинку для четырех файлов и разберем все  слу-
  чаи открытия файлов, которые мы упоминали.

  +-----------------+     +------------+     +-----------------+
  ! ВСПОМОГАТЕЛЬНЫЙ !     ! КЛАВИАТУРА !     ! ВСПОМОГАТЕЛЬНЫЙ !
  ! ВЫХОДНОЙ   ФАЙЛ !     +------------+     ! ВХОДНОЙ    ФАЙЛ !
  +-----------------+           ! !          +-----------------+
     /  \   / \   ^             ! !             ^        !  !
    /!  !\ /! !\   \           \! !/           /         !  !
     !  !   \ \     \           \ /           /          !  !
     !  !    \ \     +-----------------------+           !  !
     !  !     \ +----!   Ш  Ш  ШШШШ  ШШШШ    !           !  !
     !  !      +-----!   Ш Ш   Ш      Ш  Ш   !------+    !  !
     !  !    +-----\ !   ШШ    ШШШ    Ш  Ш   !>>>>>>>\   !  !
     !  !   />>>>>>>>!   Ш Ш   Ш      Ш  Ш   !---+!!!!\  !  !
     !  !  /!!!!+--/ !   Ш  Ш  ШШШШ  ШШШШ    !    \!!!!\ !  !
     !  ! /!!!!/     +-----------------------+     \!!!!\!  !
     !  !/!!!!/                 / \                 \!!!!!  !
     !  !!!!!/                 /! !\              \ !!!!!!  !/
     !  !!!!!!                  \ \                \!!!!!!/ /
  +-----------------+            \ \         +-----------------+
  !  РАБОЧИЙ  ФАЙЛ  !             \ +--------! ВРЕМЕННЫЙ  ФАЙЛ !
  !    (входной)    !              +---------!    (выходной)   !
  +-----------------+                        +-----------------+

       - Действительно, этот паучок,- говорит Алеша,- показывает, какими путями
  в какой файл можно попасть. Я уже вижу несколько путей.
       Если мы создаем текст командой EDIT/CREATE, то у нас открыт только  один
  временный файл. Текст в него может попасть, во-первых, из клавиатуры, и,  во-
  вторых, если мы откроем вспомогательный входной файл, то информация  из  него
  может быть также переписана во временный файл. В любом случае если  мы  хотим
  вставлять свой текст или смотреть вспомогательный  входной  файл,  то  должен
  быть открыт временный файл.
       Если же мы вызвали редактор командой EDIT/INSPECT, то  наши  возможности
  ограничиваются только левой частью рисунка. Т.е. у нас открыт только  входной
  файл, из которого мы можем выбирать отдельные куски и, не редактируя, перепи-
  сывать во вспомогательный выходной файл, если это необходимо.
       Вспомогательный выходной файл,- поясняет Алеша,- получается в таком слу-
  чае вроде записной книжки. Рабочий файл не изменяется, а  выписки  собираются
  вместе.
       - Ну, а какие у нас возможности,- спрашиваю я Алешу,-  когда  мы  просто
  редактируем рабочий файл, вызывая редактор командой EDIT.
       - Самый простой  способ  дает  самые  богатые  возможности,-  каламбурит
  Алеша,- с одной стороны, у нас есть главный путь, выделенный толстой полосой,
  передачи информации - из рабочего файла  во  временный  файл  с  изменениями,
  которые вносит редактор по командам с клавиатуры. С другой стороны, мы  можем
  открыть сразу оба вспомогательных файла. Таким образом мы можем  отредактиро-
  вать рабочий файл, записав результаты во временный, и, одновременно,  сформи-
  ровать второй выходной файл,  который  может,  например,  содержать  конспект
  нашего доклада, находящегося во временном файле. И во время всего  редактиро-
  вания мы можем брать информацию из наших старых статей, находящихся во  вспо-
  могательном входном файле.
       - Но ты не сказал еще об одной возможности,- добавляю я,-  когда  у  нас
  нет рабочего файла.
       - Т.е. как это?- не понял Алеша.
       - Например,- поясняю я,- мы открываем  временный  файл,  читаем  в  него
  информацию из вспомогательного входного файла, немного изменяем ее и  выводим


                                     - 237 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  во вспомогательный выходной файл, например на  печатающее  устройство,  после
  чего освобождаем временный файл.
       - Этот пример доказывает,- вступает в дискуссию  Алеша,-  что  временный
  файл действительно временный. Но подобную операцию можно выполнить  и  другим
  способом. Например, входной файл открыть, как рабочий, а после редактирования
  временный файл освободить.
       - Совершенно верно,- отвечаю я,- но, несмотря на очевидную схожесть этих
  двух приемов, они применяются в различных ситуациях.
       Первый случай применяется, когда из большого входного файла  нужно  выб-
  рать небольшую по объему информацию и только после этого  вносить  изменения.
  Как правило, в таких случаях нет места для открытия такого же по размеру, как
  входной, файла.
       Второй случай применяется, когда в  рабочем  файле  хранится  какая-либо
  заготовка, например отписка редакции газеты своему не очень любимому читателю
  и в нее нужно только вставить фамилию и распечатать.
       В любом случае нужно запомнить, что информация добавляется или изменяет-
  ся только в выходных файлах. Входные файлы всегда остаются без изменений.






       10.2. Дополнительная клавиатура



       Так как экранный редактор KED может выполняться на терминалах  различной
  конструкции, то управляющие клавиши на каждом терминале  будут  располагаться
  по-разному. Поэтому далее приведены рисунки с обозначением управляющих (функ-
  циональных)  клавиш  на  дополнительной  клавиатуре  дисплеев  VT52,   VT100,
  VDT52130, 15ИЭ-00-013.

       На каждой клавише в первой или третьей строке приведено ее  функциональ-
  ное название, в соответствии с описанием редактора KED. Во второй  строке  по
  возможности приведены надписи, имеющиеся на клавишах дополнительной клавиату-
  ры указанных дисплеев.


                                     - 238 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


                           Клавиатура терминала VT100

                  +-----------+-----------+-----------+-----------+
                  !   GOLD    !    HELP   ! FIND NEXT !  DELLINE  !
                  !        PF1!        PF2!        PF3!        PF4!
                  !           !           !   FIND    ! UNDELLINE !
                  +-----------+-----------+-----------+-----------+
                  !  PAGE     !  SECTION  !  APPEND   !  DELWORD  !
                  !          7!          8!          9!          ,!
                  !  COMMAND  !   FILL    !  REPLACE  ! UNDELWORD !
                  +-----------+-----------+-----------+-----------+
                  !  ADVANCE  !  BACKUP   !    CUT    !  DELCHAR  !
                  !          4!          5!          6!          -!
                  !   BOTTOM  !   TOP     !   PASTE   ! UNDELCHAR !
                  +-----------+-----------+-----------+-----------+
                  !   WORD    !   EOL     !   CHAR    !   ENTER   !
                  !          1!          2!          3!           !
                  ! CHNGCASE  !  DELEOL   ! SPECINS   !           !
                  +-----------+-----------+-----------+           !
                  !       BLINE           !   SELECT  !           !
                  !                      0!          .!           !
                  !       OPENLINE        !   RESET   !   SUBS    !
                  +-----------------------+-----------+-----------+


                        Клавиатура ПЭВМ "Электроника-85"

                  +-----------+-----------+-----------+-----------+
                  !   GOLD    !    HELP   ! FIND NEXT !  DELLINE  !
                  !        PF1!        PF2!        PF3!        PF4!
                  !           !           !   FIND    ! UNDELLINE !
                  +-----------+-----------+-----------+-----------+
                  !  PAGE     !  SECTION  !  APPEND   !  DELWORD  !
                  !          7!          8!          9!          ,!
                  !  COMMAND  !   FILL    !  REPLACE  ! UNDELWORD !
                  +-----------+-----------+-----------+-----------+
                  !  ADVANCE  !  BACKUP   !    CUT    !  DELCHAR  !
                  !          4!          5!          6!          -!
                  !   BOTTOM  !   TOP     !   PASTE   ! UNDELCHAR !
                  +-----------+-----------+-----------+-----------+
                  !   WORD    !   EOL     !   CHAR    !  SELECT   !
                  !          1!          2!          3!          .!
                  ! CHNGCASE  !  DELEOL   ! SPECINS   !  RESET    !
                  +-----------+-----------+-----------+-----------+
                  !       BLINE           !         ENTER         !
                  !                      0!                       !
                  !       OPENLINE        !         SUBS          !
                  +-----------------------+-----------+-----------+




                                     - 239 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


                      Клавиатура терминала VT52, MERA-7953

                  +-----------+-----------+-----------+-----------+
                  !   GOLD    !   HELP    !  DELLINE  !     ^     !
                  !         BL!         RD!         GY!     !     !
                  !           !           !UNDELLINE  !  REPLACE  !
                  +-----------+-----------+-----------+-----------+
                  !   PAGE    ! FIND NEXT !  DELWORD  !     !     !
                  !          7!          8!          9!     V     !
                  !  COMMAND  !   FIND    !UNDELWORD  !  SECTION  !
                  +-----------+-----------+-----------+-----------+
                  !  ADVANCE  !   BACKUP  !  DELCHAR  !  ---->    !
                  !          4!          5!          6!           !
                  !  BOTTOM   !    TOP    !UNDELCHAR  !  SPECINS  !
                  +-----------+-----------+-----------+-----------+
                  !   WORD    !   EOL     !    CUT    !   <----   !
                  !          1!          2!          3!           !
                  ! CHNGCASE  !  DELEOL   !   PASTE   !   APPEND  !
                  +-----------+-----------+-----------+-----------+
                  !         BLINE         !   SELECT  !   ENTER   !
                  !                      0!          .!           !
                  !       OPENLINE        !   RESET   !   SUBS    !
                  +-----------------------+-----------+-----------+


                  Клавиатура терминала 15ИЭ-00-013, 15ИЭ-00-17

  +--------+--------+---------+        +--------+--------+---------+
  ! PAGE   !FINDNEXT! DELWORD !        !////////!   ^    !  ENTER  !
  !       7!       8!        9!        !////////!   !    !         !
  !COMMAND !  FIND  !UNDELWORD!        !////////!REPLACE !  SUBS   !
  +--------+--------+---------+        +--------+--------+---------+
  !ADVANCE ! BACKUP ! DELCHAR !        !  <---  !////////!  --->   !
  !       4!       5!        6!        !        !////////!         !
  ! BOTTOM !   TOP  !UNDELCHAR!        ! APPEND !////////! SPECINS !
  +--------+--------+---------+        +--------+--------+---------+
  ! WORD   !  EOL   !   CUT   !        !////////!   !    !/////////!
  !       1!       2!        3!        !////////!   V    !/////////!
  !CHNGCASE! DELEOL !  PASTE  !        !////////!SECTION !/////////!
  +--------+--------+---------+        +--------+--------+---------+
  !     BLINE       !  SELECT !        !  GOLD  !  HELP  ! DELLINE !
  !                0!        ,!        !   =    !   !    !         !
  !   OPENLINE      !  RESET  !        !   !    !   *    !UNDELLINE!
  +-----------------+---------+        +--------+--------+---------+



                                     - 240 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


                         Клавиатура терминала VDT-52130

  +---------+---------+---------+    +---------+---------+---------+
  !  GOLD   !  HELP   ! DELLINE !    !//CLEAR//!//CLEAR//!//CLEAR//!
  !       F1!       F2!       F3!    !////ALL//!///PAGE//!///LINE//!
  !         !         !UNDELLINE!    !/////////!/////////!/////////!
  +---------+---------+---------+    +---------+---------+---------+

  +---------+---------+---------+              +---------+
  !  PAGE   !FIND NEXT! DELWORD !              !    ^    !
  !        7!        8!        9!              !    !    !
  ! COMMAND !  FIND   !UNDELWORD!              ! REPLACE !
  +---------+---------+---------+    +---------+---------+---------+
  ! ADVANCE ! BACKUP  ! DELCHAR !    !  <----  !/////////!  ---->  !
  !        4!        5!        6!    !         !//HOME///!         !
  !  BOTTOM !   TOP   !UNDELCHAR!    !  APPEND !/////////! SPECINS !
  +---------+---------+---------+    +---------+---------+---------+
  !  WORD   !  EOL    !    CUT  !              !    !    !
  !        1!        2!        3!              !    V    !
  !CHNGCASE ! DELEOL  !  PASTE  !              ! SECTION !
  +---------+---------+---------+              +---------+
  !  BLINE  ! SELECT  !  ENTER  !
  !        0!        ,!         !
  !OPENLINE !  RESET  !  SUBS   !
  +---------+---------+---------+

       - Это красивые картинки,- заторопился Алеша,- я их перерисую  к  себе  в
  тетрадь. На сколько я  понимаю,  заштрихованные  на  этих  картинках  клавиши
  редактор в своей работе не использует. А вот две клавиши выделяются  из  всех
  тем, что на них только по одной надписи: это  <GOLD>  -  золото  и  <HELP>  -
  помощь. К чему бы это?
       - А к тому, чтобы ты не торопился,- отвечаю я Алеше,- несмотря на то что
  этот редактор много сложнее и мощнее, чем EDIT, запоминать и тем более  запи-
  сывать в конспект практически ничего не надо.
       Кроме той картинки о файлах, которую мы с  тобой  разобрали,  и  которую
  нужно понять, необходимо запомнить только назначение этих двух клавиш. И нач-
  нем по порядку:

  <GOLD>
       - основная функция этой клавиши увеличить - объем дополнительной клавиа-
  туры в два раза.  Функции,  написанные  на  остальных  управляющих  клавишах,
  выполняются следующим образом: если перед нажатием клавиши была нажата клави-
  ша <GOLD>, то выполняется функция, написанная на нижней строчке, в  противном
  случае - функция, написанная на верхней строчке.
       Кроме того, если после нажатия на клавишу <GOLD>, нажата цифровая клави-
  ша на основной алфавитно-цифровой клавиатуре, то появляется возможность пере-
  дать редактору десятичное число от 1 до 65535, которое будет  использовано  в
  последующей функции;

  <HELP>
       - клавиша, позволяющая не иметь пользователю других справочников. При ее
  нажатии пользователь в любой момент может обратиться к  краткому  справочнику
  по функциям редактора, не прерывая его работы. Кроме того, если  редактор  не
  смог выполнить какую-либо фунцию, то подается звуковой сигнал, и  по  нажатию
  клавиши <HELP> в нижней строке экрана выводится сообщение, поясняющее причину
  ошибки.
       - Вот здорово,- загорелся Алеша,- а можно посмотреть?
       - Конечно,- отвечаю я,- только  для  этого  нужно  открыть  какой-нибудь
  файл, например, твоих премудрых.


                                     - 241 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


       Не долго думая, Алеша набирает команду.

  +---------------
  !  .KED DX1:VERSE.TXT<ВК>
  !

       Экран очистился и редактор показал наше стихотворение.
       - А что это за прямоугольничек внизу?- спрашивает Алеша.
       Действительно, редактор KED в отличие от других полузаштрихованным  пря-
  моугольничком (а K52 буквой А) обозначает конец редактируемого файла. Если он
  вас раздражает, то можно ввести несколько пустых строк, чтобы отодвинуть  его
  от редактируемого текста.
       - А теперь,- предлагаю я Алеше,- можно поэкспериментировать  с  клавишей
  <HELP>.
       - Это мы быстро,- отреагировал Алеша,- и сразу буду объяснять.
       При первом нажатии на клавишу <HELP> на экран выводится картинка  распо-
  ложения функциональных клавиш для терминала VT100  (VT52,  если  используется
  редактор K52).

                  KED V01.20
           Lower Function is GOLD
  +--------+-------+---------+---------+
  !  GOLD  ! HELP  !FIND NEXT! DELLINE ! DELETE   Erase char left
  !     PF1!    PF2!      PF3!      PF4! LINEFEED Erase word left
  !        !       !  FIND   !UNDELINE ! CTRL/U   Erase line left
  +--------+-------+---------+---------+ CTRL/C   Cancel
  ! PAGE   !SECTION! APPEND  ! DELWORD ! CTRL/Z   Cancel
  !       7!      8!        9!        ,! CTRL/W   Restore screen
  ! COMMAND!  FILL ! REPLACE !UNDELWORD!              and keypad
  +--------+-------+---------+---------+ CTRL/R   Restore screen
  ! ADVANCE! BACKUP!   CUT   ! DELCHAR !              and keypad
  !       4!      5!        6!        -!
  ! BOTTOM !  TOP  !  PASTE  !UNDELCHAR! <GOLD>nnn     Repeat
  +--------+-------+---------+---------+ <GOLD>DEL     UNDELCHAR
  !  WORD  !  EOL  !  CHAR   !  ENTER  ! <GOLD>LF      UNDELWORD
  !       1!      2!        3!         ! <GOLD>CTRL/U  UNDELLINE
  !CHNGCASE! DELEOL!SPECINS  !         !
  +--------+-------+---------+         ! To return to display,
  !    BLINE       !  SELECT !         ! press ENTER or use any
  !               0!        .!         ! function.
  !    OPENLINE    !  RESET  !  SUBS   !
  +----------------+---------+---------+


  Но кроме рисунка клавиатуры,- комментирует Алеша,- здесь  рассказывается  про
  некоторые другие функции. Я про все говорить не буду, но то, что теперь  сим-
  волы CTRL/C, CTRL/Z не действуют, как обычно, нужно упомянуть.
       - Это не совсем так,-  подсказываю  я  Алеше,-  действительно,  прервать
  работу редактора и выйти в монитор этими символами нельзя. Но  если  редактор
  выполняет какую-либо продолжительную по времени функцию, то вводом этих  сим-
  волов можно его остановить и продолжить редактирование.
       - Поехали дальше,- продолжает Алеша,- появился новый управляющий  символ
  CTRL/W, который восстанавливает содержимое экрана.
       - Так как терминал, как правило, отделен от процессора,- поясняю я,-  то
  возможны нарушения в его работе, которые не сказываются на работе процессора.
  Например, кто-то нечаянно выдернул сетевую  вилку  терминала  из  розетки.  В
  таком случае нарушается соответствие между информацией в памяти процессора  и
  ее отображением на экране. И вводом этого управляющего символа можно  перери-
  совать экран и восстановить состояние клавиатуры, если  она  программируемая.


                                     - 242 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  Можно еще добавить, что в последних версиях такую же функцию выполняет символ
  CTRL/R.
       - Здесь же нам сообщается,- говорит Алеша,- что возврат в режим  дисплея
  происходит по нажатию клавиши <ENTER> или по использованию любой другой функ-
  ции.

       При втором нажатии на клавишу <HELP> на экран  выводится  полный  список
  команд редактора в командном режиме. Если при этом перейти в командный режим,
  то картинка на экране сохраняется за исключением верхних двух строк, что поз-
  воляет не запоминать точное написание команды, а вызывать его  на  экран  при
  необходимости.

                Summary of KED Commands

                              SET [ENTITY] PAGE "string"
   EXIT                       SET [ENTITY] PAGE integer [LINES]
   QUIT                       SET [ENTITY] SECTION "string"
                              SET [ENTITY] SECTION integer [LINES]
   [OPEN] INPUT filespec
   [OPEN] OUTPUT filespec                  SET [SEARCH] GENERAL
   CLOSE                                   SET [SEARCH] EXACT
   PURGE                                   SET [SEARCH] BEGIN
   WRITE SELECT                            SET [SEARCH] END
   WRITE option                            SET [SEARCH] BOUNDED
   INCLUDE option                          SET [SEARCH] UNBOUNDED
   SKIP option
   "Option" can be: integer PAGES          SET [SCREEN] 80
                    integer [LINES]        SET [SCREEN] 132
                    REST                   SET [SCREEN] DARK
   CLEAR PASTE                             SET [SCREEN] LIGHT

   LEARN                                   SET QUIET
   LOCAL [starting_value [increment]]      SET NOQUIET

   SET TABS [indent]                      SET WRAP [column_number]
   SET NOTABS                             SET NOWRAP
   [TABS] ADJUST [+-]level                FILL

       - Войти в командный режим,- говорит Алеша,- можно, последовательно нажав
  клавиши <GOLD>,<COMMAND>. Это мы видели по предыдущей картинке.
       - При этом название команды,- добавляю я,- нужно  набрать  на  основной,
  алфавитно-цифровой клавиатуре и завершить ее ввод нажатием клавиши <ENTER>  -
  ввод.
       - И наконец,- Алеша опять нажимает клавишу <HELP>,- при третьем  нажатии
  на клавишу <HELP> на экран  выводится  список  специальных  функций,  которые
  выполняются с помощью клавиши <GOLD>.


                                     - 243 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


                        Gold Keyboard Functions


       <GOLD><S>     Terminate a macro without executing it.
       <GOLD><X>     Execute the currently defined macro.


       <GOLD><A>     Align structured tabs to the cursor.
       <GOLD><E>     Extend the level counter for structured tabs.
       <GOLD><D>     Decrease the level counter for structured tabs.

       <GOLD><L>     Lower case selected area

       <GOLD><U>     Upper case selected area

  Неужели там еще что-то есть,- говорит Алеша, еще раз нажимая на  клавишу,  но
  увы. При дальнейшем нажатии на клавишу <HELP> процесс повторяется. А как вый-
  ти из этого режима я уже говорил. Но я нажму на нее еще раз и попробую выпол-
  нить какую-нибудь команду.

       - Итак, мы снова во второй картинке режима HELP. Какие первые команды мы
  должны узнать?
       - Как правильно завершить редактирование,- говорит Алеша.- И эти команды
  стоят первыми в первом столбике. Их две. "EXIT" - выход - мы  ее  уже  знаем.
  Она завершает редактирование нормальным образом  с  переименованием  рабочего
  файла в тип .BAK. А вторая "QUIT" - оставить - по смыслу прекращает  редакти-
  рование, не оставляя никаких следов.
       - Прекрасно,- говорю я Алеше,- вот и заверши  редактирование  нормальным
  образом, чтобы могли поговорить.
       И Алеша нажал клавиши:

   <GOLD><COMMAND> Command: EXIT<ENTER>
                  ----------

       На экране в левом углу появилась надпись Command:, в  ответ  на  которую
  Алеша ввел команду EXIT и затем нажал клавишу <ENTER>. И система спокойненько
  поставила точку.






       10.3. Элементы редактирования



       А перерыв нам нужен для обсуждения некоторых принципиальных вопросов.
       KED - большая система, которая с полным правом может называться  ортого-
  нальной системой. Связь  с  Евклидовой  геометрией  здесь  чисто  визуальная.
  Представим себе, что мы имеем некоторый набор объектов - СИМВОЛ, СЛОВО, СТРО-
  КА, СТРАНИЦА, СЕКЦИЯ, СЕГМЕНТ. А также имеем  некоторый  набор  операций  над
  этими объектами - ДВИЖЕНИЕ ВПЕРЕД,  ДВИЖЕНИЕ  НАЗАД,  УДАЛИТЬ,  ВОССТАНОВИТЬ,
  НАЙТИ, ВСТАВИТЬ, ЗАПИСАТЬ, ПРОПУСТИТЬ. Тогда  можно  составить  прямоугольную
  (ортогональную) таблицу соответствия объектов и операций над ними.


                                     - 244 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


                          CHAR WORD STRING PAGE SECTION SEGMENT
                         +----+----+------+----+-------+-------+
      ADVANCE            !  * ! *  ! *  * ! *  !   *   !///////!
      -------------------+----+----+------+----+-------+-------+
      BACKUP             !  * ! *  ! *  * ! *  !   *   !///////!
      -------------------+----+----+------+----+-------+-------+
      DELETE             ! ** ! ** ! * * *!    !       !   *   !
      -------------------+----+----+------+----+-------+-------+
      UNDELETE           ! ** ! ** ! * * *!    !       !   *   !
      -------------------+----+----+------+----+-------+-------+
      FIND               !(*) ! (*)!  (*) !////!///////!   *   !
      -------------------+----+----+------+----+-------+-------+
      INCLUDE            !    !    !   *  ! *  !       !///////!
      -------------------+----+----+------+----+-------+-------+
      WRITE              !    !    !   *  ! *  !       !   *   !
      -------------------+----+----+------+----+-------+-------+
      SKIP               !    !    !   *  ! *  !       !///////!
      -------------------+----+----+------+----+-------+-------+

       - Насколько я понимаю,- рассуждает Алеша,- эта таблица представляет сис-
  тему функций редактора KED. И клетки, отмеченные в ней  звездочками,  показы-
  вают, что над данным объектом указанная операция существует, и  даже  в  нес-
  кольких видах. Но она не очень-то ортогональная.
       - Это естественно,- отвечаю я,- потому что не все операции можно  выпол-
  нить над тем или иным объектом. Некоторые  операции  невозможно  выполнить  в
  силу природы самого объекта, его начального  определения.  Такие  операции  в
  таблице показаны заштрихованными клетками.
       Кроме того, могут быть операции, которые можно каким-либо образом выпол-
  нить над объектом другого типа и получить при этом тот же результат. Это поз-
  воляет не перегружать пользователя лишними подробностями и сэкономить на раз-
  работке и объеме программы. Такие операции на таблице показаны пустыми  клет-
  ками.
       Таким образом, создать полностью ортогональную систему, т.е.  у  которой
  заполнены все клетки таблицы, очень трудно, но эти затраты себя  оправдывают.
  Поэтому разработчики стремятся к созданию таких систем. Единообразие операций
  для всех объектов в ортогональных системах облегчает их запоминание и  обуче-
  ние работе с такими системами. По крайней  мере  из  известных  редакторов  у
  редактора KED наиболее заполненная таблица.
       - Тогда нужно сначала сказать про объекты,- говорит Алеша,- и затем мож-
  но описывать операции над ними.
       - Именно поэтому,- продолжаю я,- дальше мы приведем  точные  определения
  элементов редактирования, с которыми работает редактор.


       ТЕКСТ - это последовательность байтов, имеющих  для  пользователя  смысл
  символов в коде ASCII. Так как  среди  символов  имеются  символы  управления
  печатающим  устройством,  такие,  как   "ПЕРЕВОД   СТРОКИ"<ПС>   и   "ВОЗВРАТ
  КАРЕТКИ"<ВК>, то внешне текст имеет прямоугольную форму. Отсюда:  если  нужно
  раздвинуть слова или буквы, то между ними необходимо вставить  символы  "ПРО-
  БЕЛ"; если нужно раздвинуть сроки, то между ними необходимо вставить  символы
  <ВК>. Таким же образом правая граница текста отодвигается, если перед  симво-
  лами <ВК><ПС> вставляются необходимые символы.


       СИМВОЛ - это байт перед курсором или после него. Следует учитывать,  что
  символы <ВК><ПС> считаются одним символом, но занимают в буфере два байта.


                                     - 245 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  Пример:    5А
              ^   - здесь: 5 - символ перед курсором
                           А - символ после курсора

       Опять необходимо напомнить, что, несмотря на то  что  курсор  на  экране
  изображается под символом или прямоугольником, охватывающим символ,  во  всех
  определениях считается, что он находится МЕЖДУ символами и перед  тем  симво-
  лом, под которым он изображен.


       СЛОВО - это цепочка байтов от курсора до  символов  <Пробел>,  <ВК><ПС>,
  <ГТ> или <ПФ> в ту или другую сторону от курсора.

  Пример:   Петя Катя<ВК><ПС>
                   ^          - здесь: Ка - слово до курсора
                                       тя - слово после курсора


       СТРОКА - это цепочка байтов от курсора до символов <ВК><ПС> или  <ПФ>  в
  ту или другую сторону от курсора.


       СТРАНИЦА - это цепочка байтов  от  курсора  до  символа  <ПФ>.  Возможно
  переопределение страницы как цепочки байтов, содержащей  заданное  количество
  строк или имеющей в качестве ограничивающего символа заданную строку.


       СЕКЦИЯ - это то же, что и страница, но  определенная  по  умолчанию  как
  цепочка байтов, содержащая 16 строк.  Также  может  быть  переопределена  как
  имеющая другой размер или имеющая в качестве ограничителя заданную строку,  в
  том числе и <ПФ>. Секцией удобно просматривать текст в любом направлении, так
  как ее размер по умолчанию равен 2/3 экрана.


       СЕГМЕНТ РЕДАКТИРОВАНИЯ - это часть файла, в пределах  которой  осуществ-
  ляется редактирование. Предназначен для ограничения  области  действия  таких
  команд, как контекстный поиск, установка уровня табуляции  и  многих  других.
  Сегмент редактирования определяется следующим образом:

     - установить курсор в начало задаваемого сегмента редактирования;

     - нажать клавишу <SELECT>;

     - установить курсор в конец сегмента редактирования;

     - выполнить функцию редактирования.






       10.4. Передвижение по файлу



       - А теперь мы займемся операциями  над  объектами,-  спрашивает  Алеша,-
  которые только что определили?
       - Да,- отвечаю я,- и в первую очередь передвижением по файлу.


                                     - 246 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


       В отличие от редактора EDIT здесь пользователь уже не  должен  думать  о
  чтении и записи какого-то текстового буфера. Передвижение может осуществлять-
  ся по всему файлу. Это может быть достаточно продолжительная  операция,  если
  файл очень большой, например 10-15 тысяч блоков. Оптимальный размер файла для
  редактирования 100-200 блоков, при котором длительность операции передвижения
  не мешает работе.
       Во-вторых, нужно отметить, что в KED существуют два средства для  перед-
  вижения. Первое - самые обычные клавиши  со  стрелками,  предназначенные  для
  управления курсором. Они имеются практически на всех  терминалах  и  работают
  автономно, перемещая курсор на одну позицию или строку влево,  вправо,  вверх
  или вниз. Эти клавиши не влияют на другие установленные режимы. Следует также
  помнить, что при перемещении вверх или вниз текущая позиция  курсора  запоми-
  нается автоматически, несмотря на то что промежуточные строки могут оказаться
  короче той, с которой началось перемещение.

       Второе средство более мощное. KED позволяет перемещаться по файлу такими
  шагами, как элемент редактирования.
       - Если мы определили шаг перемещения,- говорит Алеша,- то нужно  указать
  редактору и направление перемещения. Наверное, для  этого  и  служат  клавиши
  <ADVANCE> - продвинуться вперед - и <BACKUP> - вернуться наверх.
       - Да, только нужно отметить,- продолжаю я,- что при нажатии на эти  кла-
  виши ничего не происходит. KED просто запоминает, в какую сторону нужно будет
  двигаться в дальнейшем. Причем это направление влияет не только на  перемеще-
  ние курсора, но и на направление контекстного поиска.
       - Но этими же клавишами можно и переместиться,- говорит Алеша,- если  мы
  их будем нажимать после клавиши <GOLD>, то можно переместиться сразу в  конец
  файла после нажатия <GOLD><BOTTOM> - в основание - или сразу в  начало  файла
  после нажатия <GOLD><TOP> - в верхушку.
       - Кроме того,- добавляю я,- так как в редакторе KED (но не в K52) клави-
  ши со стрелками свободны от других функций, имеется возможность более естест-
  венного перемещения в начало или конец  файла.  Если  после  нажатия  клавиши
  <GOLD> нажать клавишу со стрелкой вниз, то курсор переместится сразу в  конец
  файла, а при нажатии клавиши со стрелкой вверх, курсор переместится  сразу  в
  начало файла. Таким же образом используются  клавиши  со  стрелками  влево  и
  вправо. Если они нажимаются после нажатия клавиши <GOLD>, то перемещают  кур-
  сор сразу в конец или начало строки соответственно.
       - И после указания направления,- говорю я,- можно двигаться любыми  шаж-
  ками - большими и маленькими. Их названия написаны на клавишах в первой  кар-
  тинке HELP.

       - <CHAR> - символ,- читает Алеша,- т.е. движение по  символам,  если  мы
  представим весь текст как длинную цепочку символов.
       - Замечу только, что в редакторе K52 этого варианта движения нет. Но это
  несущественно, так как можно двигаться по символам, используя обычные  стрел-
  ки, что дает такой же результат.

       - <WORD> - слово,- продолжает Алеша,- передвигает курсор по словам,  так
  как мы их определили.
       - С небольшим уточнением,- поправляю я,- эта функция рассматривает  нес-
  колько подряд идущих пробелов как один. Но символы  горизонтальной  табуляции
  "ГТ" считаются словами, поэтому с ее помощью можно двигаться  по  табуляциям,
  как по словам.
       - А вот со строкой уже сложнее,- задумался Алеша,- тут много LINE-ов, но
  какие что означают сразу не поймешь.
       - А ты вдумайся, что такое строка,- помогаю я ему,- это объект протяжен-
  ный, и двигаться по серединам строк мы не можем, потому что такое понятие  не
  определено. А вот начало и конец строки всегда определены.
       - Тогда стали понятны названия некоторых клавиш,- продолжает Алеша.


                                     - 247 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


       <BLINE> - от слов Begin LINE, т.е. движение  осуществляется  по  началам
  строк в ту сторону, куда мы указывали клавишами <ADVANCE> или <BACKUP>.

       <EOL> - от слов End Of Line,  т.е.  движение  осуществляется  по  концам
  строк.

       - Ты все правильно сказал,- говорю я Алеше,- но  здесь  нужно  понимать,
  что обычно курсор стоит на середине строки, и после первого  нажатия  на  эти
  клавиши курсор может встать в начало или конец текущей строки. Это зависит от
  установленного направления движения.
       - А названия следующих  элементов  редактирования,-  продолжает  Алеша,-
  написаны на клавишах:

       <PAGE> - нажатием на эту клавишу можно  передвигаться  по  страницам.  А
  нажатием на клавишу <SECTION> или <GOLD><SECTION> (для редактора  K52)  можно
  передвигаться по секциям.
       - Нужно помнить,- добавляю я,- начальные  определения  страницы  (символ
  "ПФ") и секции (16 строк) и то, что по существу это два одинаковых  альтерна-
  тивных объекта, но страница может участвовать в операциях между файлами.
       Таким образом, если у нас в тексте нет ни одного символа "ПФ", то редак-
  тор (и печатающее устройство также) воспринимает его как одну большую страни-
  цу. Полная длина стандартной страницы, как правило, равна 72  строкам.  Коли-
  чество реально печатаемых строк обычно лежит в пределах 62-64. Это  позволяет
  размечать текст на страницы вставкой символа "ПФ", шагая  по  четыре  секции.
  Можно также установить размер страницы и размечать, используя клавишу <PAGE>.
  Разметка таким образом текста объемом 100 страниц занимает несколько минут.

       - Значит,- замечает Алеша,- при передвижении по файлу редактор постоянно
  осуществляет поиск либо разделителя слов, либо признака строки, либо  некото-
  рого контекста, определяющего страницу или секцию.
       - Это ты заметил правильно,- отвечаю я,- только к чему такое уточнение?
       - А к тому,- развивает свою мысль Алеша,- что в данном случае  контекст-
  ный поиск можно также рассматривать как перемещение  по  файлу,  используя  в
  качестве шага некоторый образ для поиска.
       - Тогда рассказывай, какими командами или клавишами это можно  сделать,-
  передаю я бразды правления Алеше. Для читателей напомню, что мы сейчас  смот-
  рим пока только на расположение клавиш (первая картинка HELP).
       - Как и в редакторе EDIT,- начал Алеша,- мы должны  сообщить  редактору,
  что нужно искать. Клавиша <FIND> - искать у нас на виду. Поэтому нажмем:

   <GOLD><FIND>Model:
               -------

  и увидим в левом верхнем углу экрана приглашение "Model:", в ответ на которое
  нужно, наверное, ввести модель поиска, после чего нажать клавишу, указывающую
  направление поиска.
       - При этом модель поиска будет запоминаться автоматически,- дополняю я,-
  она будет действовать на все время сеанса редактирования  или  до  следующего
  определения модели поиска. Кроме того, можно отметить,  что  нажатие  клавиши
  <ENTER> после ввода модели поиска приводит просто к ее запоминанию.
       - И после этого можно шагать по файлу,- продолжает  Алеша,-  нажимая  на
  клавишу <FINDNEXT> - искать дальше - в том направлении, которое было  указано
  раньше. При желании можно поменять направление движения и шагать снова.
       - Все это прекрасно,- замечаю я,- но в KED существенно больше возможнос-
  тей поиска. То, что ты в редакторе EDIT делал  особым  приемом  -  установить
  указатель в начало модели поиска, - здесь делается по умолчанию.
       - А если мне нужно найти точку  в  начале  строки?-  спрашивает  Алеша.-
  Получается  такая  странная   (но   допустимая)   комбинация   символов   как
  "ВК","ПС","ТОЧКА". Редактор, найдя такую модель,  установит  курсор  в  конце


                                     - 248 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  предыдущей строки, а не на точке, которая мне нужна.
       - Тогда нужно сказать редактору о твоих желаниях,- отвечаю я,- и устано-
  вить режим END - в конец модели поиска.
       - Т.е. у меня есть два альтернативных режима поиска,- повеселел  Алеша,-
  при обнаружении  модели  поиска  курсор  устанавливается  либо  в  ее  начало
  (BEGIN), либо в ее конец (END).
       - Я бы сказал, что ты имеешь пару альтернативных режимов поиска,-  уточ-
  няю я,- подчеркнув, таким образом, что эти два режима  связаны  между  собой.
  Кроме того, есть еще две таких же альтернативных пары режимов.
       - Это, наверно, связано,- говорит Алеша,- с тем генералом,  которого  мы
  видели во второй картинке HELP.
       - Не генерал, а общий,-  поправляю  его  я,-  это  слово  происходит  от
  латинского generalis - общий, главный. Т.е. в данном случае это общий  поиск.
  Когда ты ищешь в обычном тексте слово "премудрые", для тебя не  имеет  значе-
  ния, на верхнем  регистре  (прописными  символами)  или  на  нижнем  регистре
  (строчными буквами) записано слово.
       - Действительно,- подтверждает Алеша,- премудрые и в том и другом случае
  останутся премудрыми.
       - Вот такой поиск,- продолжаю  я,-  когда  символы  верхнего  и  нижнего
  регистров не различаются, называется общим.
       - Тогда поиск,- догадался Алеша,- при котором символы верхнего и нижнего
  региста различаются, можно назвать точным.
       - Совершенно верно,- отвечаю я,- у тебя появилась еще одна пара  альтер-
  нативных режимов поиска - GENERAL (общий)/ EXACT (точный).
       - Тогда во второй картинке HELP,- говорит Алеша,- я вижу еще одну пару и
  попробую объяснить ее сам. В той же группе режимов  BEGIN/END,  GENERAL/EXACT
  есть пара BOUNDED/UNBOUNDED. Bounded в переводе с английского означает  "гра-
  ница". Граница файла здесь смысла не имеет, так как за пределами файла мы все
  равно редактировать не умеем. А вот сегмент редактирования, который мы  опре-
  деляли раньше, имеет границы. Таким образом, при установленном режиме BOUNDED
  поиск ведется в границах сегмента редактирования. А режим UNBOUNDED позволяет
  вести поиск по всему файлу, игнорируя границы сегмента редактирования.
       - В завершении этого разговора,- заканчиваю я,-  нужно  только  сказать,
  что по умолчанию в начале сеанса  редактирования  установлены  режимы  BEGIN,
  GENERAL, UNBOUNDED.






       10.5. Удаление     и     восстановление      элементов
             редактирования



       - Вот теперь можно обводить твое стихотворение в рамочку из  звездочек,-
  предлагаю я Алеше,- только ты мне объясни, что теперь для нас означает  поня-
  тие РЕДАКТИРОВАНИЕ.
       - Это действительно интересно,- говорит Алеша,- если при работе с редак-
  тором EDIT нашей основной задачей было чтение очередной  порции  из  входного
  файла, удаление или вставка символа и запись этой порции в выходной файл,  то
  теперь пользователь избавлен от необходимости следить за входным  и  выходным
  файлами. Это делает сам редактор, а пользователь "гуляет" по файлу,  как  ему
  хочется. Правда, вставлять он может также только по одному  символу,  но  для
  удаления появился целый набор объектов, которые мы назвали элементами  редак-
  тирования.
       - И не только удаления,- добавляю я,- но и восстановления.  В  редакторе
  KED принят принцип, по которому все что удаляется, может быть  восстановлено.


                                     - 249 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  Т.е. если удалил слово, то его можно восстановить (т.е.  вставить  обратно  в
  файл) в любом месте файла и любое число раз.
       - Но восстанавливается, наверное, последнее удаленное  слово,-  замечает
  Алеша,- ведь буфер не может быть бесконечным.
       - Не только из-за буфера,- отвечаю я,- у  нас  просто  нет  средств  для
  нумерации удаленных элементов редактирования.
       Кстати о буферах. Так как они фиксированные, то сразу приведем их разме-
  ры.

       При удалении элемент редактирования запоминается в соответствующем буфе-
  ре, размеры которых следующие:
       - Буфер символа - 2 байта, так как символы <ВК><ПС>  при  редактировании
  считаются за один символ, а в действительности занимают два байта.
       - Буфер слова - 80 байт, так как длина строки, введенной с терминала без
  символов "Пробел" или "ВК""ПС", не может быть более 80 символов. При  наличии
  символа "Пробел" редактор может автоматически перенести  слово  на  следующую
  строку.
       - Буфер строки - 132 байта, т.е. максимальная длина строки на  экране  в
  соответствующем режиме.
       - Буфер сегмента редактирования - не менее 512 байт, т.е.  один  блок  в
  формате RT-11. Верхний размер определяется доступной памятью в момент  редак-
  тирования.

       А теперь начнем удалять.
       - Ну, символ удаляется, как обычно,- говорит Алеша,- клавишей  <DEL>  на
  основной клавиатуре.
       - Допустим,- отвечаю я,- но это символ перед  курсором.  А  как  удалить
  символ после курсора?
       - А для этого есть клавиша <DELCHAR>,- говорит Алеша,- на дополнительной
  клавиатуре. И по этому же рисунку мы видим, как восстанавливать  символ.  Для
  этого нужно последовательно нажать клавиши <GOLD><UNDELCHAR>.
       - И при этом символ будет вставлен так же, как он  удалялся,-  продолжаю
  я,- т.е. до или после курсора. Однако, начиная с версии KED  V1.20  произошло
  уточнение - все восстановления элементов редактирования могут быть  выполнены
  той же клавишей, которой  выполнялось  удаление,  но  после  нажатия  клавиши
  <GOLD>, что улучшило ортогональность системы команд редактора. Таким образом,
  восстановление символа нажатием клавиш <GOLD>,<DEL> теперь также справедливо.
       - А для удаления слова,- говорит Алеша,- я уже нашел клавишу  <DELWORD>.
  И теперь я удалю слово "ПЛАВНО" и напишу "БУРНО".

  ------+---------------
        !        ВОДЫ  ГЛУБОКИЕ
        !
        !        ПЛАТЕКУТ
        !           ^
        !        ЛЮДИ ПРЕМУДРЫЕ
        !
        !        ТИХО     ЖИВУТ
        !
        !                А.ПУШКИН

  Да, но удалилась только половина слова от курсора вправо вмевсте с  последую-
  щими пробелами.
       - Вот где пригодилось определение элементов  редактирования,-  говорю  я
  Алеше,- т.е. мы можем удалить как часть слова справа, так и часть слова  сле-
  ва. И здесь клавиша <LINEFEED> ==> <ПС> используется  не  по  своему  прямому
  назначению. С ее помощью теперь можно удалять часть слова до курсора.
       - А восстанавливать удаленное слово,-  говорит  Алеша,-  можно,  нажимая
  последовательно клавиши <GOLD>,<UNDELWORD> или, если удаляли  клавишей  <ПС>,


                                     - 250 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  последовательно нажимая клавиши <GOLD>,<ПС>. Поэтому восстановим слово ПЛАВНО
  и не будем исправлять Пушкина.
       - А вот для строки у нас возможностей больше,- замечаю я.
       - Почему?- не понимает Алеша,- нажимаешь <DELLINE>  и  удаляется  строка
  после курсора.
       - Да, и вместе с символами <ВК><ПС>,- добавляю  я,-  в  результате  чего
  следующая строка как бы приклеивается к остатку текущей. Это  удобно,  но  не
  всегда нужно. Поэтому имеется возможность удалять конец строки,  оставляя  на
  месте символы  <ВК><ПС>.  Для  этого  нужно  последовательно  нажать  клавиши
  <GOLD>,<DELEOL>.
       - И у нас остается возможность,- вставляет Алеша,- удалять часть  строки
  от ее начала до курсора, используя служебный символ CTRL/U. А для  восстанов-
  ления всегда можно использовать клавиши <GOLD>,<UNDELLINE> или,  в  последней
  версии для восстановления начальной  части  строки,  последовательно  нажимая
  клавиши <GOLD><CTRL/U>. В любом случае строка восстанавливается  в  таком  же
  виде, как удалялась.
       - Но еще больше возможностей,- продолжаю я,- у сегмента  редактирования.
  После установки границ сегмента, его можно удалить,  нажав  клавишу  <CUT>  -
  вырезка и, соответственно, восстановить в любом месте последовательным  нажа-
  тием клавиш <GOLD>,<PASTE> - выдавить.
       Но так как размер удаляемого сегмента может быть существенно меньше раз-
  мера буфера, то появляется возможность добавлять к содержимому буфера удаляе-
  мые сегменты.
       - Я уже нашел эту клавишу,- вставляет Алеша,- это  Append  -  прилагать.
  Т.е. нажатием на клавиши <GOLD>,<APPEND> можно добавить удаляемый  сегмент  к
  содержимому буфера.
       - Правильно,- говорю я,- но если посмотреть внимательно, то модель поис-
  ка также представляет собой сегмент редактирования. А  это  дает  возможность
  заменить найденную модель поиска на содержимое буфера  сегмента  редактирова-
  ния. Сделать это можно последовательным нажатием клавиш <GOLD>,<REPLACE>.
       Это удобная функция, но для большого файла при многократных заменах тре-
  буется поочередное повторение двух функций REPLACE и FINDNEXT.  Чтобы  облег-
  чить автоматизацию такой работы введена комбинированная функция SUBSTITUTE  -
  подстановка,   которая   выполняется   последовательным    нажатием    клавиш
  <GOLD>,<SUBS>. При этом сначала выполняется функция REPLACE,  а  затем  FIND-
  NEXT.
       Осталось только научиться очищать буфер сегмента.
       - А во второй картинке HELP,- вспоминает Алеша,- была команда CLEAR PAS-
  TE. Скорее всего, она и очищает буфер  сегмента,  но  выполнять  ее  нужно  в
  командном режиме. Вот так:

   <GOLD><COMMAND>Command: CLEAR PASTE<ENTER>
                  ---------

       - И наконец,- говорю я,- все эти функции были бы мало  эффективны,  если
  бы не было функции повторения.
       - Это то, что в редакторе EDIT,- говорит Алеша,- позволяли делать число-
  вые аргументы перед командами и угловыми скобками.
       - Да, но то был несколько искусственный прием,- продолжаю я,- здесь  все
  проще и указывается явно. Если после нажатия на клавишу <GOLD>  ввести  цифру
  на основной клавиатуре, то в левом верхнем углу печатается слово "Repeat:"  и
  KED принимает число повторений от 1 до 65535 (десятичное). После ввода  числа
  нужно нажать клавишу, повторение которой необходимо. Если команда включает  в
  себя нажатие клавиши <GOLD>, то эти две клавиши считаются за одну. Именно для
  обеспечения этой возможности была ввендена комбинированная функция  SUBSTITU-
  TE.
       Нужно понимать, что повторяется именно нажатие  клавиши,  независимо  на
  дополнительной (командной) клавиатуре она расположена или на основной. В чис-
  ло допустимых клавиш не входят только клавиша <DEL>  и  цифровые  клавиши  на


                                     - 251 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  основной клавиатуре. Может быть ты объяснишь почему,- обращаюсь я к Алеше.
       - Попробую,- отвечает он,- клавиша <DEL> служит для удаления  последнего
  введенного символа, и если ее включить в функцию повторения, то нельзя  будет
  исправить ошибочно введенное число повторений. Цифровыми  клавишами  вводится
  число повторений, и именно нажатие отличной от них клавиши, служит  признаком
  окончания ввода числа.
       - Вот и отлично,- говорю я,- но с помощью функции Repeat можно выполнить
  и другую интересную операцию - вставку специального символа.
       Под специальным символом будем понимать байт с кодом от 1 до 127., кото-
  рый можно вставить в произвольное место текста. Байт с  кодом  000  вставлять
  нельзя. Например, для вставки символа с кодом 007 - звонок необходимо  ввести
  следующую последовательность

   <GOLD>,Repeat: 7<GOLD>,<SPECINS>
          --------

  Если после этого выводить текстовой файл на терминал командой TYPE, то в этом
  месте незримый символ 007 подаст звуковой сигнал.
       Следует отметить, что код символа (как и все числа, вводимые после нажа-
  тия клавиши <GOLD>) должен быть в десятичной системе счисления.
       - И больше с символами,- спрашивает Алеша,- ничего нельзя сделать?
       - Ну, почему же,- отвечаю я,- если мы осуществляли поиск, различая  сим-
  волы верхнего и нижнего регистров, то можно и поменять регистр на  противопо-
  ложный.
       Символы верхнего и нижнего регистра (в ISO - это латинские  прописные  и
  строчные, в КОИ-7 - латинские и русские прописные) отличаются  только  значе-
  нием 5 бита в коде символа. Редактор предоставляет возможность групповой сме-
  ны (инвертирование 5 бита) регистра. Для этого нужно  последовательно  нажать
  клавиши:

  <GOLD>,<CHNGCASE>

  при этом:
       - Если был определен сегмент редактирования, то смена регистра  произой-
  дет по всему тексту в пределах сегмента редактирования.
       - Если курсор был установлен в результате контекстного  поиска  заданной
  модели, то замена регистра произойдет в пределах модели поиска.
       - Если не было никаких определений, то смена регистра произойдет у одно-
  го символа после курсором. При этом курсор переместится  на  одну  позицию  в
  соответствии с установленным направлением движения.

       - А в третьей картинке HELP,- вставил Алеша,- я видел две команды, также
  позволяющие манипулировать нижним (Lower case) и верхним (Upper case) регист-
  рами. Если мы последовательно нажмем клавиши <GOLD><L>, то в пределах сегмен-
  та редактирования все символы будут переведены в нижний регистр. После  нажа-
  тия клавиш <GOLD><U> все символы в  пределах  сегмента  редактирования  будут
  переведены в верхний регистр.
       - Нужно только отметить,- добавляю я,- что эти команды  были  введены  в
  версии KED V1.20.
       - И я вижу на дополнительной клавиатуре еще одну команду, введенную  для
  удобства,- догадался Алеша,- часто бывает необходимым вставить пустую  строку
  в место, указанное курсором. Простой способ заключается в том,  чтобы  ввести
  символы "ВК","ПС", а затем подняться на одну строку вверх с помощью  стрелки.
  Однако для многократной вставки пустой строки с  помощью  функции  повторения
  можно использовать клавишу <OPENLINE> - открыть строку.  Например,  следующим
  образом:

   <GOLD>,Repeat: XXX,<GOLD>,<OPENLINE>
          --------


                                     - 252 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  положение курсора при этом не изменится.

       - Прекрасно,- говорю я,- тогда можно обвести стихотворение  в  рамку  из
  звездочек и разобрать основные команды из командного режима.
       - Чтобы было понятно как это сделать,- говорит Алеша,- я буду пояснять.
       Сначала сделаем три пустые строки, нажав клавиши:

   <GOLD>Repeat: 3<GOLD><OPENLINE>
         --------

  и спустимся на одну строку, нажав клавишу <BLINE>.
       Длина строки стихотворения - 14 символов и она начинается с  9  колонки,
  так как в начале строки стоит символ <ГТ>. Поэтому, чтобы рамка была  симмет-
  ричная, длина горизонтальной стороны должна быть 30 символов (8+14+8). Что мы
  и сделаем командой:

   <GOLD>Repeat: 30<*>
         --------

  и спустимся еще на строку вниз, нажав клавишу со стрелкой  вниз,  и  нарисуем
  вторую строку рамки:

   <*><GOLD>Repeat: 28<Пробел><*>
            --------

       А дальше, наверное, проще сделать следующим образом - так как  в  начале
  следующих строк стоит символ <ГТ>, то можно спокойно вставлять звездочку,  не
  боясь, что строка отодвинется. Поэтому повторим необходимое число раз  после-
  довательность <*><BLINE>. И затем нарисуем нижнюю часть рамки так же,  как  и
  верхнюю:

   <*><GOLD>Repeat: 28<Пробел><*><ВК>
            --------
   <GOLD>Repeat: 30<*><ВК>
         --------

       Теперь у нас осталась только правая часть рамки. Здесь у нас строки раз-
  ной длины - одни содержат только звездочку, другие ее и строку стихотворения.
  Наша задача вставить необходимое число пробелов и звездочку  перед  символами
  <ВК><ПС>. Курсор устанавливается в необходимое  положение  с  помощью  клавиш
  <EOL>, но так как мы находимся в конце файла, то  нужно  сменить  направление
  движения и "пятиться назад".
       Кроме того, мы сначала заполним строки одного типа, а затем  другого  и,
  чтобы не нажимать 140 раз на клавишу <Пробел>, сделаем так:

   <BACKUP>,<BLINE>,<BLINE>
   =>,<GOLD>,<DELEOL>,<GOLD><UNDELLINE>

  Таким образом, у нас в буфере строки оказался текст, который мы должны встав-
  лять в остальные строки. Что и проделаем:

   <EOL>,<EOL>,<GOLD>,<UNDELLINE>
   <EOL>,<EOL>,<GOLD>,<UNDELLINE>
   <EOL>,<EOL>,<GOLD>,<UNDELLINE>
   <EOL>,<EOL>,<GOLD>,<UNDELLINE>

       Осталось вставить только короткие кусочки, и также поместим такой  кусо-
  чек в буфер, переместившись в конец предыдущей строки нажатием клавиши <EOL>,
  и затем, нажав клавишу со стрелкой вверх, окажемся в необходимой точке  гото-


                                     - 253 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  вой строки. Удалим этот остаток и восстановим его снова:

   <GOLD>,<DELEOL>,<GOLD>,<UNDELLINE>

  В результате опять в буфере нужный нам остаток строки.  Поменяем  направление
  движение на обратное и также, шагая по концам  строк,  будем  восстанавливать
  текст из буфера:

   <ADVANCE>
   <EOL>,<GOLD>,<UNDELLINE>,<EOL>,<EOL>
   <EOL>,<GOLD>,<UNDELLINE>,<EOL>,<EOL>
   <EOL>,<GOLD>,<UNDELLINE>,<EOL>,<EOL>
   <EOL>,<GOLD>,<UNDELLINE>,<EOL>,<EOL>
   <EOL>,<GOLD>,<UNDELLINE>

  Но так как слово "ПУШКИН" вылезает из общего ряда, подогнав курсор в  необхо-
  димое место, удалим два пробела перед звездочкой в этой строке.
       И вот что у нас получилось.

  ------+---------------
        !
        !******************************
        !*                            *
        !*       ВОДЫ  ГЛУБОКИЕ       *
        !*                            *
        !*       ПЛАВНО   ТЕКУТ       *
        !*                            *
        !*       ЛЮДИ ПРЕМУДРЫЕ       *
        !*                            *
        !*       ТИХО     ЖИВУТ       *
        !*                            *
        !*               А.ПУШКИН     *
        !*                            *
        !******************************
        !






       10.6. Основной набор команд



       - Как ты уже понял,- говорю я Алеше,- в  редакторе  KED  есть  несколько
  форм управления.
       - Да, одну мы уже разобрали,- отвечает Алеша,- это управление с  помощью
  дополнительной клавиатуры. Нажимая на клавиши этой клавиатуры,  мы  управляем
  редактором, как тракторист управляет  ковшом  навесного  экскаватора,  двигая
  рычаги.
       Но мы уже знаем и вторую форму,- продолжает Алеша,- это командный режим.
  Как с его помощью выходить из редактора, мы уже разобрали.
       - Если продолжить твою аналогию с трактористом,- добавляю я,- этот режим
  можно сравнить со сменой или установкой различных приспособлений на тракторе.
  И начнем мы со второго столбика во второй картинке HELP.
       Все команды на этой картинке разделены на группы, обобщающие объекты или
  действия, к которым они относятся. Первые объекты, которые мы изучали, -  это
  страница и секция.


                                     - 254 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


       - Для них есть такая странная команда,-  как  знаток  английского  языка
  говорит Алеша,- которая в дословном переводе означает "установить  сущность".
  Т.е. это не значит, что, например, страница равна "строке". В  данном  случае
  строка, заключенная в кавычки, является признаком, позволяющем отделить  одну
  страницу от другой. Таким же образом и количество строк лишь описывает  стра-
  ницу, а не является этой страницей.
       - Но слово [ENTITY] мы можем опустить при вводе  команды,-  продолжаю  я
  его объяснение,- так как оно заключено в квадратные скобки и является  необя-
  зательным элементом.
       Таким образом команды из этой группы можно прочитать следующим  образом:
  "Установить, что признаком границы для объекта "PAGE" является "STRING"", или
  "Установить, что размер объекта "PAGE" есть ЦЕЛОЕ ЧИСЛО  строк".  И  так  как
  слово [LINE] также заключено в квадратные скобки, то и оно является  необяза-
  тельным элементом команды.
       Следует также отметить, что в качестве STRING  может  выступать  строка,
  содержащая любые символы, в том числе и  служебные,  например  CTRL/L,  кроме
  кавычек, которые ограничивают ее. Кавычки могут быть одинарными или двойными.
  Таким образом определения "СТРОКА" и 'СТРОКА' равносильны.
       - И, как мы говорили,- вставляет  Алеша,-  страница  и  секция  являются
  идентичными объектами, и все, что было сказано о странице, справедливо и  для
  секции.
       А выполнить это можно следующим образом:
       Для задания границы в виде символьной строки необходимо дать команду:

  +---------------
  !  Command: SET SECTION "string"<ENTER>
  !  ---------
  !

       Для задания размера секции в целое число строк необходимо дать команду:

  +---------------
  !  Command: SET SECTION NN<ENTER>
  !  ---------
  !

       где NN - число строк в секции.


       Таким же образом можно  задать  границы  страницы,  дав  соответствующие
  команды

  +---------------
  !  Command: SET PAGE "string"<ENTER>
  !  ---------
  !

       и

  +---------------
  !  Command: SET PAGE NN<ENTER>
  !  ---------
  !

       - А про установку режимов поиска,- предлагаю я Алеше,- ты расскажешь без
  меня.
       - Конечно,- обрадовался самостоятельности Алеша,-  здесь  же  все  очень
  ясно написано - УСТАНОВИТЬ ПОИСК ОБЩИЙ или ТОЧНЫЙ, какой мы  выберем.  Нужно,
  конечно, помнить, что установка режима точного поиска отменяет  режим  общего


                                     - 255 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  поиска, и так для каждой пары режимов. А делается это так.

       Общий поиск без различия символов верхнего и нижнего регистров  устанав-
  ливается командой

  +---------------
  !  Command: SET GENERAL<ENTER>
  !  ---------
  !


       Точный поиск с различием символов верхнего и нижнего регистров  устанав-
  ливается командой

  +---------------
  !  Command: SET EXACT<ENTER>
  !  ---------
  !


       Для того чтобы при обнаружении модели  курсор  устанавливался  в  начало
  найденной модели поиска, нужно дать команду:

  +---------------
  !  Command: SET BEGIN<ENTER>
  !  ---------
  !


       Для того чтобы при обнаружении модели курсор устанавливался в конец най-
  денной модели поиска, нужно дать команду:

  +---------------
  !  Command: SET END<ENTER>
  !  ---------
  !


       Поиск может осуществляться в пределах сегмента редактирования, для  чего
  необходимо дать команду:

  +---------------
  !  Command: SET BOUNDED<ENTER>
  !  ---------
  !


       Если поиск должен осуществляться по всему файлу, то нужно дать команду:

  +---------------
  !  Command: SET UNBOUNDED<ENTER>
  !  ---------
  !

       Режимы поиска устанавливаются командами в командном режиме и сохраняются
  до конца сеанса редактирования или до следующей установки.

       - А в конце второго столбика,- Алеша перескочил через несколько команд,-
  какая-то интересная команда -  SET  WRAP  -  установить  обертку.  Чтобы  это


                                     - 256 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  значило?
       - Во-первых, не обертка, а завертывать,- поправляю  я  его,-  во-вторых,
  эта группа команд предложена специально для писателей.
       Редактор KED позволяет работать со строками произвольной длины, и  писа-
  тели должны постоянно следить за тем, чтобы  длина  строки  не  превышала  бы
  ширины страницы. Как правило она составляет 60-65 символов в строке (по стан-
  дарту - 60). Эту функцию можно поручить редактору,  и  он  "завернет"  слово,
  вылезающее за заданную границу, на новую строку.
       - А как же быть с переносом слов,- удивился Алеша,- ведь он же не  знает
  грамматики.
       - А редактор и не будет их переносить,-  отвечаю  я,-  мы  сообщаем  ему
  номер колонки (позиции) в строке, за которую он не должен переходить. Поэтому
  он постоянно сравнивает текущую позицию курсора с заданной. Когда курсор дос-
  тигнет границы редактор возвращается до  ближайщего  пробела  слева  и  перед
  началом слова вставляет символы "ВК","ПС". И слово-нарушитель начинается  уже
  с новой строки. Как показали исследования, использование только этой  функции
  увеличивает производительность машинистки на 10%.
       - Да, но если я между словами,- спрашивает Алеша,- в качестве разделите-
  ля поставлю запятую, а не пробел, то редактор эти  два  слова  воспримет  как
  одно?
       - В соответствии с тем определением, которое мы дали выше,-  подтверждаю
  я,- поэтому нужно следить, чтобы после знаков препинания был символ "Пробел".
  Конечно, можно создать систему, которая понимает  все  варианты  разделителей
  между словами (кто бы взялся их все описать?!), но тогда нужно  будет  привя-
  зать редактор текста к грамматике определенного языка, и  объем  программного
  обеспечения вырастет в несколько (а может и несколько десятков) раз.  Поэтому
  легче приучить писателей к некоторой дисциплине при использовании знаков пре-
  пинания. Это будет полезно и при дальнейшей обработке текста.
       - Естественно,- продолжает Алеша,- установленная граница сохраняется  на
  все время сеанса редактирования, или до  новой  установки.  А  отменить  этот
  режим можно командой SET NOWRAP. Но там есть еще команда  FILL  -  заполнять.
  Это еще для чего?
       - Раз ты установил правую границу текста,- объясняю я,- то можно в  пре-
  делах сегмента редактирования заполнить текстом страницу на всю ширину.  Это,
  как правило, нужно после вставок или исправлений в абзаце, в результате кото-
  рых строки стали либо выходить за установленную границу, либо слишком  корот-
  ки. Однако редактор не может отличить конец одного абзаца и  начало  другого.
  Поэтому операцию заполнения можно производить только в пределах абзаца.
       - Стоит только заметить,- говорит Алеша,- что функция FILL  в  редакторе
  KED выполняется как в командном режиме, так и с помощью  дополнительной  кла-
  виатуры, нажатием клавиш <GOLD><FILL>. В редакторе  K52  используется  только
  командный режим. А как выполнить эти команды, я покажу  ниже  и  для  примера
  использую этот абзац.

  +---------------
  !  Command: SET WRAP NN<ENTER>
  !  ---------
  !

       где NN - номер колонки, которая является границей  строки,  или,  проще,
  количество символов в строке.

       Отмена данного режима выполняется командой:

  +---------------
  !  Command: SET NOWRAP<ENTER>
  !  ---------
  !



                                     - 257 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


       Если установлена граница строки, то можно отформатировать текст в преде-
  лах сегмента редактирования командой FILL:

  +---------------
  !  Command: FILL<ENTER>
  !  ---------
  !

       Например, при наборе текста предыдущего  абзаца  правая  граница  текста
  была установлена на 60 колонке следущей командой:

   <GOLD><COMMAND>Command: SET WRAP 60<ENTER>
                  ---------
  и в файле этот текст выглядел так:

  - Стоит только заметить,- говорит Алеша,- что функция FILL в
  редакторе KED выполняется как в командном режиме, так и с
  помощью дополнительной клавиатуры, нажатием клавиш <GOLD><FILL>.
  В редакторе K52 используется только командный режим. А как
  выполнить эти команды, я покажу ниже и для примера использую
  этот абзац.

       Но потом мне показалось, что абзац будет лучше  выглядеть,  если  ширину
  страницы установить равной 45 символам, и переформатировать текст. Для  этого
  установим правую границу командой:

   <GOLD><COMMAND>Command: SET WRAP 45<ENTER>
                  ---------

  И определим сегмент редактирования от начала абзаца и до его конца (а можно и
  наоборот) и нажмем клавиши <GOLD><FILL> или (для K52) введем команду:

   <GOLD><COMMAND>Command: FILL<ENTER>
                  ---------

  И вот что получилось:

  - Стоит только заметить,- говорит Алеша,- что
  функция FILL в редакторе KED выполняется
  как в командном режиме, так и с помощью
  дополнительной клавиатуры, нажатием клавиш
  <GOLD><FILL>. В редакторе K52 используется
  только командный режим. А как выполнить эти
  команды, я покажу ниже и для примера использую
  этот абзац.

       Дальше больше. Захотелось мне посмотреть, как будет выглядеть  абзац  на
  узенькой полоске с границей на 30 колонке. И проделал это таким же образом:

   <GOLD><COMMAND>Command: SET WRAP 30<ENTER>
                  ---------
   <GOLD><COMMAND>Command: FILL<ENTER>
                  ---------

  И вот что получилось:


                                     - 258 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  - Стоит только заметить,-
  говорит Алеша,- что функция FILL в
  редакторе KED выполняется
  как в командном режиме, так и
  с помощью дополнительной
  клавиатуры, нажатием клавиш <GOLD><FILL>.
  В редакторе K52 используется
  только командный режим. А как
  выполнить эти команды, я покажу
  ниже и для примера использую
  этот абзац.

       - А теперь мы подошли к командам,- продолжаю я,- которые  отсутствуют  в
  редакторе K52, потому что связаны с особенностями терминала VT100.
       - А я буду их пробовать,- стремится в бой Алеша,- и рассказывать, что  у
  меня получилось. Итак, по порядку:

   <GOLD><COMMAND>Command: SET SCREEN 80<ENTER>
                  ---------

  И ничего не произошло. Скорее всего, этот режим установлен по умолчанию, и мы
  опять столкнулись с альтернативной парой. Тогда попробуем следующую команду:

   <GOLD><COMMAND>Command: SET SCREEN 132<ENTER>
                  ---------

  - Ой, что это случилось,- Алеша даже подпрыгнул от неожиданности,- буквы сжа-
  лись, стали маленькими. Если посчитать, то можно  убедиться,  что  на  экране
  теперь вмещается 132 символа в строке. Значит, можно изменять размеры  симво-
  лов на экране, и соответственно их число, которое может быть 80 или 132  сим-
  вола в строке.
       Тогда со второй парой команд становится более ясно. Они позволяют  отоб-
  ражать либо светлые буквы на темном фоне, либо темные буквы на светлом  фоне.
  По умолчанию, как мы видим установлен режим SET SCREEN DARK, т.е.  установить
  экран темный. Для того чтобы поменять изображение  на  обратное,  нужно  дать
  команду:

   <GOLD><COMMAND>Command: SET SCREEN LIGHT<ENTER>
                  ---------

  Некоторым такое изображение кажется более приятным. И, как в предыдущих  слу-
  чаях, слова, заключенные в квадратные скобки, при вводе команды  можно  опус-
  тить. Но вот команда SET QUIET - "установить тишину" - меня ставит в тупик.
       Для того чтобы ее понять,- поясняю я,- нужно  вспомнить,  что  в  случае
  ошибочно введенной команды или другой ошибки редактор подает звуковой сигнал.
  Вот этот звуковой сигнал можно отменить командой SET  QUIET,  а  восстановить
  командой SET NOQUIET. Иначе говоря, командой SET QUIET устанавливается  режим
  "РАБОТАТЬ МОЛЧА".



                                     - 259 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


       10.7. Работа с файлами



       - То, что мы до сих пор разбирали,- говорит Алеша,- относилось к обычно-
  му редактированию и, наверное, имеется в любом современном редакторе текстов.
  А вот то, что мы говорили о работе со вспомогательными файлами, уже позволяет
  сделать работу писателя по принципу "ножниц и клея". Очень интересно, как это
  осуществляется на практике?
       - А про это ты можешь прочитать во второй картинке  HELP,-  отвечаю  я,-
  если ты помнишь, в редакторе EDIT мы должны были явно указывать  спецификации
  входного и выходного файла, которые теперь  называются  рабочим  и  временным
  соответственно. Здесь же мы должны указать спецификацию входного и  выходного
  вспомогательных файлов.
       - А в HELPе,- замечает Алеша,- прямо указан  текст  команды  OPEN  INPUT
  DEV:INPFIL.TYP - если  читать  ее  полностью,  то  получится:  "Открыть  файл
  INPFIL.TYP на устройстве DEV:". И точно также открывается файл для вывода.
       - Здесь нужно напомнить,- замечаю я,- что спецификация файла  понимается
  в стандартном для RT-11 виде. И,  например,  спецификация  файла  для  вывода
  "LP:" будет правильна. Такой файл позволяет распечатывать отдельные фрагменты
  текста без изменения рабочего файла.
       - А я покажу как обычно открываются файлы,- продолжает Алеша,- для  отк-
  рытия входного и выходного вспомогательных файлов необходимо дать  соответст-
  венно команды:

  +---------------
  !  Command: OPEN INPUT DEV:INPFIL.TYP<ENTER>
  !  ---------
  !

  +---------------
  !  Command: OPEN OUTPUT DEV:OUTFIL.TYP<ENTER>
  !  ---------
  !

       И нужно сказать, что необязательно открывать  сразу  оба  файла.  Каждый
  файл открывается по мере необходимости и независимо от другого.
       А вот закрывается?!
       - Входной вспомогательный файл закрывается автоматически,- прихожу я ему
  на помощь,- если при чтении будет обнаружен конец файла  или  при  выходе  из
  редактора. Вернуться в начало входного вспомогательного файла нельзя.
       Что же касается выходного файла,  то  это  зависит  от  его  назначения.
  Выходной вспомогательный файл может быть закрыт командой:

  +---------------
  !  Command: CLOSE<ENTER>
  !  ---------
  !

  если информация в нем должна быть сохранена, или освобожден командой:

  +---------------
  !  Command: PURGE<ENTER>
  !  ---------
  !

  если информация в нем не нужна.
       - А когда необходимый файл открыт,- Алеша продолжает  разбирать  команды
  из первого столбика второй картинки HELP,- можно и выполнять операции с  эле-


                                     - 260 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  ментами редактирования. Самая простая команда WRITE SELECT - записать выбран-
  ное. А "выбранным" у нас может быть только сегмент редактирования.
       Это наиболее естественная операция для писателя, делающего выписки.  При
  движении по файлу фрагмент текста, который нужно записать во  вспомогательный
  выходной файл (выписка), определяется как  сегмент  редактирования,  и  затем
  дается команда:

  +---------------
  !  Command: WRITE SELECT<ENTER>
  !  ---------
  !

  Выбранный сегмент  редактирования  будет  записан  в  конец  вспомогательного
  выходного файла.
       При этом курсор устанавливается в конец сегмента редактирования, который
  не изменяется. И так можно выбирать по всему файлу и в произвольном порядке.
       - Но здесь есть маленький подводный камень,- замечаю я,- запись в выход-
  ной файл происходит через внутренний буфер. Поэтому для того, чтобы  распеча-
  тать выбранный фрагмент текста на принтере, после вывода его  командой  WRITE
  SELECT нужно закрыть вспомогательный файл командой CLOSE. При этом внутренний
  буфер освободится и выбранный фрагмент  текста  будет  распечатан  полностью.
  Если нужно сделать еще выписки - распечатки, то вспомогательный выходной файл
  на LP: открывается снова.
       - Но если мы знаем, что в  выходной  файл  нужно  записать  целое  число
  страниц,- продолжает Алеша,- часто на печатающее устройство, то можно  так  и
  указать в команде - записать целое число страниц

  +---------------
  !  Command: WRITE NN PAGES<ENTER>
  !  ---------
  !
  для записи NN страниц

  или записать целое число строк, дав команду

  +---------------
  !  Command: WRITE NN [LINES]<ENTER>
  !  ---------
  !
  для записи NN строк. Причем слово LINES можно не вводить.

       И наконец, мы можем записать остаток (REST) файла командой

  +---------------
  !  Command: WRITE REST<ENTER>
  !  ---------
  !
  для записи оставшейся части файла

       - Но это ты рассказал о записи во вспомогательный выходной файл,- говорю
  я,- а как же прочитать информацию из вспомогательного входного файла?
       - С одной стороны, так же, как и писать,- отвечает Алеша,- ведь  объекты
  у нас одинаковые, исключен только  сегмент  редактирования,  потому  что  его
  нельзя определить во  вспомогательном  входном  файле.  Значит,  и  синтаксис
  команд останется тем же. Изменится только название команды  INCLUDE  -  вклю-
  чать.
       - И не только,- добавляю я,- кроме включения текста  из  другого  файла,
  тебе нужно пропустить ненужный фрагмент, чтобы не удалять  его  во  временном
  файле.


                                     - 261 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


       - И такая команда есть,- продолжает Алеша,- SKIP - пропуск  (текста  при
  чтении). И так как эти команды имеют одинаковый синтаксис, то во второй  кар-
  тинке HELP (первый столбец) они приведены без перечисления элементов редакти-
  рования. Сами элементы обозначены словом "option", которое  в  данном  случае
  означает - выбираемый  элемент,  который  может  быть:  целое  число  страниц
  (PAGES), целое число строк (LINES) и остаток (REST).
       И выполнены эти команды могут быть следующим образом:

  +---------------
  !  Command: INCLUDE NN PAGES<ENTER>
  !  ---------
   или
  !  Command: SKIP NN PAGES<ENTER>
  !  ---------
  для вставки или пропуска из входного файла NN страниц

  +---------------
  !  Command: INCLUDE NN [LINES]<ENTER>
  !  ---------
   или
  !  Command: SKIP NN [LINES]<ENTER>
  !  ---------
  для вставки или пропуска из входного файла NN строк.

  +---------------
  !  Command: INCLUDE REST<ENTER>
  !  ---------
   или
  !  Command: SKIP REST<ENTER>
  !  ---------
  для вставки или пропуска остатка входного вспомогательного файла.






       10.8. Макрокоманды



       - И после команд работы с  файлами,-  спрашивает  Алеша,-  идет  команда
  LEARN - учить, учись. Это кто кого будет учить? Он (редактор) меня или я его?
       - А ты испугался, что еще один учитель на твою голову свалился,- подтру-
  ниваю я над ним,- успокойся, это ты можешь обучить его  целой  последователь-
  ности команд и затем исполнять ее нажатием только двух клавиш.
       Удобство команды LEARN, по сравнению с такими же средствами в  редакторе
  EDIT, в том, что пользователю не нужно запоминать какой-либо синтаксис. После
  ввода команды LEARN, которая не имеет аргументов,  редактор  просто  начинает
  запоминать все последующие действия пользователя, включая и ошибочные, до тех
  пор пока не будут последовательно нажаты  клавиши  <GOLD>,<S>  -  если  нужно
  только запомнить (Storage) эту последовательность команд,  или  <GOLD>,<X>  -
  если нужно запомнить и сразу выполнить (eXecute).
       - Это, действительно много проще, чем в редакторе EDIT,- говорит Алеша,-
  и, главное, наглядно видно, что ты делаешь.
       - Вот и попробуй сообразить, что нужно сделать,- предлагаю я ему,- чтобы
  заменить многочисленные пробелы на одиночные.
       - Сначала нужно определить, что такое многочисленные пробелы,анализирует
  поставленную задачу Алеша,- наверное, более точно можно сказать, что это  два


                                     - 262 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


  и более символа "Пробел" идущих подряд. Тогда я могу в качестве модели поиска
  задать два пробела

   <GOLD><FIND>Model: <Пробел><Пробел><BACKUP>
               -------

       И после этого вернуться в начало файла, так как искать  нужно  будет  по
  всему тексту, и начать учить редактор.

   <GOLD><TOP><ADVANCE>                       - вернулись наверх
   <GOLD><COMMAND>Command: LEARN<ENTER>       - начало обучения
   <NEXTFIND>                     - найти следующий образ
   <DELCHAR>                      - удалить пробел после курсора
   <GOLD><X>                      - запомнить и выполнить эту
                                    последовательность команд

       И дальше выполнять эту короткую последовательность просто нажатием  кла-
  виш.

   <GOLD><X>

       - А ведь ты ничего не сэкономил,- говорю я Алеше,- было два  нажатия  на
  клавиши и осталось два.
       - А вот и сэкономил,- хитро проговорил Алеша, который уже догадался, где
  зарыта собака,- по нажатиям клавиш действительно экономии  не  получилось,  а
  вот функция теперь получилась одна, и я могу удалить все  двойные  и  кратные
  пробелы в достаточно большом файле следующим образом:

   <GOLD>Repeat: 50000<GOLD><X>
         --------

       Правда, я за это время, наверное, успею попить чаю.
       - Это верно,- подтверждаю я его предположение,- маленькая  операция,  но
  при таком количестве повторений может выполняться долго.
       Может быть ты тогда найдешь подводный камень и во втором нашем примере -
  удалить пробелы перед точкой.
       - Попробую,- начал Алеша,- для этого, наверное, нужно  проанализировать,
  что произойдет, если мы будем выполнять нашу последовательность  команд  нес-
  колько раз подряд.
       Модель поиска нам ясна - это символ "Пробел", за которым следует  точка.
  Если мы начнем поиск от начала файла к его концу и будем  удалять  пробел  до
  или после курсора, то следующий пробел мы будем удалять уже у следующей  точ-
  ки, несмотря на то что у текущей еще есть пробелы.
       Выход из положения видится в том, чтобы начинать поиск с конца  файла  и
  двигаться в его начало. При этом если установлен режим SET BEGIN, т.е. курсор
  устанавливается в начало модели поиска, то удалять нужно пробел после  курсо-
  ра. Можно попробовать установить режим SET END, но  тогда  придется  дополни-
  тельно перемещаться вперед на один символ, чтобы не удалить точку.
       Для примера я возьму распечатку какого-нибудь каталога в  одну  колонку,
  которая приведена ниже.

   AS    .SAV
   BINCOM.SAV
   CC    .SAV
   CREF  .SAV
   DIR   .SAV
   DOC   .SAV
   DUMP  .SAV
   DUP   .SAV


                                     - 263 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


   DW    .SYS
   DZ    .SYS
   IND   .SAV
   KED   .SAV
   LD    .SYS
   LET   .SAV
   LP    .SYS
   NL    .SYS
   PI    .SYS
   PIP   .SAV
   RESORC.SAV
   RT11FB.SYS
   SETUP .SAV
   SL    .SYS
   STARTF.COM
   SWAP  .SYS
   TT    .SYS
   VM    .SYS
   XC    .SYS
   ZERO  .BLK

  А конкретно, вот что я сделал:

   <GOLD><FIND>Model: <Пробел>.<ADVANCE>
   <GOLD><BOTTOM><BACKUP>
   <GOLD><COMMAND>Command: LEARN<ENTER>
                  --------
   <FINDNEXT>
   <DELCHAR>
   <GOLD><X>

       И опять, используя функцию Repeat:, выполним эту последовательность мно-
  го много раз:

   <GOLD>Repeat: 50000<GOLD><X>
         --------

  и в результате получилось:

   AS.SAV
   BINCOM.SAV
   CC.SAV
   CREF.SAV
   DIR.SAV
   DOC.SAV
   DUMP.SAV
   DUP.SAV
   DW.SYS
   DZ.SYS
   IND.SAV
   KED.SAV
   LD.SYS
   LET.SAV
   LP.SYS
   NL.SYS
   PI.SYS
   PIP.SAV
   RT11FB.SYS
   SETUP.SAV


                                     - 264 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


   SL.SYS
   STARTF.COM
   SWAP.SYS
   TT.SYS
   VM.SYS
   XC.SYS
   ZERO.BLK

  Но это все короткие  макрокоманды,-  говорит  Алеша,-  хотя  и  дают  большие
  удобства. А что можно сделать еще?
       - Наш список файлов, например,- отвечаю я,- можно преобразовать в  более
  сложный текст (для чего он нужен, мы пока промолчим).  Итак,  имея  в  каждой
  строке только имя и тип файла, преобразуем строку в команду копирования.

   COPY LD0:FILNAM.TYP LD4:FILNAM.TYP

  Я сейчас попробую это сделать,- засучил рукава Алеша.  Сначала  нужно  занять
  исходную позицию:

   <GOLD><TOP><ADVANCE>

  и сказать редактору - "Учись"

   <GOLD><COMMAND>Command: LEARN<ENTER>
                  ---------
   <GOLD><DELEOL>              - удалить остаток строки _
   COPY LD0:<GOLD><UNDELLINE> LD4:<GOLD><UNDELLINE>
   <BLINE>                     - перейти на следущую строку _
   <GOLD><X>
   <GOLD>Repeat: 1000<GOLD><X>
         --------

  - Вот и все,- доложил Алеша,- даже при таком  маленьком  тексте  мы  получили
  большое удобство и экономию. И результат у нас получился такой.

   COPY LD0:AS.SAV LD4:AS.SAV
   COPY LD0:BINCOM.SAV LD4:BINCOM.SAV
   COPY LD0:CC.SAV LD4:CC.SAV
   COPY LD0:CREF.SAV LD4:CREF.SAV
   COPY LD0:DIR.SAV LD4:DIR.SAV
   COPY LD0:DOC.SAV LD4:DOC.SAV
   COPY LD0:DUMP.SAV LD4:DUMP.SAV
   COPY LD0:DUP.SAV LD4:DUP.SAV
   COPY LD0:DW.SYS LD4:DW.SYS
   COPY LD0:DZ.SYS LD4:DZ.SYS
   COPY LD0:IND.SAV LD4:IND.SAV
   COPY LD0:KED.SAV LD4:KED.SAV
   COPY LD0:LD.SYS LD4:LD.SYS
   COPY LD0:LET.SAV LD4:LET.SAV
   COPY LD0:LP.SYS LD4:LP.SYS
   COPY LD0:NL.SYS LD4:NL.SYS
   COPY LD0:PI.SYS LD4:PI.SYS
   COPY LD0:PIP.SAV LD4:PIP.SAV
   COPY LD0:RT11FB.SYS LD4:RT11FB.SYS
   COPY LD0:SETUP.SAV LD4:SETUP.SAV
   COPY LD0:SL.SYS LD4:SL.SYS
   COPY LD0:STARTF.COM LD4:STARTF.COM
   COPY LD0:SWAP.SYS LD4:SWAP.SYS
   COPY LD0:TT.SYS LD4:TT.SYS


                                     - 265 -
           RT-11, A step by step          Keypad Editor   14-Nov-92


   COPY LD0:VM.SYS LD4:VM.SYS
   COPY LD0:XC.SYS LD4:XC.SYS
   COPY LD0:ZERO.BLK LD4:ZERO.BLK

  Но мы что-то говорили о распечатке текста по страничкам?
       - Проблема состоит в том,- поясняю я Алеше,- что с персональными компью-
  терами и ДВК поставляются маленькие принтеры, которые умеют  печатать  только
  по страничкам. Команда PRINT не умеет печатать по страничкам,  так  как  опи-
  рается на команду COPY. Вот теперь попробуй облегчить жизнь  пользователей  и
  расскажи, как напечатать текст по страничкам, используя макрокоманды и  вспо-
  могательный выходной файл.
       - Я не думаю, что будет очень сложно,- говорит Алеша,- потому  что  под-
  водные камни мы уже обсудили. Сначала, как всегда, мы должны занять  исходную
  позицию. В данном случае - это начало файла. И нужно  подготовить  принтер  к
  работе

   <GOLD><TOP><ADVANCE>

  и сказать редактору

   <GOLD><COMMAND>Command: LEARN<ENTER>
                  ---------

  и после этого начать печатать.

   <GOLD><COMMAND>Command: OUT LP:<ENTER>
                  ---------
   <GOLD><COMMAND>Command: WRITE PAGES<ENTER>
                  ---------

       Количество страниц мы не указываем, потому что по умолчанию оно считает-
  ся равным единице. И подождав, когда принтер напечатает текст и  остановится,
  закроем выходной вспомогательный файл.

   <GOLD><COMMAND>Command: CLOSE<ENTER>
                  ---------

       Принтер допечатает остаток страницы и, вставив новый лист бумаги,  запо-
  минаем эту последовательность, одновременно напечатав следущую страницу.

   <GOLD><X>

       Нажимая клавиши <GOLD><X>, можно выдавать на принтер любую  страницу  по
  своему желанию и не торопясь менять бумагу в принтере. Нужно только  помнить,
  что если курсор будет установлен посередине  страницы,  то  напечатана  будет
  часть страницы, от курсора и до ее конца.
       - Прекрасно,- хвалю я Алешу,- нужно только заметить, что примерно так же
  можно выводить текст на  графопостроитель  ЭМ-7052,  который  поставляется  с
  "Электроникой-85", но в качестве элемента для вывода использовать  строку,  а
  не страницу.

       Мы разобрали типичные случаи использования макрокоманд и команд редакто-
  ра KED из писательского набора. После достаточно продолжительной работы,  как
  правило, у пользователя остается в арсенале только часть команд  редактора  и
  приемов работы, которая соответствует его основным видам работ,  привычкам  и
  психологии. Это нормально, поэтому не следует пытаться вызубрить все команды.



                                     - 266 -
           RT-11, A step by step        Advances Editor   14-Nov-92


                        11. KED (продолжение) И ЕГО ДЕТИ





       Эта глава построена не совсем обычно. В ней приведены специальные коман-
  ды для программистов, пояснения ко всем сообщениям редактора и  описаны  воз-
  можности системы, которые в ней появились в  связи  с  разработкой  редактора
  KED.
       Тот, кто не собирается быть программистом, может совершенно безболезнен-
  но пропустить специальные команды.
       Часть главы "Сообщения об ошибках" выполнена как справочник,  и,  навер-
  ное, ей нужно так и пользоваться.
       Так что мы прощаемся с писателями до встречи в "Редакторе одной строки".






       11.1. Команды для программистов



       Редактор KED поддерживает некоторые специальные ситуации, которые встре-
  чаются у программистов.






       11.1.1. Расстановка локальных меток



       В языке программирования MACRO-11 (макроассемблер для ЭВМ PDP-11 в  опе-
  рационных системах RT-11, RSTS/E, RSX-11 и др.) существуют три вида  меток  -
  глобальные, символьные и локальные. И если глобальные и символьные метки, как
  правило, являются сокращениями названий функций, которые  выполняются  данной
  частью программы, то локальные метки представляют собой  целое  положительное
  число, заканчивающееся знаком "DOLLARS". Это наиболее мелкая структурная еди-
  ница в программах, написанных на MACRO-11. Поэтому наиболее часто исправления
  (коррекции) делаются именно в области действия локальных меток.
       Локальные метки действуют в пределах от одной символьной или  глобальной
  метки до другой. Область действия локальных меток можно расширить,  определив
  LSB-блок директивами макроассемблера .ENABL LSB - в начале блока и .DSABL LSB
  - в конце блока. Например:

   OUBASC::           .ENABL LSB
           CLR     R0
           CLR     FGRFLG
           MOV     #3,R2
           SWAB    R1
           BR      2$
   OUFASC::
           MOV     #1,FGRFLG
           BR      OUWASC


                                     - 267 -
           RT-11, A step by step        Advances Editor   14-Nov-92


   OUSASC:
           CLR     FGRFLG
   OUWASC:
           CLR     R0
           MOV     #6,R2
           BR      3$
   1$:     CLR     R0
           CCC
           ROL     R1
           ROL     R0
   2$:     CCC
           ROL     R1
           ROL     R0
   3$:     CCC
           ROL     R1
           ROL     R0
           ADD     #'0,R0
           CMPB    #'0,R0
           BNE     4$
           TST     FGRFLG
           BEQ     5$
   4$:     INC     FGRFLG
           JSR     PC,OUTCHR
   5$:     DEC     R2
           BGT     1$
           TST     FGRFLG
           BNE     6$
           MOVB    #'0,R0
           JSR     PC,OUTCHR
   6$:     RTS     PC
                       .DSABL LSB    ; конец LSB-блока

       В примере для экономии места опущены коментарии. Если в результате  исп-
  равлений локальные метки расположены не по порядку или нам хочется, чтобы они
  шли с другим шагом, их можно расставить заново,  одновременно  скорректировав
  ссылки на них в программе. Для этого необходимо определить  область  действия
  локальных меток как сегмент редактирования, после чего дать команду:

   <GOLD><COMMAND>Command: LOCAL NN SS<ENTER>
                  ---------
       где NN - начальный номер локальной метки,
           SS - шаг приращения номеров локальных меток.

       При этом по умолчанию начальный номер и шаг приращения равны 10. В  при-
  мере, который мы приводили выше, можно расставить метки заново, например  вот
  так:

   <GOLD><COMMAND> Command: LOCAL 20 5<ENTER>
                   ---------

   OUBASC::           .ENABL LSB
           CLR     R0
           CLR     FGRFLG
           MOV     #3,R2
           SWAB    R1
           BR      25$
   OUFASC::
           MOV     #1,FGRFLG
           BR      OUWASC


                                     - 268 -
           RT-11, A step by step        Advances Editor   14-Nov-92


   OUSASC:
           CLR     FGRFLG
   OUWASC:
           CLR     R0
           MOV     #6,R2
           BR      30$
   20$:    CLR     R0
           CCC
           ROL     R1
           ROL     R0
   25$:    CCC
           ROL     R1
           ROL     R0
   30$:    CCC
           ROL     R1
           ROL     R0
           ADD     #'0,R0
           CMPB    #'0,R0
           BNE     35$
           TST     FGRFLG
           BEQ     40$
   35$:    INC     FGRFLG
           JSR     PC,OUTCHR
   40$:    DEC     R2
           BGT     20$
           TST     FGRFLG
           BNE     45$
           MOVB    #'0,R0
           JSR     PC,OUTCHR
   45$:    RTS     PC
                       .DSABL LSB  ; конец LSB-блока






       11.1.2. Структурная табуляция



       Для программистов, которые пишут на языках  PASCAL,  ADA,  FORTRAN-77  и
  других, которые предустматривают  структуризацию  текста,  имеется  средство,
  облегчающее набор текста программы.
       Структурная табуляция, посуществу представляет  собой  подмену  действия
  клавиши <ГТ> - горизонтальная табуляция, в случае использования его в  начале
  строки или как первого пробельного символа. Для примера возьмем программу  на
  языке PASCAL.


                                     - 269 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  ---+---------------
     !procedure SIFT(l,r:index);
     !   label 13;
     !   var i,j: index; x:item;
     !   begin i := l; j := 2*i; x := a[i];
     !      while j <= r do
     !      begin if j < r then
     !         if a[j] .key > a[j+1] .key then j := j+1
     !         if x .key <= a[j] .key then goto 13;
     !            a[i] := a[j]; i := j; j := 2*i{SIFT}
     !   end;
     !   13: a[i] := x
     !end

       Таким образом, структурированный  текст  имеет  в  начале  строки  зубцы
  (indent) различного уровня вложенности. При этом общий размер  зубца,  созда-
  ваемый вставкой символа "ГТ", вычисляется по формуле:

   Общий размер = номер уровня * базовый размер

       В приведенном выше примере базовый размер зубца равен 3 пробелам. Первая
  и последняя строки находятся на нулевом уровне, вторая,  третья  четвертая  и
  две предпоследние строки, на первом уровне и т.д. Самый большой зубец (8 и  9
  строки) имеет 5-й уровень.
       Для набора такого текста имеется  целый  комплекс  операций.  Во-первых,
  необходимо иметь возможность устанавливать размер зубца, так как  он  опреде-
  ляет раздвижку (в символах) между уровнями. Для этого используется команда:

   SET TABS [indent]:

  вводимая в командном режиме. При этом размер зубца (indent) по умолчанию при-
  нимается равным 4 пробелам.
       Во-вторых, необходимо  уметь  увеличивать  или  уменьшать  номер  уровня
  структурной табуляции. Для этого используются следующие GOLD-функции:

  <GOLD>,<E>
     - увеличение на единицу счетчика уровня структурной табуляции.  Смещение
       строки к правой границе текста;

  <GOLD>,<D>
     - уменьшение на единицу счетчика уровня структурной табуляции.  Смещение
       строки к левой границе текста.

       В-третьих, так как тексты программ подвергаются коррекции, то необходимо
  уметь вычислять номер уровня структурной табуляции в  том  месте,  где  стоит
  курсор, и уже затем, при редактировании, использовать  функции  уменьшения  и
  увеличения номера уровня. Для этого используется GOLD-функция:

  <GOLD>,<A>
     - вычисление значения счетчика уровня структурной табуляции в соответст-
       вии с текущей позицией курсора и базовым смещением.

       Таким образом, можно набрать приведенный выше пример с другими  парамет-
  рами следующим образом.
       Во-первых, установим размер зубца равным 5-ти пробелам командой:

   <GOLD>,<COMMAND>Command: SET TABS 5<ENTER>
                   ---------



                                     - 270 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  и дальше при наборе текста оступы выполняются нажатием клавиши <ГТ>.

  ---+---------------
     !procedure SIFT(l,r:index);
     !<ГТ>label 13;
     !<ГТ>var i,j: index; x:item;
     !begin i := l; j := 2*i; x := a[i];
     !<ГТ>while j <= r do
     !<ГТ>begin if j < r then
     !<GOLD>,<E>  -- увеличим уровень структурной табуляции на
     !               единицу и продолжим
     !<ГТ>if a[j] .key > a[j+1] .key then j := j+1
     !<ГТ>if x .key <= a[j] .key then goto 13;
     !<GOLD>,<E>  -- еще раз увеличим уровень на единицу и
     !               продолжим дальше
     !<ГТ>a[i] := a[j]; i := j; j := 2*i{SIFT}
     !<GOLD>,<D>,<GOLD>,<D>  -- для возвращения на тот же уровень,
     !                          где было слово begin, уменьшим
     !                          уровень на два
     !<ГТ>end;
     !13: a[i] := x
     !end

       Результат наших манипуляций с уровнями табуляции показан ниже.

  ---+---------------
     !procedure SIFT(l,r:index);
     !     label 13;
     !     var i,j: index; x:item;
     !begin i := l; j := 2*i; x := a[i];
     !     while j <= r do
     !     begin if j < r then
     !          if a[j] .key > a[j+1] .key then j := j+1
     !          if x .key <= a[j] .key then goto 13;
     !               a[i] := a[j]; i := j; j := 2*i{SIFT}
     !     end;
     !13:  a[i] := x
     !end

       Теперь, когда текст разбит на уровни, можно его весь  сдвинуть  влево  и
  вправо, используя команду ADJUST  -  регулировать,  устанавливать,  выверять.
  Поэтому, если мы определим наш текст (или часть его) как сегмент редактирова-
  ния и дадим, например, команду:

   <GOLD>,<COMMAND>Command: ADJUST +1<ENTER>
                   ---------

  то результат будет такой:


                                     - 271 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  ---+---------------
     !procedure SIFT(l,r:index);
     !          label 13;
     !          var i,j: index; x:item;
     !begin         i := l; j := 2*i; x := a[i];
     !          while j <= r do
     !          begin if j < r then
     !               if a[j] .key > a[j+1] .key then j := j+1
     !                    if x .key <= a[j] .key then goto 13;
     !                    a[i] := a[j]; i := j; j := 2*i{SIFT}
     !          end;
     !13: a[i] := x
     !end

       А для того чтобы при новом редактировании вычислить уровень  структурной
  табуляции для какого-нибудь зубца, достаточно подвести курсор на определяемую
  колонку и нажать клавиши <GOLD>,<A>, после чего можно вставлять и корректиро-
  вать текст, управляя уровнями с помощью функций <GOLD>,<E> и <GOLD>,<D>.






       11.2. Сообщения об ошибках



       Ниже приводятся сообщения об ошибках в  редакторе  KED,  поставляемом  в
  RT-11 V5.4, их перевод и возможная реакция пользователя при их возникновении.
  Сообщений в редакторе K52 и в редакторах младших версий несколько меньше,  но
  текст их одинаков, поэтому они отдельно не выделяются.

  ADJUST illegal in inspect mode
       - функция TABS ADJUST недопустима в режиме просмотра.
       При выполнении функции ADJUST может выполняться вставка  символов  "Про-
  бел" или "ГТ", что недопустимо при просмотре файла.

  Advance char finds end of file
       - при движении вперед по символам найден конец файла.

  Advance line finds end of file
       - при движении вперед по строкам найден конец файла.

  Advance word finds end of file
       - при движении вперед по словам найден конец файла.
       Эту ошибку в большинстве случаев можно игнорировать, потому что редактор
  просто предупреждает о том, что достигнут конец файла  и  необходимо  сменить
  направление движения на противоположное.

  Argument error to INCLUDE or SKIP
       - ошибочный аргумент для функций INCLUDE или SKIP.
       Для функций INCLUDE, SKIP допустимы в качестве аргументов  только  число
  строк, число страниц и прочитать файл до конца (REST). Любой другой  аргумент
  в этих командах является ошибочным. Все числовые значения должны быть положи-
  тельными.


                                     - 272 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Argument error to WRITE
       - ошибочный аргумент для функции WRITE.
       Для функции WRITE допустимы в качестве аргументов  только  NN  LINE,  NN
  PAGE, SELECT, REST. Любой другой аргумент в этой команде является  ошибочным.
  Все числовые значения должны быть положительными.

  Arrow command finds extremity of file
       - при перемещении курсора клавишей со стрелками найдена граница файла.
       Если курсор перемещался клавишей со стрелкой вверх  или  влево,  то  был
  обнаружен верх (начало) файла. Если курсор перемещался клавишей  со  стрелкой
  вниз или вправо, то обнаружен низ (конец) файла. В любом  случае  это  просто
  предупреждение о том, что нужно сменить направление передвижения.

  Auxiliary input illegal during inspect
       - вспомогательный входной файл недопустимо открывать в режиме  просмотра
  файла.
       Так как в режиме просмотра недопустимо вставлять символы в файл, то отк-
  рывать вспомогательный входной файл не имеет смысла.

  Auxiliary input file not open
       - вспомогательный входной файл не открыт.
       Была сделана попытка вставить из вспомогательного входного файла элемент
  редактирования, не открыв вспомогательного входного файла.

  Auxiliary output file not open
       - вспомогательный выходной файл не открыт.
       Была сделана попытка записать элемент редактирования во  вспомогательный
  выходной файл, не открыв его.

  Auxiliary output file exists
       - вспомогательный выходной файл уже существует.
       При попытке открыть вспомогательный выходной файл обнаружилось,  что  на
  устройстве уже существует файл с таким же именем и типом и он  защищен,  т.е.
  его нельзя заменить. Необходимо изменить спецификацию вспомогательного выход-
  ного файла.

  Auxiliary output file exists- Replace (Y,N) ?
       - вспомогательный выходной файл существует - Заменить (Д/Н)?
       При попытке открыть вспомогательный выходной файл обнаружилось,  что  на
  устройстве уже существует файл с таким же именем и типом  и  он  не  защищен.
  Если выполнить эту операцию, то запись о существующем  файле  будет  удалена.
  Вместо него будет открыт новый файл, с такой же спецификацией файла, и  кото-
  рый будет выступать в роли вспомогательного выходного файла. Редактор спраши-
  вает, заменять существующий файл или отменить эту операцию.

  Auxiliary output file full
       - вспомогательный выходной файл полон.
       При открытии вспомогательного выходного файла память на диске  распреде-
  лялась стандартным для системы образом. При записи во вспомогательный  выход-
  ной файл элементов редактирования  зарезервированное  пространство  на  диске
  было заполнено. Можно закрыть этот файл и открыть другой  с  новым  именем  и
  типом, размер которого  будет  не  менее  половины  первого  вспомогательного
  выходного файла.


                                     - 273 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Backup char finds beginning of file
       - при движении назад по символам найдено начало файла.

  Backup word finds beginning of file
       - при движении назад по словам найдено начало файла.

  Backup line finds beginning of file
       - при движении назад по строкам найдено начало файла.
       В большинстве случаев эту ошибку  можно  игнорировать.  Редактор  просто
  сообщает, что он дошел до начала файла и необходимо изменить направление дви-
  жения на противоположное.

  F-WRFWD-Block overrun
  F-WRFWD-Bad block number
  F-WRBKW-Block overrun
  F-WRBKW-Bad block number
       Сообщения о внутренних ошибках редактора, возможно, связанных  с  неисп-
  равностью аппаратуры.

  Bounded search reached bound
       - ограниченный поиск достиг границы.
       Заданная модель поиска не была найдена в пределах установленного сегмен-
  та редактирования.

  W-Can not set terminal options-Continue(Y,N)?
       - не могу установить характеристики терминала - Продолжать (Д/Н)?
       Серия терминалов VT100 состоит из различных типов - VT100, VT101,  VT102
  и т.п. В ответ на запрос редактора, посылающего на терминал определенную пос-
  ледовательность символов, терминал должен ответить другой последовательностью
  символов, которой закодированы определенные группы  характеристик  терминалов
  этой серии. Как правило, терминалы, не полностью копирующие VT100,  не  посы-
  лают ответной последовательности, что и приводит к появлению этого сообщения.

  CHNGCASE is illegal during inspect
       - изменение верхнего/нижнего регистров недопустимо  в  режиме  просмотра
  файла.
       В режиме изменения регистра происходит изменение содержимого файла,  что
  недопустимо в режиме просмотра файла.

  CHNGCASE finds end of file
       - при изменении верхнего/нижнего регистров найден конец файла.
       Ошибку в большинстве случаев можно  игнорировать.  Обычно  эта  ситуация
  встречается при многократном выполнении команды или  макрокоманды  с  помощью
  функции Repeat, когда число повторений задано больше, чем это необходимо.

  CTRL/U finds beginning of file
       - при удалении строки перед курсором найдено начало файла.
       Информационное сообщение о том, что достигнуто начало файла и необходимо
  изменить направление движения на противоположное.

  CTRL/C entered to stop operation
       - операция остановлена введенным символом CTRL/C.
       Информационное сообщение выдается тогда, когда продолжительная по време-
  ни операция остановлена служебным символом CTRL/C.

  CTRL/C or CTRL/Z ignored - use QUIT
       - символы CTRL/C или CTRL/Z игнорируются - используйте QUIT.
       Сообщение выдается при вводе символов CTRL/C, CTRL/Z, если при  этом  не
  выполняется никакая длительная операция.


                                     - 274 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Cursor not at target
       - курсор не у цели.
       Редактор не может правильно завершить команды CUT, APPEND, PASTE,  SUBS-
  TITUTE, если не был определен сегмент редактирования.

  Command canceled
       - команда прервана.
       Продолжительная по времени команда была прервана вводом символов  CTRL/C
  или CTRL/Z.

  DELETE finds beginning of file
       - при удалении символа перед курсором найдено начало файла.
       При удалении символа перед курсором возникает движение назад, при  кото-
  ром указатель натыкается на начало файла.

  DELCHAR finds end of file
       - при удалении символа клавишей <DELCHAR> найден конец файла.
       Клавишей <DELCHAR> удаляется символ после  курсора,  в  результате  чего
  возникает движение вперед, при котором указатель натыкается на конец файла.

  DELLINE finds end of file
       - при удалении строки клавишей <DELLINE> найден конец файла.
       Клавишей <DELLINE> удаляется строка после  курсора,  в  результате  чего
  возникает движение вперед, при котором указатель натыкается на конец файла.

  DELEOL finds end of file
       - при удалении остатка строки клавишей <DELEOL> найден конец файла.
       Клавишей <DELEOL> удаляется строка после курсора, в результате чего воз-
  никает движение вперед, при котором указатель натыкается на конец файла.

  EXIT stopped by CTRL/C
       - операция EXIT остановлена вводом символа CTRL/C.
       Операция EXIT для достаточно больших файлов может  быть  продолжительной
  по времени и ее можно успеть остановить вводом символа CTRL/C. При этом можно
  продолжать редактирование дальше.

  Empty select range specified to CHNGCASE
       - пустой сегмент редактирования указан для функции CHNGCASE.
       После использования функции SELECT не был определен сегмент редактирова-
  ния, т.е. курсор не перемещался и размер сегмента редактирования равен  нулю.
  После чего была использована функция CHNGCASE. Необходимо определить  сегмент
  редактирования.

  Erasures are illegal during inspect
       - удаления недопустимы в режиме просмотра файла.
       Удаления являются изменениями файла, которые недопустимы в режиме  прос-
  мотра файла.


                                     - 275 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  EOL finds end of file
       - при движении по концам строк вперед найден конец файла

  EOL finds beginning of file
       - при движении по концам строк назад найдено начало файла

  Error writing auxiliary output file
       - ошибка записи во вспомогательный выходной файл
       Можно попытаться повторить запись во вспомогательный  выходной  файл.  В
  случае повторной ошибки если информация в вспомогательном выходном файле нуж-
  на, то его нужно закрыть командой CLOSE (при этом  можно  потерять  последний
  блок) и завершить сеанс редактирования и проверить том на плохие блоки. Можно
  попробовать открыть еще  один  вспомогательный  выходной  файл  и  продолжить
  редактирование, записывая выдержки в него, а после завершения  редактирования
  "слить" их вместе.

  Error reading auxiliary input file
       - ошибка чтения из вспомогательного входного файла.
       Нужно завершить сеанс редактирования и проверить том  на  плохие  блоки.
  Возможно, для нормального чтения том придется поставить на другой дисковод. В
  любом случае файл требует "лечения".

  File full during INCLUDE
       - в результате выполнения функции INCLUDE временный файл заполнился.
       Необходимо завершить сеанс редактирования, удалить получившийся  файл  с
  типом .BAK и возобновить редактирование, используя ключ /ALLOCATE.

  W-File not found - Create it (Y,N)?
       - файл не найден - Создать (Д/Н)?
       Сообщение выдается если  для  редактирования  вызывается  несуществующий
  файл. Если это не ошибка, то нужно ответить утвердительно, и редактор создаст
  новый файл с указанной спецификацией.

  FILL illegal during inspect
       - функция заполнения (форматирования)  недопустима  в  режиме  просмотра
  файла.
       Функция FILL приводит к изменению файла, что в режиме просмотра недопус-
  тимо.

  File full during FILL
       - в результате выполнения функции FILL (форматирование)  временный  файл
  заполнился.
       В  результате  выполнения  функции  FILL   могут   добавляться   символы
  "ВК","ПС", которые могут вызвать заполнение файла.

  I/O error closing auxiliary output file
       - ошибка ввода/вывода при закрытии вспомогательного выходного. файла

  Insert failure in LOCAL
       - недостаточно вставлено в функции LOCAL.
       Процесс расстановки локальных меток в программе на ассемблере, выполняе-
  мый командой LOCAL, был прерван вводом символа CTRL/C, в результате  чего  не
  был завершен до конца. Последствия не предсказуемы. Программу придется прове-
  рять снова.

  Illegal file specification
       - неверная спецификация файла.
       Необходимо проверить спецификацию файла. Как правило, пропущены  двоето-
  чие или точка, или длинное имя или тип файла.


                                     - 276 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Invalid parameter to LOCAL
       - неверный параметр для функции расстановки локальных меток.
       Для функции расстановки локальных меток допустимы только числовые  пара-
  метры, имеющие значения от 0 до 32767.

  INCLUDE finds end of auxiliary input file
       - при выполнении функции INCLUDE (чтение входного вспомогательного  фай-
  ла) найден конец вспомогательного входного файла.
       Вспомогательный входной файл при этом автоматически закрывается. Следую-
  щее обращение ко вспомогательному входному файлу возможно только после откры-
  тия нового или этого же файла.

  INCLUDE and SKIP illegal during inspect
       - функции INCLUDE и SKIP недопустимы в режиме просмотра файла.

  Invalid parameter to ADJUST
       - неверный параметр для функции ADJUST.
       При выполнении команды TABS ADJUST, указываемый в  ней  параметр  должен
  быть в пределах от -50 до +50.

  Illegal right column for wrap
       - неверная правая колонка для ограничения строки.
       Правая граница текста не может быть более 256.

  Illegal definition of PAGE or SECTION
       - неверное определение страницы или секции.
       Маркерная строка не была заключена в одинарные или двойные  кавычки  или
  включала неверный символ. В определении  счетчика  строк  должны  указываться
  числа больше нуля.

  Illegal tab indent value
       - неверное значение для табуляции.
       Значения для команды SET TABS должны быть больше нуля.

  Illegal terminating key to command prompt
       - неверный код клавиши в командной строке.
       Редактор не смог выполнить команду по одной из следующих причин: либо  в
  команде встретился неверный символ, либо команда не была  завершена  нажатием
  клавиши <ENTER>.

  Illegal command
       - неверная команда.
       Редактор не смог распознать введенную команду.

  Illegal terminating key
       - неверный код клавиши.
       Редактор не смог завершить функцию FIND по одной  из  следующих  причин:
  либо в модель поиска был включен неверный символ, либо ввод модели поиска  не
  был завершен нажатием клавиш <ADVANCE> или <BACKUP>.

  Illegal function
       - неверная функция.
       Редактор не может определить  функцию.  Вероятнее  всего,  была  попытка
  вставить символ ESCape, не используя функцию SPECINS. Используйте для вставки
  специального символа эту функцию.


                                     - 277 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Insert finds file full
       - при вставлении символа найден заполненный файл.
       Необходимо завершить сеанс редактирования и поискать свободное место для
  новой версии файла.

  Illegal to insert null
       - неверное вставление нуля.
       Редактор не может вставить символ, код которого равен нулю.

  Insert is illegal during inspect
       - недопустимо вставлять символы в режиме просмотра файла.

  F-Invalid device
       - неверное устройство.
       Устройство не определено в системе. Часто бывает, что не загружен  драй-
  вер указанного устройства.

  F-I/O or device error
       - ошибка ввода/вывода или устройства.
       Сеанс редактирования необходимо прервать и проверить устройство на  пло-
  хие блоки (см. главу 6,7).

  F-Insufficient memory
       - недостаточно памяти.
       В памяти находится много программ. Освободите память, выгрузив  одно  из
  заданий.

  F-Illegal command line
       - неверная командная строка.
       Проверьте спецификацию файла.

  Learn buffer filled
       - буфер макрокоманды заполнен.
       Каждая команда занимает в буфере  макрокоманд  от  одного  до  10  байт.
  Преобразуйте последовательность команд так, чтобы они занимали меньше  места.
  Можно разделить последовательность действий на два этапа.

  LOCAL illegal during inspect
       - расстановка локальных меток недопустима в режиме просмотра файла.

  Local symbol definition too long
       - определение локального символа слишком длинно.
       Локальный символ может быть числом от 1 до  32768,  за  которым  следует
  знак доллара - "$".

  F-SPCFRE-Logic error, character count wrong
       - логическая ошибка, неверный счетчик символов.
       Внутренняя ошибка редактора, возможно, неисправна аппаратура.


                                     - 278 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Logic error in ADJUST
  Logic error in CHNGCASE
  Logic error in CUT
  Logic error in undelete
  Logic error in undelete setup
  Logic error in FILL
  Logic error in PASTE
  Logic error in SUBSTITUTE
  Logic error in WRITE SELECT
       Внутренние ошибки редактора. Возможно, неисправна аппаратура. Фирма  DEC
  просит сообщать ей о возникновении подобных ошибок.

  Move failure in LOCAL
       - неудачная пересылка в функции LOCAL.
       Вы остановили процесс расстановки локальных меток вводом символа CTRL/C,
  поэтому результат работы функции неопределен. Возможно,  неправильные  ссылки
  на локальный символ.

  Move PAGE or SECTION finds extremity of file
       - пересылая курсор клавишами <PAGE> или <SECTION>, найдены границы  фай-
  ла.
       Предупреждающее сообщение о том, что необходимо сменить направление дви-
  жения.

  Move to top when at top
       - пересылка вверх, когда курсор находится вверху.

  Move to bottom when at bottom
       - пересылка вниз, когда курсор находится внизу.

  No macro to execute
       - макрокоманда не выполнилась.
       Возможно, при определении макрокоманды переполнился буфер, в  результате
  чего нет гарантии в правильности последовательности команд.

  No model defined
       - модель поиска не определена.

  No select range defined
       - сегмент редактирования не определен.

  No select range for ADJUST
       - не выбраны границы для функции ADJUST.
       Необходимо определить сегмент редактирования перед использованием  функ-
  ции ADJUST.

  No select range defined for FILL
       - не определен сегмент редактирования для функции заполнения (форматиро-
  вания).
       Необходимо определить сегмент редактирования перед использованием  функ-
  ции FILL.

  No select range for WRITE SELECT
       - не выбраны границы для функции WRITE SELECT.
       Необходимо определить сегмент редактирования перед использованием  функ-
  ции WRITE SELECT.


                                     - 279 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  F-RDFWD-No space to read
  F-RDBKW-No space to read into
  F-WRFWD-Not enough data
       Внутренние ошибки редактора. Возможно, неисправна аппаратура.

  Not enough file space to do PASTE,
       - недостаточно места в файле для PASTE
       В файле недостаточно места для восстановления из буфера сегмента  редак-
  тирования. Необходимо прекратить сеанс  редактирования  и  поискать  побольше
  места. Возможно, придется сжать том.

  Not enough space to undelete
       - недостаточно места при восстановлении символа.

  Nothing to undelete
       - восстановление символа не произошло.

  W-Only nnnnn blocks available for insertions -Continue (Y,N) ?
       - только nnnnn блоков готовы для вставки - Продолжать (Д/Н)?
       Если вам достаточно для вставки указанное количество  блоков,  то  можно
  продолжать. Редактор следит за свободным  местом  и  не  допускает  аварийных
  ситуаций по этому поводу.

  OPENLINE llegal during inspect
       - недопустимо открывать строку в режиме просмотра файла.

  W-Output files purged
       - выходной файл освобожден.

  F-Output file shorter than input file
       - выходной файл короче входного
       Попытка редактировать файл, длина которого меньше максимальной свободной
  зоны на томе. Сожмите том или поищите свободное место.

  W-Output file exists- Continue (Y,N) ?
       - выходной файл существует - Продолжать (Д/Н)?
       При положительном ответе на этот вопрос существующий файл  удаляется,  а
  вместо него в каталоге под указанным именем будет редактируемый или создавае-
  мый файл.

  W-Output file or device protected- Inspect (Y,N) ?
       - выходной файл или устройство защищено по записи - Просматривать (Д/Н)?
       Защищенный файл нельзя удалить и создать вместо него новый. Единственная
  возможность - просматривать файл. Подумайте, что вы хотели сделать.

  PASTE is illegal during inspect
       - восстанавливать из буфера недопустимо в режиме просмотра.

  F-RDFWD-pointer corrupt
  F-WRBKW-Plygnd not empty
       Внутренние ошибки редактора. Возможно, неисправна аппаратура.

  REPLACE is illegal during inspect
       - замена буфера недопустима в режиме просмотра файла.

  F-RSTS is not supported
       - операционная система RSTS/E не поддерживается.
       Данная версия редактора не может работать в операционной системе RSTS/E.


                                     - 280 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Search canceled
       - поиск прерван.
       Операция контекстного поиска была прервана вводом символа CTRL/C.

  Select range too large for CUT
       - выбранный сегмент редактирования слишком большой для удаления.
       Так как удаляемый сегмент редактирования запоминается в буфере, то вы не
  можете удалять сегменты, превышающие по объему внутренний буфер.

  TAB Indent value wrong for align
       - неверно идентифицируемый уровень структурной табуляции.
       Редактор не может вычислить уровень структурной табуляции  (при  нажатии
  клавиш <GOLD>,<A>), если курсор не стоит на границе уровней. Измените положе-
  ние курсора так, чтобы номер позиции в строке был кратен установленному базо-
  вому размеру зубца табуляции (см. начало этой главы).

  Tabs not enabled for ADJUST
       - структурная табуляция не разрешена для ADJUST.
       Попытка сдвинуть уровни структурной табуляции, не установив режим струк-
  турной табуляции.

  Target not found
       - цель не найдена.
       При контекстном поиске модель поиска не была найдена при достижении гра-
  ницы файла.

  F-Too big to edit
       - слишком большой файл для редактирования.
       Редактор может редактировать файлы размером до 16383. блоков.

  Too many arguments for command
       - много аргументов для команды.
       Проверьте командную строку.

  F-Unable to access input device
       - невозможен доступ к входному устройству.
       Отсутствует драйвер входного устройства,  устройство  не  установлено  в
  таблицах монитора или не загружен драйвер этого устройства.

  F-Unable to access output device
       - невозможен доступ к выходному устройству.
       Отсутствует драйвер выходного устройства, устройство  не  установлено  в
  таблицах монитора или не загружен драйвер этого устройства.

  Unable to access auxiliary device
       - невозможен доступ ко вспомогательному устройству.
       Отсутствует драйвер выходного устройства, устройство  не  установлено  в
  таблицах монитора или не загружен драйвер этого устройства.

  Unable to delete target
  Unable to delete mark
  Unable to insert tab
       Внутренние ошибки редактора. Возможно, неисправна аппаратура.

  Unable to close auxiliary file
       - невозможно закрыть вспомогательный файл.
       Возможно, возникла неиправность выходного устройства за время редактиро-
  вания. Проверьте устройство в непосредственном режиме.


                                     - 281 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  Unable to open auxiliary input file
       - невозможно открыть вспомогательный входной файл.

  Unable to open auxiliary output file
       - невозможно открыть вспомогательный выходной файл.

  F-Unable to open input file
       - невозможно открыть входной файл.

  F-Unable to open output file
       - невозможно открыть выходной файл.

  W-Unable to rename input file to BAK file type
       - невозможно переименовать входной файл в файл с типом .BAK.

  Unable to replace symbol
       - невозможно заменить символ.

  Undelete buffer full
       - буфер удаления полон.

  Undeletes are illegal during inspect
       - недопустимо удалять в режиме просмотра файла.

  Valid start of LSB not found
       - не найдено начальное значение блока LSB.

  WRITE finds end of file
       - при выполнении функции WRITE найден конец файла.

  F-Wrong version of RT-11
       - неверная версия RT-11.






       11.3. Редактор одной строки



       - А что это за дети редактора KED,- спрашивает Алеша,- почему у нас  был
  такой заголовок?
       - А давай посмотрим на такую связь,- отвечаю  я.-  С  помощью  экранного
  редактора KED мы редактировали файл в пределах всего экрана, или,  точнее,  в
  пределах всего файла не зависимо от числа строк. А теперь представь себе, что
  нужно редактировать командную строку клавиатурного монитора,  т.е.  необходим
  редактор одной строки.
       - Раз он происходит от редактора KED,- говорит Алеша,- то и в клавиатур-
  ном мониторе можно действовать теми же приемами.
       И Алеша нажал, по привычке, на клавишу HELP. И в  результате  на  экране
  появилась картинка, подобная первой картинке HELP в редакторе KED.


                                     - 282 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  +-------+-------+-------+-------+ +------+------+-----+--------+
  !GET OLD!GET SAV!LEFT C !RIGHT C! !      !      !     ! DELLIN !
  !   ^   !   V   !  <--  !  -->  ! ! GOLD ! HELP !     !        !
  ! OLDER ! SAVE  ! BEGIN !  END  ! !      !      !     !UNDELLIN!
  +-------+-------+-------+-------+ +------+------+-----+--------+
                          ! SWAP  !
                          !BACK SP!
                          !UNSWAP !
  +-------+-------+-------+-------+-------+
  !REFRESH!REFRESH! DELLIN!RETURN !DEL CHR!
  !CTRL W !CTRL R !CTRL U ! RETURN!  DEL  !
  !       !       !UNDELIN! TRUNC !UNDELCH!
  +-------+-------+-------+-------+-------+

       - А действительно,- говорит Алеша,- более половины клавиш  выполняют  те
  же функции, что и в редакторе KED. И объяснять придется только пять клавиш.
       - Совершенно верно,- замечаю я,- только сначала нужно  объяснить,  какая
  программа эти возможности поддерживает.
       - А я не знаю,- смутился Алеша.
       - Single-Line editor,- подсказываю я,- т.е. редактор одной строки.  Если
  мы сократим это название, то получим SL.SYS. Таким образом, SL-драйвер эмули-
  рует устройство, расширяющее возможности клавиатуры.
       - Теперь можно объяснять и назначение клавиш,- берет управление на  себя
  Алеша,- сразу нужно сказать, что клавиша  <GOLD>  действует  так  же,  как  в
  редакторе KED, т.е. после ее нажатия выполняются функции, написанные в нижней
  строке на рисунке клавиш.
       Первые две функции, хоть и написаны странным образом "LEFT C"  и  "RIGHT
  C", все же достаточно легко расшифровываются, так как  выполняются  клавишами
  горизонтального перемещения курсора. "LEFT Character" и "RIGHT  Character"  -
  вот истинное название этих функций, и они действительно выполняют перемещение
  курсора влево и вправо на один символ. Т.е. работают так же как стрелки.
       Функции BEGIN и END также понятны, если мы помним,  что  можем  работать
  только в одной строке. Нажатием клавиш <GOLD>,<BEGIN> можно переместить  кур-
  сор сразу в начало командной строки. Это удобно, когда  необходимо  исправить
  начало командной строки.
       Таким же образом нажатием клавиш <GOLD>,<END> можно переместить курсор в
  конец строки.
       - А вот что такое "GET OLD" - достать  старое,-  Алеша,  недолго  думая,
  нажал клавишу со стрелкой вверх.

  +---------------
  !  .KED DX1:VERSE.TXT
  !  -                 ^
  !

  - Это же последняя команда,- обрадовался Алеша,- которую мы вводили.
       - Действительно,- подсказываю я,- клавишей со стрелкой вверх можно  дос-
  тать (Get) последнюю введенную команду, чтобы  ее  отредактировать  и  ввести
  снова нажатием клавиши <ВК> (RETURN).
       Причем, если мы нажимаем на клавишу со стрелкой вверх после нажатия кла-
  виши <GOLD>, то достается не последняя, а предпоследняя  введенная  командная
  строка. Таким образом, если в нашей работе используется продолжительное время
  поочередное выполнение двух команд, то их можно не набирать, а  доставать  из
  буфера SL-драйвера.
       - А как же тогда понять,- спрашивает Алеша,- клавишу <GET SAV> - достать
  сохраненное? Она же просто убирает командную строку  с  экрана,  не  выполняя
  никаких действий,- не понял Алеша, попробовав нажать эту клавишу.
       - А причина здесь в нижнем названии клавиши,- объясняю я,-  действитель-
  но, если не было никаких определений, то клавиша  со  стрелкой  вниз  убирает


                                     - 283 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  командную строку с экрана. Но если нажать клавиши <GOLD>,<SAVE>, то командная
  строка, находящаяся на экране, будет запомнена в отдельном буфере на все вре-
  мя работы до перезагрузки системы. И  уже  запомненную  (сохраненную)  строку
  можно доставать из буфера нажатием клавиши <GET SAV> для дальнейшего  исполь-
  зования.
       - Осталась непонятной еще клавиша <BACK-SP>,- замечает Алеша.
       - Полное название этой клавиши,- продолжаю я,- Backspace  -  возврат  на
  шаг. Поэтому на отечественных клавиатурах ее нужно искать как клавишу <ВШ>.
       - А причем здесь тогда обмен?- спрашивает Алеша.
       - А при том, что эта клавиша редактирования,-  отвечаю  я,-  она  меняет
  местами символы, стоящие до и после курсора, после чего перемещает курсор  на
  один шаг вправо.
       - Тогда,- догадался Алеша,- нажатием клавиш <GOLD>, <UNSWAP> можно  про-
  делать обратную операцию - также поменять местами символы, но курсор перемес-
  тится на один шаг влево.
       - Но мне  непонятно,  почему  у  клавиши  <ВК>,-  замечает  Алеша,-  два
  названия? Что там можно еще придумать?
       - Во-первых,- отвечаю я,- клавиша <ВК> работает  обычным  образом,  т.е.
  "вводит" командную строку в клавиатурный монитор. Но в  отличие  от  обычного
  режима, когда символ "ВК" завершает командную, строку, при использовании  SL-
  драйвера нажатие клавиши <ВК> вводит командную  строку  при  любом  положении
  курсора.
       Если же мы нажмем клавиши <GOLD>,<TRUNC>,  то  будет  введена  командная
  строка от начала до текущего положения курсора. Оставшаяся часть будет  отсе-
  чена (trunc) и пропадет совсем.
       - Вот и все клавиши,- говорит Алеша,- которые показаны на картинке HELP.
  Мы про них все рассказали.
       - Не совсем,- останавливаю я его,- есть еще программируемые клавиши.






       11.4. Программируемые клавиши



       - А это что такое?- спрашивает Алеша.
       - Дело в том,- раскрываю я секрет,- что SL-драйвер позволяет переопреде-
  лять значения алфавитно-цифровых клавиш таким  образом,  что  одному  символу
  будет соответствовать строка длиной до 15 символов.
       - Это значит, что теперь вместо набора строки, например DIR/FU/BL/VOL, я
  могу определить, что ей соответствует символ "?",  и  затем  вызывать  ее  на
  экран только нажатием этого символа.
       - Совершенно верно,- продолжаю я,- эти символы выбираются пользователем.
  Так как такие переопределенные символы не должны мешать нормальной  работе  с
  KMON, то допустимое их количество - пять - является и необходимым и достаточ-
  ным.
       - Тогда сразу вопрос,- оживился Алеша,- как это сделать?
       - А это ты спроси у программы LET,- отвечаю я,- надеюсь, теперь ты дога-
  дался, почему она так называется?
       - Для того чтобы программа LET смогла мне ответить,- говорит Алеша,-  ее
  нужно запустить. Так как она появилась в V5.0, то в  качестве  команды  можно
  использовать имя программы. А ключ должен указывать,  что  нам  необходимо  -
  HELP (помощь).


                                     - 284 -
           RT-11, A step by step        Advances Editor   14-Nov-92


  +---------------
  !  .LET /HELP<ВК>
  !
  !  LET _X=string  Substitutes 'string' for 'X'
  !
  !  Note: '_' is used to inhibit substitution for 'X'
  !  X/D[elete]          Clears definicion of 'X'
  !  /D[elete]:ALL       Clears all definitions
  !  /H[elp]             Prints this HELP text
  !  /L[ist]             Displays current definitions
  !

  Вот и прекрасно,- говорит Алеша,- достаточно перевести это сообщение на русс-
  кий язык, и все станет ясно.
       Во-первых, для переопределения символа нужно ввести команду "LET", через
  пробел символ, который переопределяется, знак равенства  и  строку,  значение
  которой присваивается этому символу. Здесь же замечание:  используйте  символ
  подчеркивания '_' перед вводом определяемого символа для  запрещения  подста-
  новки вместо него строки.
       Во-вторых, здесь же приведен полный список команд, которые могут  сокра-
  щаться до одного символа, доступных пользователю.
       Команд нужно немного. Кроме определения символа, которое мы уже разобра-
  ли, нужно научиться удалять из таблицы один или сразу все определенные симво-
  лы, а также посмотреть на экране таблицу определенных символов. Что  я  и  не
  замедлю сделать.

  +---------------
  !  .LET /LIST<ВК>
  !
  !  Symbol       Value
  !  ------   -------------
  !    ?      DIR/FU/BL/VOL
  !    >      COP/VER/SLOW
  !    &      DIR/BAD/FILE
  !

       А так как синтаксис команд очень простой, то для примера я просто  опре-
  делю новый символ.

  +---------------
  !  .LET _#=DIR/SORT:NAM<ВК>
  !  -
  !

       - Молодец Алеша,- говорю я,- мне к твоему  рассказу  остается  добавить,
  что SL-драйвер выполняет только подстановку строки  вместо  символа.  Поэтому
  две строки можно склеивать и/или редактировать средствами SL-драйвера.
       Кроме того, программа LET нужна только для программирования  символов  и
  просмотра таблицы определений, поэтому в малых системах ее можно  держать  на
  отдельной дискете.



                                     - 285 -
           RT-11, A step by step          Text Formater   14-Nov-92


                           12. ФОРМАТИРОВАНИЕ ТЕКСТОВ





       Чем бы не занимался человек, использующий ЭВМ,  текст  еще  долго  будет
  оставаться одним из основных видов отображения информации и  занимать  значи-
  тельное место в его работе. Не нужно  убеждать,  что  аккуратно  отпечатанный
  текст с ровными правым и левым краями, одинаковыми отступами  и  разделенными
  страницами, с собранным, как в книге, оглавлением и аннотацией воспринимается
  значительно легче и лучше, чем тот же текст, написанный от руки. Но  значение
  программы подготовки документов  DOC  значительно  больше.  Она  позволяет  в
  какой-то мере автоматизировать сборку в один документ разрозненны ранее  наб-
  ранных текстов. Она позволяет однажды набранный текст использовать и  отдель-
  но, например в виде письма или статьи, и в то же  время  несколько  отдельных
  текстов (в виде файлов) собрать в один с общим оглавлением и общей нумерацией
  страниц. При этом не потребуется каких-либо действий с исходными или выходны-
  ми файлами. Это позволяет экономить время и  распараллеливать  работу  как  в
  пространстве, так и во времени.
       Фирма DEC поставляла программу DOC (DOCUMENT) вплоть до третьей  версии.
  Но разработанная Г.Кляйде (Clyde.G.)  и  Дж.Роуби  (Jr.Roby)  в  Университете
  Западной Вирджинии в 1969 году для компьютеров PDP-8 с операционной  системой
  OS-8, доработанная Б.Клементсом (B.Clements) и перенесенная в RT-11  Л.Уэйдом
  (L.Wade), Е.Поллаком (E.Pollack) и др., система форматирования текстов RUNOFF
  стала завоевывать все большую популярность, и такого  рода  системы,  которые
  стали называться текстовыми процессорами  (WORDPROCESSOR),  были  выделены  в
  неподдерживаемые утилиты и поставляются отдельно. Здесь также  следует  отме-
  тить текстовой процессор  PROSE,  разработанный  фирмой  OREGON  MINICOMPUTER
  SOFTWARE.
       Программа DOC была написана на языке  FORTRAN  и  поставлялась  в  таком
  виде, чтобы пользователь с помощью ответов на вопросы мог легко подстроить ее
  под свои требования. Так, за прошедшее время появилось значительное количест-
  во версий, и мы будем описывать ту версию, которая поставляется в ОС РАФОС  и
  ОСДВК. Коррекции, которые вносились в нее  с  29  мая  1979года  по  23  июня
  1981года касались в основном титульных листов, листов утверждений и  оглавле-
  ния в соответствии  с  советскими  стандартами  на  оформление  документации.
  Средства, которые читатель уже имеет в своем распоряжении, помогут ему  найти
  отличие своей версии от нашей. В любом случае установить истину уже не предс-
  тавляется возможным.

       Итак, определим те понятия, с которыми мы будем оперировать. Мы  впервые
  сталкиваемся с понятием МЕТАФАЙЛА. Метафайл - это  файл,  который  перед  его
  использованием требует предварительного преобразования. В данном случае текс-
  товой файл содержит некоторые директивы (команды) для программы DOC, и  преж-
  де, чем текст напечатать, файл необходимо преобразовать с  помощью  программы
  DOC. В остальном это такой же текстовой файл, как и другие, и создается любы-
  ми текстовыми редакторами. Для того чтобы как-то отличить текст  пользователя
  от указаний программе DOC необходим соответствующий признак,  указывающий  на
  директиву, а также небходимо определить синтаксис директивы.
       - Все директивы для программы DOC состоят из 4 символов, первый из кото-
  рых точка.
       - Признаком директивы является  символ  "."  (точка)  в  начале  строки.
  Напомним, что началом строки являются символы "ВК",ПС", которые  можно  найти
  редактором KED. Необходимо следить, чтобы не возникала такая комбинация  сим-
  волов в тексте пользователя. Для того чтобы избежать ее, достаточно поставить
  символ "Пробел" перед точкой.
       - Директива может иметь числовой или текстовой аргумент,  отделенный  от
  нее символом "Пробел".


                                     - 286 -
           RT-11, A step by step          Text Formater   14-Nov-92


       Для того чтобы определить набор директив, которые имеются в вашей  прог-
  рамме DOC, достаточно программой DUMP найти блок, в котором они  перечислены.
  Например, такой:

   SY:DOC.SAV
   BLOCK NUMBER  000027
  000/ 112720 000 . . 5742 005003 161201 100402 *P.-..$~.b....b..*
  020/ 005203 000 . . 0060 110320 005712 001365 *..|..dCe0.P.J.u.*
     / ...... ... . . .... ...... ...... ......
  440/ 101373 005 . . 1372 160300 006200 006200 *{...... z.@`....*
  460/ 005001 000 . . 1456 046517 046056 047111 *.....   .COM.LIN*
  500/ 041056 047 . . 1456 052127 041456 054520 *.BLN.AND.SWT.CPY*
  520/ 044056 053 . . 0456 047120 052056 041517 *.HLV.CPT.APN.TOC*
  540/ 050056 043 . . 1456 046124 052056 046124 *.PAG.TES.STL.TTL*
  560/ 046456 042 . . 1456 044513 044456 052116 *.MID.ATT.SKI.INT*
  600/ 046456 046 . . 1456 040510 052056 052130 *.MRL.MRR.CHA.TXT*
  620/ 041456 047 . . 2056 046102 051056 052111 *.CLN.LST.TBL.RIT*
  640/ 052056 052 . . 0456 031116 052056 031102 *.TLU.TCT.AN2.TB2*
  660/ 046056 051 . . 1456 052105 047456 050126 *.LIS.JMP.SET.OVP*
  700/ 051056 051 . . 2056 047106 042056 031106 *.RIS.TAB.DFN.DF2*
  720/ 041456 046 . . 6202 004634 000000 001164 *.CPL7.>T.L....t.*
  740/ 007550 046 . . 7550 071571 007550 030006 *h..Mh..Mh.ysh..0*
  760/ 007550 066 . . 7550 046410 004634 000007 *h..mh.rlh..M....*

       Теперь, создавая текст, например, этой книги, попробуем выразить средст-
  ва, которые нам нужны.






       12.1. Директивы размещения текста



       Указывать, что текст должен быть выровнен по  левому  и  правому  краям,
  наверное, не нужно, программа DOC должна об этом сама догадаться. Но  необхо-
  димо, например, указать, что начинается новый абзац, т.е.,  что  далее  текст
  должен начинаться с новой строки и, желательно, с отступом (красная  строка).
  Поэтому мы прямо укажем директиву LINE - строка:

  .LIN N

  аргумент "N" при этом указывает, сколько строк нужно пропустить перед абзацем
  (по умолчанию N = 1). Текст при этом будет начинаться с красной строки. Аргу-
  мент "N" может изменятся от 0 до 72  (количество  строк  на  странице).  Если
  новый абзац начинается на другой странице, то пропуска строк от начала  стра-
  ницы не происходит.

       Однако часто нужно, чтобы абзац начинался с начала строки (без отступа),
  например после рисунка. Соответственно сконструируем директиву Begin  LiNe  -
  начало строки:

  .BLN N

  в остальном эта директива будет совпадать по действию с директивой .LIN.

       Ну, а если нам нужно перепрыгнуть через несколько  строк,  например  для


                                     - 287 -
           RT-11, A step by step          Text Formater   14-Nov-92


  того, чтобы потом вклеить фотографию. То  нужно,  чтобы  текст  перепрыгивал,
  оставляя место, даже если будет переход  на  следующую  страницу.  Подходящее
  английское слово для этой директивы SKIp - прыжок.

  .SKI N

  Если при этом будет переход на новую страницу,  то  "DOC"  оставит  свободное
  место "N" строк, начиная с начала страницы.

       Все это хорошо! Мы имеем средства для превращения произвольно написанно-
  го текста в ровную полосу, размеченную на страницы,  разбитую  на  абзацы,  с
  отступом или без него. Мы можем даже оставить место для приклеивания фотогра-
  фии. А если вместо фотографии мы хотим нарисовать рисунок, используя для это-
  го обычные символы (ведь мы можем это сделать на  обычной  пишущей  машинке).
  Короче говоря, нужно средство, позволяющее на время отказаться от  форматиро-
  вания. В качестве директивы для этого используется сокращение  от  английских
  слов ShoW Text - показ текста.


      Этот      текст       программой      "DOC"
   не               форматировался,        потому что
       перед    ним в начале      строки стояла
         директива:                 .SWT 2

  Следует отметить, что для директивы .SWT есть свои ограничения.
       - Если текст будет шире, чем принятая ширина колонки, то он будет  соот-
  ветственно обрезан. Это связано с тем, что при печати  в  две  колонки  (12-й
  формат), текст на одной колонке может перекрыть текст на другой колонке.
       - Текст не должен содержать символов горизонтальной табуляции "ГТ".
       - Текст не должен содержать пустых строк (т.е. содержащих только символы
  "ВК","ПС"). Для того чтобы пропустить строку, она должна  содержать  хотя  бы
  один пробел.
       Действие директивы .SWT заканчивается по первой отличной от нее директи-
  ве. При этом внутри области действия директивы  .SWT  допускается  применение
  директив .TES и .JMP.

       Конечно, с ограничениями работать трудно. Например, мы должны напечатать
  широкий листинг программы или что-нибудь подобное. Тогда  мы  должны  принять
  меры предосторожности - нужно сразу перейти на новую страницу, чтобы у нас  в
  распоряжении был полный лист.  В  этом  случае  нам  необходимо  использовать
  директиву .LST (LiST). При этом снимаются ограничения на длину строки  -  она
  может состоять из 128 символов, а также может содержать символы  горизонталь-
  ной табуляции.

       Теперь подумаем, как нам еще хотелось бы разместить текст. Выбор  у  нас
  небольшой. Например, строку текста можно разместить по середине колонки.  Для
  этого используем директиву .MID (от  английского  MIDdle  -  середина),  а  в
  качестве аргумента используем нужный нам текст строки, как показано ниже:

   .MID этот текст должен быть посередине

       и в результате получим:

                        этот текст должен быть посередине

       В служебных записках, письмах, при  написании  эпиграфов  и  т.п.  текст
  бывает необходимо расположить по правому краю. Для этого  нужно  использовать
  директиву .RIT (от английского RIghT - правый). Однако если строки у нас раз-
  ной длины будут выровнены по правому краю,  то  может  получиться  некрасиво.


                                     - 288 -
           RT-11, A step by step          Text Formater   14-Nov-92


  Тогда можно воспользоваться следующим приемом.
       Строкой в данном случае считается часть текста, заключенная между первым
  и последним символами, отличными от  пробела  или  горизонтальной  табуляции.
  Таким образом, чтобы сделать строки  одинаковой  длины,  достаточно  в  конец
  строки добавить необходимое количество пробелов и закончить  ее  каким-нибудь
  малозаметным символом, например точкой. Вот как это выглядит:

   .RIT этот текст будет    .
   .RIT выровнен по         .
   .RIT правому краю,       .
   .RIT но красиво          .
                                                         этот текст будет    .
                                                         выровнен по         .
                                                         правому краю,       .
                                                         но красиво          .






       12.2. Директивы размещения страниц



       Часто, преобразовав наш текст с помощью программы DOC, мы видим, что  он
  расположился на страницах не очень красиво. Например, нам хотелось бы,  чтобы
  отдельные куски заведомо начинались с новой колонки или страницы. Сделать это
  просто, если использовать директивы .CLN (от английского CoLlumN  -  колонка)
  или .PAG (от английского PAGe - страница).  Следует  отметить,  что  различие
  между двумя директивами .PAG или .CLN проявляется только  при  форматировании
  текста в две колонки. И здесь, как и в случае с директивой .SWT, пустые стра-
  ницы не будут учитыватся. Чтобы пропустить страницу, на ней должен быть  хоть
  какой-нибудь текст.

       Нарисовав рисунок и указав директивой .SWT, что его не нужно выравнивать
  по краям, мы с ужасом замечаем, что перевод страницы попал  как  раз  на  его
  середину или, что еще хуже, последняя  строка  рисунка  оказалась  на  другой
  странице. Чтобы выйти из этого положения, нужно как-то указать программе DOC,
  что наш текст - рисунок занимает NN строк  и  поэтому  его  нельзя  разрывать
  посередине. Так и сконструируем директиву TEst String NN:

  .TES NN

       Если мы укажем эту директиву перед нашим рисунком, то программа DOC сна-
  чала проверит, сколько строк осталось на странице, и, если  рисунок  не  вле-
  зает, то перейдет на новую колонку или страницу.

       И уж если быть привередливыми до конца, то хотелось бы, чтобы на  каждой
  странице стояло название нашей книги. Сделать это можно, если указать  подза-
  головок - SubTitLe - директивой.

  .STL это моя книга

  Текст, используемый в качестве аргумента этой директивы, будет распечатывать-
  ся на всех последующих страницах. Для того  чтобы  изменить  его,  достаточно
  дать новую директиву .STL с другим текстом или без него  (если  нужно  совсем
  отказаться от распечатки подзаголовка).


                                     - 289 -
           RT-11, A step by step          Text Formater   14-Nov-92



       12.3. Директивы описания структуры



       Все, что мы делали до сих пор, могут сделать достаточно мощные редакторы
  текста. Но мы говорили, что программа DOC  сможет  сама  собрать  оглавление.
  Тогда нам нужны средства для описания структуры нашей книги.
       Что же входит в понятие структуры? Для обычной книги  -  это  разделы  и
  подразделы, пункты и подпункты, аннотация в начале книги и  приложение  в  ее
  конце, а также более мелкие структурные единицы - примечания и  перечисления.
  И наконец, нужно указать, что программа DOC должна собирать оглавление.
       И чтобы не быть голословными, будем описывать директивы в  том  порядке,
  как они встречаются в книге.

       Первое, что мы должны сделать - это указать  программе  DOC,  что  нужно
  собирать оглавление (если мы этого хотим). Продолжая конструировать директивы
  из английских слов и  предложений,  найдем,  что  в  англоязычной  литературе
  оглавление называют Table Of Contents или просто Contents (что созвучно наше-
  му - контекст). Сокращая это называние до трех  букв,  получим  -  .TOC.  Эта
  директива аргументов не имеет и указывается один раз в начале текста.

       Первый небольшой раздел в книге - аннотация или введение. В ОС РАФОС  он
  назван АННОТАЦИЯ. В оригинале он назывался  INTroduction  -  введение.  Очень
  простое сокращение .INT, и перед набранным текстом появится заголовок  "Анно-
  тация". Директива также не имеет аргументов и указывается один  раз.  Следует
  отметить, что текст, следующий между директивами .INT  и  первой  директивой,
  определяющей раздел или подраздел, будет располагаться перед  оглавлением.  В
  тексте можно использовать любые директивы размещения текста. Аннотация закан-
  чивается по директиве, указывающей начало  первого  раздела  или  подраздела,
  которая попутно вызывает распечатку оглавления.

       Разделы, самые крупные структурные единицы  книги.  Каждый  раздел  (это
  может быть, например, глава) имеет номер и название. И если о  номере  должна
  позаботиться программа DOC, то название мы должны указать в качестве аргумен-
  та директивы, которая называется ChaPTer - глава.

  .CPT название раздела

  Программа DOC разместит указанное нами название посередине строки  и  снабдит
  его номером. Некоторые версии программы DOC каждый раздел  начинают  с  новой
  страницы.

       Более мелкие структурные единицы - подразделы, пункты и подпункты  -  не
  имеют персональных директив. Они объединены  одной  директивой  .HLV  (Header
  LeVel - уровень заголовка) с числовым  аргументом,  который  может  принимать
  значение: 1 - для подраздела, 2 - для пункта и 3 - для подпункта. В  качестве
  названия используется текст, следующий за директивой .HLV  и  заканчивающийся
  по любой другой директиве. При этом номера  разделов,  пунктов  и  подпунктов
  будут записываться следующим образом.


                                     - 290 -
           RT-11, A step by step          Text Formater   14-Nov-92


     AA.BB.CC.DD.   название раздела (пункта)
     !  !  !  !
     !  !  !  +---- N подпункта    ( .HLV 3 )
     !  !  +------- N пункта       ( .HLV 2 )
     !  +---------- N подраздела   ( .HLV 1 )
     +------------- N раздела      ( .CPT   )

  Соответственно названия разделов и подразделов выводятся в оглавление с  ука-
  занием номера страницы, где соответствующий раздел начинается.

       Случаи, которые мы рассмотрели, являются самыми обычными и простыми.  Но
  есть два случая, которые требуют либо  специальной  директивы,  либо  какого-
  нибудь приема.
       Во-первых, нам хотелось бы пронумеровать абзац, но таким образом,  чтобы
  ни номер, ни что-либо другое в оглавление не выводилось. Такая нумерация час-
  то применяется при перечислениях для удобства ссылок на них в тексте.  Дости-
  гается это следующим приемом: после директивы .HLV с соответствующим числовым
  аргументом на следующей строке указывается директива .LIN 0 или  .BLN  0,  за
  которой следует текст абзаца.
       Второй случай представляет обратную  ситуацию.  Хотелось  бы  вывести  в
  оглавление строку или группу строк для его оформления, чтобы было красиво, но
  так, чтобы в отформатированном тексте этой строки не  осталось.  Нужно  пони-
  мать, что если строка выводится между какими-либо строками в  оглавлении,  то
  директива с текстовым аргументом должна располагаться в  любом  месте  текста
  между соответствующими директивами .HLV  или  .CPT.  Название  директивы  по-
  видимому, образовалось из фразы "Text Copy to Table", и  в  сокращенном  виде
  она записывается так:

  .TCT дополнительно текст в оглавлении

  Следует учесть, что если после директивы .HLV или .CPT указывается  директива
  .TCT, то в оглавлении перед выводимым текстом будет пропущена пустая  строка.
  Если директивы .TCT идут подряд, то этого не просходит.

       Можно отметить и более мелкие структурные единицы - это различного  рода
  перечисления и уточнения, которые нет смысла нумеровать и выводить в оглавле-
  ние, но необходимо как-то выделить в тексте.
       Начем с простого перечисления. При его форматировании левый край немного
  сдвигается вправо и в начале такого абзаца ставится дефис. В качестве примера
  перечислим все мелкие структурные единицы.

     - простое перечисление - когда каждый абзац выделяется дефисом в  начале
       первой строки, например так, как выполнен этот абзац.

  ОПРЕДЕЛЕНИЕ
     - когда в одной строке записывается термин, а в  следующих  его  строках
       определение, так же как в простом перечислении. Таким образом выполнен
       этот абзац.


       Примечание. - когда для выделения в начале абзаца пишется слово  "ПРИМЕ-
  ЧАНИЕ", а дальше текст форматируется обычным  образом.  Так  выполнялся  этот
  абзац.


  А так это выглядело в исходном тексте:


                                     - 291 -
           RT-11, A step by step          Text Formater   14-Nov-92


   .AND 1
   простое перечисление - когда каждый абзац выделяется дефисом в
   начале первой строки, например так, как выполнен этот абзац.
   .TBL ОПРЕДЕЛЕНИЕ
   когда в одной строке записывается термин, а в следующих его
   строках определение, так же как в простом перечислении.
   Таким образом  выполнен этот абзац.
   .ATT
   - когда для выделения в начале абзаца пишется слово "ПРИМЕЧАНИЕ",
   а дальше текст форматируется обычным образом. Так выполнялся этот
   абзац.

       Как видно, простое перечисление указывается  с  помощью  директивы  .AND
  (по-русски значит "И").

       Определение записывается одной директивой .TBL, которая  по  своей  сути
  является составной.

   .TBL термин            ==>      .BLN 1
   текст определения               термин
                                   .AND 0
                                   текст определения

       И последняя директива этой группы указывает нам о том, что далее следует
  примечание. Директива называется .ATT, аргументов не имеет и единственное  ее
  действие - это напечатать в начале абзаца слово "ПРИМЕЧАНИЕ:". Ее вполне мож-
  но заменить следующим образом.

   .LIN 1
   ПРИМЕЧАНИЕ:
   далее текст примечания

  Легко заметить, что нельзя определить, где  кончается  примечание.  Например,
  Дейкстра в таких случаях, чтобы указать конец примечания, явно,  пишет  фразу
  "Конец примечания". Это удобно и себя оправдывает.

       И наконец, книга может заканчиваться приложением некоторого  справочного
  материала. В результате мы должны получить  напечатанной  в  начале  страницы
  слово "Приложение" и его номер, а посередине следующей строки название прило-
  жения. Английское слово APPEND дословно означает "прилагать к письму".  Соот-
  ветственно сконструируем директиву:

  .APN название приложения

  А за номером пусть последит программа DOC. После директивы .APN можно исполь-
  зовать любые директивы размещения текста.  Следует  отметить,  что  директива
  .APN обнуляет счетчик разделов и подразделов, поэтому если после нее  указать
  директиву .CPT, то в оглавлении этот раздел будет иметь номер 1.



                                     - 292 -
           RT-11, A step by step          Text Formater   14-Nov-92


       12.4. Служебные директивы



       Наш рассказ о возможностях программы DOC был бы неполным, если бы  умол-
  чали о служебных директивах. Они не имеют непосредственного отношения к текс-
  ту, но позволяют более профессионально управлять и распечаткой текста, и фай-
  лами.
       Первое, что потребуется от профессионала, - это аккуратность.  В  каждом
  файле, даже если это простой текст, а не программа, необходимо оставить  след
  - когда и кто этот файл создал, когда и кто какие изменения  в  него  вносил.
  Конечно, вовсе не хочется, чтобы эта информация выводилась в  распечатываемый
  текст. Нужно, чтобы она оставалась в виде комментария к основному тексту. Эта
  возможность обеспечивается директивой .COM (Comment -  коментарий).  А  текст
  комментария записывается в качестве аргумента. Например, вот так:

  .COM этот текст является комментарием

  Следует отметить, что программа DOC во время своей работы выводит эти  строки
  на экран системного терминала. Поэтому  комментарии  можно  использовать  как
  признаки, какая часть текста в данный момент обрабатывается.

       Текст, полученный с помощью программы DOC напечатан очень  плотно.  Если
  сравнивать его с пишущей машинкой, мы бы сказали, что он напечатан через один
  интервал. Для экономии бумаги это хорошо, но такой  текст  трудно  редактиро-
  вать, и, например, в редакциях просят печатать его через строчку  (через  два
  интервала). Программа DOC позволяет управлять  этим  режимом  форматирования.
  Директива .JMP (от английского JUMP - прыжок)  позволяет  при  форматировании
  перескакивать через указанное в ее аргументе число строк.  Эта  директива  не
  влияет на аргументы остальных директив и  может  указываться  в  любом  месте
  текста.

       Можно также указывать и ширину колонки, в которую  форматируется  текст.
  Директива .MRR (MaRgin Right - правый край) имеет не один, а целых пять  чис-
  ловых аргументов, которые задают:

  первый
     - длину строки для директив .LIN, .BLN, .SWT, .APN, .MID, .RIT, .CPT; по
       умолчанию для 11-го формата равно 60, для 12-го формата - 58;

  второй
     - зарезервирован для дальнейшего использования; по умолчанию  для  11-го
       формата равно 44, для 12-го формата - 44;

  третий
     - длину строки для директив .AND, .TBL; по умолчанию для  11-го  формата
       равно 51, для 12-го формата - 49;

  четвертый
     - длину строки для директив .AN2, .TB2; по умолчанию для  11-го  формата
       равно 44, для 12-го формата - 42;

  пятый
     - длину строки для всех директив .HLV; по умолчанию  для  11-го  формата
       равно 40, для 12-го формата - 40.

       Не осталась без внимания и левая граница  форматируемого  текста.  Точно
  так же директива .MRL (MaRgin Left - левый  край)  своими  пятью  аргументами
  указывает номер позиции (столбца) от края листа, с которой  необходимо  начи-


                                     - 293 -
           RT-11, A step by step          Text Formater   14-Nov-92


  нать строку:

  первый
     - левую границу для директив .LIN, .BLN, .SWT, .APN, .MID, RIT, .CPT; по
       умолчанию для 11-го и 12-го форматов равно 1;

  второй
     - зарезервирован для дальнейшего использования; по умолчанию для 11-го и
       12-го форматов равно 12;

  третий
     - левую границу для директив .AND, .TBL1; по умолчанию для 11-го и 12-го
       форматов равно 10;

  четвертый
     - левую границу для директив .AN2, .TB2; по умолчанию для 11-го и  12-го
       форматов равно 17;

  пятый
     - левую границу для всех директив .HLV; по умолчанию для 11-го  и  12-го
       форматов равно 16.






       12.5. Структурирование файлов



       Конечно, описанные возможности программы DOC были  бы  малоэффективными,
  если бы не было возможности объединять исходные текстовые файлы тем или  дру-
  гим способом. Пользователю предлагаются два основных способа.
       Первый - исходные файлы можно выстроить цепочкой. После обработки перво-
  го файла программа DOC переключается на второй, по завершению работы с ним  -
  на третий и т.д. При этом результат форматирования записывается в один выход-
  ной файл. Для этого  каждый  файл,  кроме  последнего,  должен  заканчиваться
  директивой CHAin - канал, цепочка.

   .CHA DEV:FILNAM.TYP

  имеющей в качестве текстового аргумента спецификацию следующего  файла.  Этот
  прием применяется, когда известна структура выходного файла и она  неизменна.
  Основная цель такого подхода -  облегчить  редактирование,  разделив  большой
  файл на несколько кусков.
       Второй способ предоставляет более  широкие  возможности.  Программа  DOC
  может прервать обработку основного файла и переключиться на файл, указанный в
  директиве COPY:

   .CPY DEV:FILNAM.TYP

  после завершения  обработки  которого,  программа  DOC  продолжает  обработку
  основного файла. Таким образом, эта директива позволяет выполнять  вставки  в
  основной файл. В результате мы можем иметь несколько самостоятельных  файлов,
  содержащих, например, тексты докладов, которые можно использовать независимо,
  и в то же время с помощью небольшого файла, содержащего в основном  директивы
  .CPY, тексты докладов собираются в  один  сборник.  Причем  порядок  докладов
  зависит только от порядка директив .CPY. В таких случаях, как правило, основ-


                                     - 294 -
           RT-11, A step by step          Text Formater   14-Nov-92


  ной файл имеет незначительный объем и легко редактируется. Основной файл этой
  книги приведен в приложении 4.
       Соглашения об умолчаниях в спецификациях файлов несколько отличаются  от
  системных. Программа DOC, если в спецификации файла не указано имя  устройст-
  ва, будет искать файл не на устройстве DK:, а на том же устройстве, с которо-
  го был прочитан основной или первый (в случае директивы .CHA) файл. Тип файла
  по умолчанию считается .DOC.






       12.6. Работа с программой DOC



       Все, что мы делали до сих пор, - это  набор  текста  (с  директивами)  в
  текстовый файл. Программа DOC нужна только в последний момент для  преобразо-
  вания набранного нами текста в красивый документ, как, например, книга, лежа-
  щая перед вами. Во второй и третьей версии RT-11 программа DOC поддерживалась
  командой KMON - DOCUMENT. Начиная с версии V5.0, для команды можно  использо-
  вать имя программы - DOC или вызывать ее с помощью команды RUN и  обязательно
  нужно сказать, какой файл обрабатывается:

  .DOC DX1:ROMAN.DOC

  и отформатированный текст начинает выводиться  на  печатающее  устройство.  А
  если быть точным - программа DOC выводит отформатированный текст на устройст-
  во DPR: (Document-PRinter) с именем первого входного файла и типом  .DPR.  По
  умолчанию устройством DPR: является печатающее устройство.
       Первые версии программы DOC ключей не имели. Версии, которые распростра-
  нены сейчас, могут иметь ключи, выбирающие отдельные возможности форматирова-
  ния. Для того чтобы их узнать можно попробовать вызвать программу DOC с  клю-
  чем /H[elp].
       - Андрей Германович,- очнулся Алеша,- мы же говорили, что программирова-
  нием заниматься не будем. А ведь текст нашего романа или книги с  директивами
  для программы DOC не что иное как программа. Ведь  мы  же  запрограммировали,
  каким образом программа DOC должна преобразовать наш текст в готовую книгу.
       И так как мы не можем привести реальный текст с директивами, потому  что
  это и есть наша книга, то, может быть, мы приведем сведения о  том,  как  она
  создавалась и обрабатывалась.
       - Ты прав Алеша,- говорю я,- в качестве примера  можно  привести  только
  основной файл книги BOOK1V.DOC (см.приложение 4), а остальные файлы покажем в
  виде каталога.


                                     - 295 -
           RT-11, A step by step          Text Formater   14-Nov-92


       14-Oct-89
      Volume ID: RT-11 BOOK 1
      Owner    : WORK  Volume
     BOOK1V.DOC    12  01-Oct-89      1GL05 .DOC   137  12-Oct-89
     INTROD.DOC     8  05-Oct-89      1GL06 .DOC    94  12-Oct-89
     1APN1 .DOC    19  14-Oct-89      1GL07 .DOC   177  13-Oct-89
     1APN2 .DOC    11  14-Oct-89      1GL08 .DOC   197  13-Oct-89
     1APN3 .DOC    64  06-Oct-89      1GL09 .DOC   120  14-Oct-89
     1APN4 .DOC    13  06-Oct-89      1GL10 .DOC   190  14-Oct-89
     1GL01 .DOC   157  12-Oct-89      1GL11 .DOC    98  14-Oct-89
     1GL02 .DOC    93  12-Oct-89      1GL12 .DOC    60  14-Oct-89
     1GL03 .DOC   133  12-Oct-89      1GL13 .DOC    28  14-Oct-89
     1GL04 .DOC   193  12-Oct-89      1GL14 .DOC    25  14-Oct-89
       20 Files, 1829 Blocks
       4189 Free blocks

  И чтобы читатели смогли оценить удобства  компьютерной  обработки  текста,  я
  приоткрою дверь "творческой кухни".
       Книга писалась на персональном компьютере "Электроника-85". Преобразова-
  ние каждой главы, которая хранится в виде отдельного файла, в красивый вид  с
  помощью программы DOC занимало от 1 до 3,5 минут. А так  как  текст,  который
  печатается на бумаге (красивый),  существенно  отличается  от  того,  который
  находится в файле, то  редактирование  выполнялось  "дедовским"  способом  на
  бумаге. Здесь следует заметить, что писатель, использующий  компьютер,  неза-
  метно для себя выполняет и работу технического редактора по размещению текста
  в книге.
       Полностью книгу программа DOC собирает в один файл с оглавлением и нуме-
  рацией страниц за 45 минут, в результате чего получается файл размером  почти
  2000 блоков (один миллион символов). А для того, чтобы напечатать этот текст,
  состоящий из 360 страниц, на принтере Robotron-K6311 понадобилось 6,5 часов.






       12.7. Сообщения об ошибках



       Программа DOC написана в основном на языке ФОРТРАН, поэтому  расшифровку
  сообщений от ошибках следует искать в описании транслятора ФОРТРАН.
       Ошибки, которые относятся  к  форматируемому  тексту,  обрабатываются  в
  соответствии с правилами языка ФОРТРАН. Если программа DOC обнаружит ошибку в
  обрабатываемом тексте, то она выводит на экран сообщение с  указанием  номера
  строки в файле, затем строку, в которой обнаружена  ошибка,  и  слово  "PAUSE
  --". Программа DOC будет ожидать реакции пользователя.  Если  нажать  клавишу
  <ВК>, то работа программы будет продолжена. Часто это имеет смысл, потому что
  частично обработанный текст покажет причины ошибок. Таким образом, поиск оши-
  бок в текстовом исходном файле не отличается от отладки программы.



                                     - 296 -
           RT-11, A step by step                PATCHer   14-Nov-92


                            13. ЗАПЛАТА НА РУБАШКУ,



                                       или
                                 Программа PATCH


       - Добрый день,- обращаясь ко всем, сказал Алеша, входя в машинный зал.
       Алеша уже приходит в ВЦ, как на работу, и не только в те дни,  когда  мы
  изучали операционную систему, но и в свободное время для приобретения практи-
  ческих навыков в применении ЭВМ при подготовке текстов. За красиво  оформлен-
  ные с помощью программы DOC сочинения я уже получал выговоры от его  учитель-
  ницы литературы и русского языка. Но надеюсь, что эта  книга  поможет  понять
  полезность такого рода человеческой деятельности.  Алеша  готовит  с  помощью
  редактора текста и форматера все свои доклады и сообщения по школьным предме-
  там, а также помогает в работе вычислительного центра.
       - Андрей Германович,- Алеша разыскал меня,- здравствуйте, а у  меня  еще
  есть вопросы.
       - Здравствуй, Алеша! Задавай свои почемучки.
       - Не почемучки, а зачемучки,- передразнил Алеша,- мы переписывали  прог-
  рамму PATCH, а ничего про нее не говорили. Зачем она нужна?
       - Да, Алеша,- отвечаю я,- нам "не повезло". У нас и диски не  портились,
  и символ CTRL/O в текстовой файл не попадал. Но даже если мы не программисты,
  то программа PATCH нам может пригодиться.
       PATCH в переводе означает "заплата". И как можно догадаться - это редак-
  тор двоичных файлов, т.е. с его помощью можно исправлять любые двоичные  мас-
  сивы, расположенные на устройствах файловой структуры с  произвольным  досту-
  пом. Если быть более точным, то все операции с  программой  PATCH  похожи  на
  операцию лазерным скальпелем в собственном глазу,  и  необходимо  помнить  об
  этом.
       Один из первых случаев, когда пользователь может обратится к этой  прог-
  рамме, - это перестроить системные часы.
       - Как,- удивился Алеша,- разве системные часы так просто перестроить.  Я
  всегда замечал, что они отстают примерно на 15%. Как я понимаю, это связано с
  разной частотой питающей сети, от которой работает  таймер.  На  американском
  континенте она равна 60гц, а в Европе - 50гц.
       - Ты очень наблюдательный,- говорю я,- но у нас хорошая система. И  часы
  можно исправить за одну минуту. Для этого достаточно в ячейке 300 (восьмерич-
  ное) от начала резидентного монитора в пятом  бите  установить  единицу,  или
  попросту записать число 40 (восьмеричное). Чем мы и займемся.

       Клавиатурный монитор не поддерживает программу PATCH. Поэтому вызвать ее
  необходимо, как обычную программу пользователя. Но как определить, где  начи-
  нается в файле RT11SJ.SYS резидентный монитор.  Система  построена  так,  что
  независимо от построения монитора (и независимо от его типа XM, FB, SJ и др.)
  в его середине найдется блок, который  начинается  с  чисел  000167,  ХХХХХХ,
  000000 и далее большое количество нулей, а  с  адреса  304  магические  числа
  177560, 177562, 177564, 177566, которые представляют собой адреса  системного
  терминала (хотя в редких случаях они могут быть другими).
       Вот где помогла нам программа DUMP и, запомнив номер блока файла,  начи-
  наем работать скальпелем.
       У нас одна из старших версий системы (V5.1),  поэтому  мы  можем  просто
  набрать команду:


                                     - 297 -
           RT-11, A step by step                PATCHer   14-Nov-92


  +---------------
  !  .PATCH SY:RT11SJ.SYS<ВК>
  !  -
  !    FILE NAME --
  !    ------------
  !  *^
  !
                            либо для младших версий
  +---------------
  !  .RUN SY:PATCH<ВК>
  !  -
  !    FILE NAME --
  !    ------------
  !  *SY:RT11SJ.SYS<ВК>
  !  -
  !  *^
  !

  Номер блока и адрес ячейки в блоке мы знаем, поэтому можем продолжить диалог.
  Но сначала о языке. Язык команд программы PATCH является  расширенным  языком
  отладчиков и пультовых терминалов фирмы DEC. Его можно смело  использовать  в
  пультовом режиме ЭВМ "Электроника-60" и ДВК. Принятая  фирмой  DEC  стратегия
  требует - прежде, чем записать какое-либо число в ячейку, ее  нужно  открыть,
  прочитав при этом содержимое. Сделать это можно командой.

  +---------------
  !  *36300/ 000000 40<ВК>
  !  -      --------
  !  *^C^C
  !  -
  !

  И оборвав работу программы вводом символа CTRL/C и перезагрузив  систему,  мы
  можем убедиться, что изменения в файле не прошли даром, и если подождем неко-
  торое время, то убедимся, что часы теперь идут правильно.
       - И все так просто,- воскликнул Алеша,- и таким образом можно  исправить
  любой файл и, наверное, любое место на томе.
       - Конечно,- отвечаю я,- но мы допустили некоторые ошибки, поэтому  сразу
  их укажем, а заодно и ключи программы PATCH.






       13.1. Правильный вход и ключи



       Как вызвать программу, мы уже показали. Теперь  отметим  лишь  некоторые
  особенности.
       Программа PATCH делает изменения непосредственно в файле (в нашем  "гла-
  зу"), поэтому входной файл одновременно является  и  выходным.  По  умолчанию
  считается, что исправляемый файл представлен в формате SAV и, соответственно,
  имеет тип .SAV. Однако если у нас специальный файл (например, состоящий толь-
  ко из нулей), системный файл - монитор или драйверы - или же  непосредственно
  блоки на томе, например каталог тома, то необходимо об этом сказать программе
  с помощью ключа /A. Соответственно, если мы хотим работать с абсолютными бло-
  ками тома в качестве спецификации файла, нужно указать только имя устройства.


                                     - 298 -
           RT-11, A step by step                PATCHer   14-Nov-92


  Если мы хотим вносить изменения в оверлейную программу, то при  вызове  прог-
  раммы PATCH желательно указать ключ /O.
       Кроме того, у программы PATCH есть еще два ключа, которые могут помочь в
  работе, если мы хотим проконтролировать свои действия, используя  контрольную
  сумму. Для ее получения необходимо сложить все коды,  имеющиеся  в  файле,  и
  игнорировать перенос в старший разряд. Получившееся число может помочь  отли-
  чить один файл от другого. Это же справедливо и для исправлений,  которые  мы
  вносим.
       Ключ /C - CHEKSUM проверяет нашу работу. Фирма DEC использует  его  сле-
  дующим образом.
       Когда ее разработчики вносят изменения для улучшения работы системы, они
  одновременно подсчитывают контрольную сумму изменений. И  при  посылке  своим
  клиентам сообщения о необходимых изменениях, они также сообщают эту контроль-
  ную сумму. Когда изменения вносятся и указан ключ /C, то  программа  PATCH  в
  конце работы спрашивает правильное значение контрольной суммы.
       Программа PATCH, сравнив свою подсчитанную сумму с введенной нами  конт-
  рольной суммой, не укажет место, где мы ошиблись, но даст знать, что мы долж-
  ны проверить свою работу.
       А если мы не знаем контрольную сумму?  Не  вручную  же  разработчики  ее
  считают? Для того чтобы узнать контрольную сумму  внесенных  нами  изменений,
  достаточно указать ключ /D, и программа PATCH сообщит ее в конце работы.






       13.2. Команды



       Первые команды, которые мы должны узнать, - это, как правильно завершить
  работу с программой. Так, как мы делали до сих пор, - это слишком грубо.
       Если мы редактировали только один файл и больше не хотим ничего  делать,
  то нужно в ответ на звездочку ввести символ "E" - Exit. Но если у нас  работы
  много и один файл сменяется другим, то, указав в ответ на  звездочку  каманду
  "F" - Files, мы можем завершить работу с одним файлом, а программа PATCH зап-
  росит имя следующего файла.

       Для работы с ячейками есть общие правила, которые соблюдаются и в других
  подобных программах фирмы DEC.
       Для открытия ячейки как 16-ти разрядного слова используется символ "/" -
  SLASH или "косая черта". Если же вместо него использовать символ "\" - BACKS-
  LASH или "обратная косая черта", то эта ячейка и все последующие будут откры-
  ты как 8-ми разрядный байт.
       Для закрытия ячейки и, соответственно, внесения в нее изменений  исполь-
  зуется также ряд команд.
       Самым естественным образом после ввода нового кода нажать клавишу <ВК> и
  тем самым закрыть ячейку. Но тогда для того, чтобы открыть новую ячейку, нуж-
  но снова набирать ее адрес.
       Если для закрытия ячейки использовать символ  <ПС>,  то  текущая  ячейка
  будет закрыта и откроется следующая. Она будет открыта, как слово или байт, в
  зависимости от того, как открывалась первая ячейка в этой последовательности.
       Можно и наоборот. Если использовать для закрытия ячейки символ  "^"  (на
  клавиатуре ЙЦУКЕН он находится в нижнем ряду слева на одной клавише с  симво-
  лом Ч), то текущая ячейка закроется и  откроется  предыдущая.  Это  позволяет
  вовремя исправить замеченную ошибку.
       Кроме того, в открытой ячейке может содержаться адрес, в который необхо-
  димо вносить исправления. Например, индексные указатели таблиц. В таком  слу-


                                     - 299 -
           RT-11, A step by step                PATCHer   14-Nov-92


  чае ввод символа "@" закрывает текущую  ячейку  и  открывает  другую,  считая
  содержимое текущей адресом новой, подлежащей редактированию.
       В принципе уже этих команд достаточно для внесения изменений в файлах  и
  томах. Но очень неудобно символы, представленные в ASCII или RADIX-50,  вруч-
  ную переводить в коды.






       13.3. Редактирование символьных кодов



       Когда мы рассматривали кодировки символов,  то  обратили  внимание,  что
  коды ASCII и КОИ-7Н2 отличаются лишь тем, что вместо строчных латинских  букв
  отображаются прописные русские. Первое неудобство возникает, когда  программа
  фирмы DEC на отечественном терминале выводит  английское  сообщение  русскими
  буквами, превращая его в несуразицу. Это легко исправить, потому что  сообще-
  ние находится где-то в файле программы и найти его можно с помощью  программы
  DUMP. А дальше - можно поступить так:
       - открыть первую ячейку (как слово или байт безразлично) и после индика-
  ции программой PATCH содержимого ячейки ввести команду "A", которая  преобра-
  зует его в символы ASCII. Если ячейка  открывалась  как  слово,  то  символов
  будет два. Непечатные символы заменяются знаком "?";
       - для ввода новых символов (латинские, как мы хотели) нужно дать команду
  "C" - CHANGE (замена), которая сразу  напечатает  открывающую  скобку.  После
  чего, мы должны ввести новые символы (один или два). При закрытии ячейки зак-
  роется и скобка. Если русский перевод сообщения не превышает  по  длине  анг-
  лийский, то можно заменить это сообщение на его  русский  эквивалент.  Именно
  таким образом "разрабатывались" операционные системы РАФОС и ФОДОС.
       Например, мы тоже можем исправить программу DUMP так, чтобы  она  вместо
  слов "BLOCK NUMBER" печатала "НОМЕР БЛОКА".  Для  этого  запускаем  программу
  PATCH и


                                     - 300 -
           RT-11, A step by step                PATCHer   14-Nov-92


  +---------------
  !  .PATCH SY:DUMP.SAV<ВК>
  !  -
  !  FILE NAME --
  !  ------------
  !  *3631\ 102 A = B C (Н) <ПС>
  !  *3632\ 114 A = L C (О) <ПС>
  !  *3633\ 117 A = O C (М) <ПС>
  !  *3634\ 103 A = C C (Е) <ПС>
  !  *3635\ 113 A = K C (Р) <ПС>
  !  *3636\ 40  A =   C ( ) <ПС>
  !  *3637\ 116 A = N C ( ) <ПС>
  !  *3640\ 125 A = U C (Б) <ПС>
  !  *3641\ 115 A = M C (Л) <ПС>
  !  *3642\ 102 A = B C (О) <ПС>
  !  *3643\ 105 A = E C (К) <ПС>
  !  *3644\ 122 A = R C (А) <ПС>
  !  *3645\ 40  A =    <ПС>
  !  *3646\ 40  A =    <ПС>
  !  *3647\ 0 <ВК>
  !  *E
  !  .^
  !
       Для символов RADIX-50 ситуация та же. Но для перевода содержимого  слова
  в символы используется команда "X", а для ввода нового значения команда  "P".
  Следует отметить, что в одном слове  упаковывается  по  три  символа  в  коде
  RADIX-50.
       Частные случаи редактирования символьных кодов предусмотрены фирмой DEC.
  Например, редактор KED по умолчанию ищет тип файла .MAC,  т.е.  программу  на
  MACRO-11. Это удобно для программистов.
       - Но ведь я не программист,- замечает Алеша,- пока я только  писатель  и
  мне более удобен тип файла по умолчанию .DOC.
       - Вот именно,- подтверждаю я,- для  того,  чтобы  пользователь  сам  мог
  установить для себя удобные значения, фирма DEC сообщает  адреса  необходимых
  ячеек, поставляя вместе с операционной  системой  файл  CUSTOM.TXT.  Прочитав
  этот файл (а еще лучше его сразу распечатать), можно узнать, какие  параметры
  в программах можно менять. Например, для изменения типа файла по умолчанию  у
  редакторов /KED/K52/KEX эти адреса следующие:

   для  RT-11 V5.1   для  RT-11 V5.4
   ..EEXT = 002352   ..EEXT = 002372  ; для KED
   ..EEXT = 002252   ..EEXT = 002272  ; для K52
   ..EEXT = 001312   ..EEXT = 001310  ; для KEX

       - Вот я и исправлю тип файла,- заторопился Алеша,- у своего редактора:


                                     - 301 -
           RT-11, A step by step                PATCHer   14-Nov-92


  +---------------
  !  .PATCH SY:KED.SAV/D<ВК>
  !  -
  !  FILE NAME --
  !  -------------
  !  *2372/ 50553 X = MAC P (DOC) <ВК>
  !  -     ------- ------- --   --
  !  *E
  !  -
  !  ?PATCH-I-CHECKSUM = 16657
  !  -------------------------
  !  .^
  !

  И я напомню читателям,- объясняет Алеша свои действия,- что подчеркнутые сим-
  волы на этом рисунке выводит программа PATCH.






       13.4. Команды для программистов



       Для удобства изменений в  программных  модулях  можно  запоминить  любой
  адрес ячейки в файле в некотором виртуальном регистре  и  далее  использовать
  его содержимое для всех остальных смещений. Таких регистров может быть восемь
  - от 0 до 7. Запись базового значения, например, во второй регистр происходит
  следующей командой:

  +---------------
  !  *10200;2R<ВК>
  !  *
       и затем для открытия ячейки 10213 можно просто указать
  !
  !  *2,13\010105 111<ВК>
  !  *

       Таким образом можно открыть ячейку в оверлейном сегменте командой

    S:R,O/

  где S - номер оверлейного сегмента, R - номер базового регистра (как в преды-
  дущем примере), O - смещение относительно содержимого базового регистра.
       - Необходимо отметить,- подсказывает Алеша,- что этой  программой  можно
  исправлять каталоги после каких-либо аварий, так же как мы исправляли  редак-
  тор KED, но указав при вызове дополнительно ключ /A.



                                     - 302 -
           RT-11, A step by step                   Help   14-Nov-92


                               14. СКОРАЯ ПОМОЩЬ,



                                       или
                              Что делать забывчивым


       - Ну что, Алеша, вот мы и прошли первую часть пути. Теперь ты  имеешь  в
  руках специальность машинистки и с использованием средств  обработки  текстов
  можешь не только делать эту работу в 1.5 раза быстрее обычной машинистки,  но
  и внешний вид твоей работы будет много привлекательней.
       - Да, а если я выучусь на  редактора  какого-нибудь  журнала,-  отвечает
  Алеша,- то вообще без компьютера обходиться не  смогу.  Однако,  если  можно,
  последний вопрос?
       - Спрашивай.
       - Мы видели, что редактор текста всегда нам помогал, если мы  что-нибудь
  забывали. Даже SL-драйвер имеет встроенную помощь. А как же система в целом -
  неужели она не поможет мне в таком случае?
       - С одной стороны, ты бы мог об этом спросить у самой системы,- говорю я
  Алеше,- но дело в том, что эта справочная система занимает на диске  примерно
  140 блоков и при той небольшой емкости накопителей, которые  имеются  у  ДВК,
  держать ее на диске нецелесообразно. Однако при емкости диска более  2М  байт
  ее присутствие в системе всегда желательно.
       - Так, значит, на СОТКЕ она есть,- обрадовался Алеша,- можно мне  с  ней
  поговорить.
       - Да,- отвечаю я,- загружай систему на третьем комплексе.
       - Все в порядке,- отрапортовал Алеша,- дату и время установили. А  какие
  же команды нужно вводить?
       - А вот это ты должен догадаться сам. Тебе нужна помощь - вот и  попроси
  об этом систему.
       - А я догадался,- сказал Алеша,- ПОМОЩЬ по-английски HELP, и наберем это
  слово в качестве команды.

  +---------------
  !  .HELP<ВК>
  !  -
  !  .^
  !

  И на экране появился рассказ о самой программе HELP, который приведен ниже:


                                     - 303 -
           RT-11, A step by step                   Help   14-Nov-92


   HELP                List helpful information

    SYNTAX
      HELP[/OPTIONS] [ TOPIC[ SUBTOPIC[:ITEMS...]...]]
    or
      HELP *

    SEMANTICS
      HELP *               Lists the items for which HELP is available.
      HELP                 Lists the help text (of which this is a part)
      HELP TOPIC           Lists information on the specific topic only.
      HELP TOPIC SUBTOPIC              Lists information on the specific
                       subtopic  only  (for example, HELP HELP semantics
                       lists the paragraph of which this text is a part)
      HELP TOPIC SUBTOPIC:ITEM            Lists only the text associated
                                          with the specific item.
      HELP TOPIC/ITEM                     Lists the text assotiated with
                                          the specific item under
                                          the subtopic optins.
      Valid topics are the keyboard minitor comands.
      Subtopics are "SINTAX","SEMANTICS", "OPTIONS", and "EXAMPLES"
      items are specific command options.
   Press <RETURN> for more...

  и просьба нажать клавишу <RETURN>, (т.е. <ВК>) для  продолжения.  И  прочитав
  текст, нажмем ее.

    OPTIONS
     PRINTER
                          Prints the help text on the line printer
     TERMINAL  (DEFAULT)
                          Types the help text on the terminal
    EXAMPLES
       HELP COPY                 !Lists  information  about  COPY
                                 !command
       HELP/PRINTER EXECUTE      !Prints information about EXECUTE
                                 !command
       HELP PRINT OPTION:COPIES  !Describes  the  copies  option
                                 !for PRINT
       HELP COPY/BOOT/DEVICE     !Describes  the  listed  options
                                 !for COPY

  И мы увидели продолжение текста.
       - Андрей Германович,- прочитав, сказал Алеша,- в основном мне все понят-
  но, но это при знании английского языка. А  для  незнающих,  наверное,  нужно
  несколько разьяснить.
       - Ну, раз ты все понял,- передаю я ему инициативу,- то тебе  и  карты  в
  руки. А для начала поясни, что делает эта программа.
       - А поясняет она сама,- говорит Алеша,- в первой строке  пишется  полное
  название команды (в данном случае HELP) и ее назначение. Команда HELP,  кото-
  рая обслуживается  программой  HELP,  печатает  вспомогательную  (справочную)
  информацию.
       - А если я не знаю, как пользоваться этой командой?
       - Тогда можно  просто  попросить  помощь,-  не  сдается  Алеша,-  набрав
  HELP<CR>, или, более точно, получить информацию о команде HELP, введя команду
  HELP HELP<CR>. Оба эти способа приводят к одинаковому результату - на  экране
  распечатывается текст, который мы разбираем.
       - Но это касается команды HELP,- допытываюсь я,- а если я не знаю, какие
  команды есть в нашей системе?


                                     - 304 -
           RT-11, A step by step                   Help   14-Nov-92


       - Тогда нужно вспомнить про умолчания в системе,- делает взгляд в  прош-
  лое Алеша,- ведь звездочка заменяет любое количество символов.  Поэтому  если
  вместо имени команды мы укажем звездочку, вот так:

  +---------------
  !  .HELP *<ВК>
  !  -
  !

  то программа HELP выводит список всех команд,  про  которые  есть  справочная
  информация.
       - Если повнимательней посмотреть,- уточняю я,- то заметим, что программа
  HELP выводит на экран первые строки всех справочных статей, которые имеются в
  системе.
       Но продолжим наш разговор. Допустим, я знаю  тему  (TOPIC),  на  которую
  хочу говорить, что в таком случае будет являться подтемой (SUBTOPIC).
       - А на это есть подробное разъяснение в самой  команде  HELP,-  отвечает
  Алеша,- темой является имя команды клавиатурного монитора. А  подтемой  может
  являться указание на одну из частей самой статьи - т.е. SINTAX (описание син-
  таксиса команды), SEMANTICS (описание действия этой команды) и EXAMPLES (при-
  меры, показывающие, как применять команду).
       - Прекрасно, Алеша. Но что ты скажешь про ITEMS - т.е. параграф. Это  из
  текста на экране не очень понятно.
       - Параграфом является ключ, уточняющий команду,- разъясняет Алеша,- если
  мы его знаем. Правда, мы можем указать только часть ключа, которую помним,  а
  программа HELP покажет информацию о тех ключах, с которыми ее можно связать.
       - Алеша, если уж говорить о ключах, то расскажи о ключах самой программы
  HELP, и зачем они нужны.
       - С ключами проще простого,- заспешил  Алеша,-  один  из  них  /TERMINAL
  установлен по умолчанию. В таком случае  информация  выводится  на  терминал.
  Второй - необходим пользователям ДВК. Они могут с помощью ключа /PRINTER рас-
  печатать тексты всех статей HELP на бумаге и затем использовать их, как спра-
  вочник.
       - Ну почему ты так не любишь пользователей,- я очень  недоволен.  -  Вся
  наша книга посвящена облегчению жизни пользователей, а ты к этому еще не при-
  вык.
       - Каких пользователей?- удивился Алеша.
       - Тех, кому ты сейчас даешь такие советы. Во-первых, твой способ застав-
  ляет распечатывать каждую статью отдельно. Для одной-двух статей это приемле-
  мо, но распечатывать таким образом весь HELP неразумно. И  во-вторых,  каждая
  статья имеет свой размер. Одна - короткая, будет одиноко прятаться  на  почти
  пустой странице, другая - вытянет страницу на два аршина. Как  потом  пользо-
  ваться таким справочником?
       - Да, я действительно поторопился,- Алеша виновато замялся,- но,  навер-
  ное, здесь можно воспользоваться полученными нами знаниями.
       Для этого определим структуру программы  HELP.SAV  с  помощью  программы
  DUMP. Это очевидно, что имеется некоторая управляющая программа (ее  называют
  - исполняющая система HELP.EXE) и каким-то образом организованный текст. Пос-
  мотрев дамп файла HELP.SAV (можно на экране), только по ритму чисел и тексто-
  вой (в том или ином виде) информации мы можем определить, что HELP.EXE распо-
  ложен с 0-го по 6-й блок, с 7-го по 11у-й блок следует явно выраженный  ката-
  лог, и с 12-го блока мы видим чистый текстовой файл,  который  можно  назвать
  HELP.TXT. Кстати, эти данные приводятся в файле CUSTOM.TXT.
       - Это, Алеша, ты правильно определил,- уточняю я,- и в RT-11  до  версии
  5.1 поставлялось три файла - HELP.SAV, готовый к выполнению; HELP.EXE, испол-
  няющая система, и HELP.TXT - тексты справочных статей. Кстати, в операционной
  системе RSX-11 файлы исполняющей системы и текстов статей  разделены  всегда,
  поэтому перевод этих текстов не составляет никакого труда. Почему стали  пос-
  тавлять только один файл, я расскажу, когда мы займемся более сложными видами


                                     - 305 -
           RT-11, A step by step                   Help   14-Nov-92


  деятельности - управлением и сопровождением  системы.  А  пока  подумай,  как
  отделить файл HELP.TXT, чтобы его  потом  отредактировать  (вставить  символы
  "FF") и распечатать в аккуратном и красивом виде.
       - Один из способов,- вспомнил Алеша,- это воспользоваться руками  систе-
  мы.
       Где хранится файл HELP.SAV на диске, мы знаем из каталога (а лучше  сна-
  чала сделать его копию), запомнив это место, удалим запись о нем из  каталога
  с помощью программы PIP. А затем с помощью программы DUP создадим две  записи
  о файлах HELP.EXE и HELP.TXT, указав в качестве параметров начальные блоки их
  расположения на диске и их размеры. Дальше с файлом HELP.TXT мы можем делать,
  что угодно.
       Второй способ использует побочные свойства редактора K52. Во-первых,  мы
  можем отредактировать файл из входного в выходной, не причиняя  вреда  ориги-
  нальному файлу, например следующим образом.

  +---------------
  !  .K52 SY:HELP.SAV MX1:HELP.TXT<ВК>
  !  -

  А во-вторых, редактор K52 позволяет редактировать любые файлы, в том числе  и
  двоичные. И если не испугаться той неразберихи, которая возникнет на  экране,
  и аккуратно строчка за строчкой удалить все двоичные коды, не имеющие отноше-
  ния к тексту, то оставшуюся (текстовую) часть можно сразу приводить  в  поря-
  док, делая красивые заголовки и разбивая на сраницы нужного размера.
       А печатать этот текстовый файл  можно  обычной  командой  PRINT,  указав
  необходимое количество копий.
       - Я могу тебя поздравить,- радостно сказал я Алеше,- что пройденный нами
  материал ты усвоил превосходно. А главное, сумел применить его в типичной, но
  не ординарной ситуации. И все-таки на досуге подумай, как можно  одним  махом
  отделить текстовую часть программы HELP без риска испортить остальное.


       Однако, прежде чем мы перейдем к более сложным проблемам в жизни  систе-
  мы, сделаем небольшие каникулы.
       - Это чтобы Александр Геннадьевич немного отдохнул  от  нас,-  засмеялся
  Алеша.
       - И для этого тоже,- отвечаю я,- но главное, и тебе, и  нашим  читателям
  необходимо просто поработать с системой в роли писателей или в крайнем случае
  машинисток, чтобы пройденный материал закрепился в голове.
       - Или, как говорят музыканты,- добавил Алеша,- чтобы музыка была в паль-
  цах.
       - Вот именно. Это нужно  для  того,  чтобы  освободить  мозг  для  более
  серьезной работы. А пока пойдем к Александру Геннадьевичу в комнату пить  чай
  с тортом, который ты принес по поводу завершения первого этапа обучения.
       - Только я сначала выключу машину и позову всех, кто помогал нам в рабо-
  те над этой книгой.


                                     - 306 -
           RT-11, A step by step                   Help   14-Nov-92


  *  *  ***   *   *  *****  *   *
  * *  *   *  *   *  *      *   *
  **   *   *  *****  ****   *   *
  * *  *   *  *   *  *      *   *
  *  *  ***   *   *  *****  ******
                                 *

               *****  *****  ****   ****     ***   * * *
               *   *  *      *   *  *   *   *   *  *   *
               *   *  ****   ****   ****    *   *  *  **
               *   *  *      *      *   *   *   *  * * *
               *   *  *****  *      ****     ***   **  *

                                    *   *    *     ***   *****  *   *
                                    *   *   * *   *   *    *    *  **
                                    *****  *   *  *        *    * * *
                                        *  *****  *   *    *    **  *
                                        *  *   *   ***     *    *   *


               К О Н Е Ц     П Е Р В О Й     Ч А С Т И





                                     - 307 -
           RT-11, A step by step         Электроника-85   14-Nov-92


                    15. Некоторые проблемы "Электроники-85"



                      15.1. Текстовый редактор EDK (Edik)



       Экранный редактор текста EDK  (EDIK)  написан  Игорем  Нысэм  (г.Москва,
  т.д.116-20-42) как попытка создать более простой чем  KED  экранный  редактор
  позволяющий дополнительно редактировать тексты в четырех регистрах -  русский
  большие и маленькие буквы, латинский большие и маленькие буквы. Однако,  сис-
  темная разработка функций была сделана неаккуратно, в  результате  они  плохо
  запоминаются и  их  использование  приводит  к  катастрофическим  результатам
  (потере информации). Кроме того, версии этого редактора для различных компью-
  теров "Э-85", ДВК-3,4 и других,  используют  разные  клавиши  для  однотипных
  функций даже если при этом использутся одинаковые клавиатуры. Все это не поз-
  воляет считать EDK хорошим редактором, но, ввиду отсутствия другого для рабо-
  ты с четыремя регистрами, им приходиться пользоваться.
       Ниже будут описаны функции редактора, использование которых относительно
  безопасно. Большая часть  функций  (которая  здесь  не  описывается)  при  их
  использовании особенно с повторением может привести к потере  большого  коли-
  чества информации.

       ВНИМАНИЕ!!! Ответ на все вопросы по умолчанию всегда положительный!!!



       15.2. Вызов редактора



       Вызов редактора EDK осуществляется также как редакторов  EDIT  и  KED  в
  RT-11, т.е.

  EDK DEV:FILE.TYP

     или

  EDK DV1:FILE1.TP1 DV2:FILE2.TP2

     или

  RUN DEV:EDK
  *DV1:FILE1.TP1

       При этом могут использоваться такие же ключи, как и в  редакторах  EDIT,
  KED: /C - создать новый файл, /I - просмотреть файл.


                                     - 308 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       15.3. Структура данных



       Редактор EDK представляет текстовый файл разбитый  на  страницы,  размер
  которых зависит от размера свободной  памяти,  обычно  около  40  блоков  (20
  кбайт). Движение по файлу может осуществлятся по  страницам  только  в  одном
  направлении - от начала файла к концу. В пределах одной страницы можно  пере-
  мещаться в любом направлении.
       Для управления страницей используются несколько команд:
       <ПФ1>,B_ottom - переместить курсор в конец (низ) страницы;
       <ПФ1>,T_op - переместить курсор в начало (верх) страницы;
       <ПФ1>,N_ext - записать в файл текущую страницу от начала  до  курсора  и
  считать следующую;
       <ПФ1>,P_age - записать в файл всю текущую страницу независимо от положе-
  ния курсора и считать следующую.

       Выход из редактора может быть выполнен с помощью одной из двух команд  -
  <ПФ1>,E_xit и <ПФ1>,Q_uit.
       По команде EXIT происходит запись текущей страницы  в  файл  и  перепись
  остатка входного файла в выходной файл. Входной файл переименовывается в файл
  с типом .BAK.
       По команде QUIT входной файл освобождается и  результаты  редактирования
  не сохраняются.



       15.4. Команды редактирования в пределах страницы



       Перемещение курсора в пределах текущей страницы осуществляется клавишами
  со стрелками. При использовании клавиши префикса <ПФ1> перед нажатием клавиши
  со стрелкой курсор перемещается в крайнюю позицию строки или экрана. При этом
  размер экрана принимается равным 20 строкам.
       Дополнительно возможно перемещение курсора по словам используюя  клавиши
  <ПРЕД.КАДР> и <СЛЕД.КАДР>. При этом клавиша <ПРЕД.КАДР> перемещает курсор  на
  одно слово (до  ближайшего  пробела)  в  сторону  начала  текста,  а  клавиша
  <СЛЕД.КАДР> перемещает курсор на одно слово (до ближайшего пробела) в сторону
  конца текста.

       Для удаления символа используется клавишы <ЗАБОЙ>  и  <УДАЛ>.  При  этом
  клавиша <ЗАБОЙ> удаляет символ перед курсором, а клавиша <УДАЛ> удаляет  сим-
  вол над курсором.
       Декларируемая команда "вставить символ" с использованием  клавиши  <ВСТ>
  действительно вставляет символ, но только <ПРОБЕЛ>, а  не  тот,  который  был
  удален.

       Для удаления слова используются несколько неожиданные клавиши:
       <ПФ1>,<ПРЕД.КАДР> - удаляет слово справа от курсора, а
       <ПФ1>,<СЛЕД.КАДР> - восстанавливает удаленное слово.

       Для удаления строки в редакторе EDK используется клавиша <ПФ4>, при этом
  удаляется вся строка целиком, независимо от положения курсора на строке.  Для
  удаления строки перед курсором  используется  как  обычно  комбинация  клавиш
  CTRL/U.
       Для  восстановления  строки   используется   последовательность   клавиш
  <ПФ1>,<ПРОБЕЛ>.



                                     - 309 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       Дополнительные функции замены и установки режима редактирования в редак-
  торе используются не часто, но оказываются полезнымми.
       <ПФ1>,U_pdate? - режим вставки/замены. При ответе на вопрос Y устанавли-
  вается режим замены символов, при ответе на вопрос  N  устанавливается  режим
  вставки. При загрузке редактора установлен режим вставки как  наиболее  часто
  использующийся.
       В режиме замены новые символы накладываются на старые, но  при  удалении
  символа текст в строке сдвигается, что нарушает логику функции. Для забивания
  символа необходимо использовать символ <ПРОБЕЛ>.

       Для текущего слова можно поменять регистр верхний/нижний  на  противопо-
  ложный. Для этого нажимается  последовательность  клавиш  <ПФ1>,L_etter.  При
  этом курсор перемещается всегда в сторону конца файла.

       Также как в редакторе KED можно установить ограничитель на длину строки,
  в результате чего редактор будет автоматически  переходить  на  новую  строку
  если слово не вмещается на текущей. Для этого нужно нажать последовательность
  клавиш <ПФ1>,W_rap и в ответ на появившийся вопрос ввести  число  символов  в
  строке и нажать <ВК>.
       По умолчанию длина строки установлена равной 78 символам.

       В редакторе KED при редактировании длинных строк остаток  строки  невме-
  щающийся на экране показывается на следующей строке начинающейся со специаль-
  ного значка. В отличие от него EDK не показывает остаток строки и,  возможно,
  это более удобно. Для того чтобы посмотреть остаток строки необходимо "перед-
  винуть" экран, установив зону (номер колонки на строке), с которой начинается
  показ текста.
       Для этого нужно нажать последовательность клавиш <ПФ1>,Z_one и  в  ответ
  на появившийся вопрос ввести номер колонки,  с  которой  должен  показываться
  текст, в нажать <ВК>.

       В пределах текущей страницы можно осуществлять  поиск  по  образцу.  Для
  задания модели поиска необходимо нажать последовательность клавиш <ПФ1>,<ПФ3>
  и в ответ на появившийся вопрос задать модель поиска и нажать <ВК>.
       Поиск осушествляется с поощью последовательности клавиш:

  <ПФ1>,+
     - осуществляется поиск в сторону конца файла;

  <ПФ1>,-
     - осуществляется поиск в сторону начала файла.

       Для повторения любой функции или клавиши  необходимо  нажать  последова-
  тельность клавиш <ПФ1>,R_epeat и в ответ на появившийся вопрос  ввести  число
  повторений, наждать клавишу <ВК> и  нажать  клыавишу  или  последовательность
  клавиш, которые необходимо повторить.



       15.4.1. Сообщения редактора EDK



  - Search failed
       Неуспешный поиск. Заданная модель поиска не была найдена в пределах окна
  (текущей страницы).

  - Macro ovf
       Буфер макрокоманды переполнен. Макрокоманда  не  завершена  и  выполнена


                                     - 310 -
           RT-11, A step by step         Электроника-85   14-Nov-92


  быть не может.

  - Aux buffer ovf
       Буфер вспомогательного файла переполнен.

  - Text buffer almost full
       Текстовый буфер почти полон. У Вас есть  возможность  вставить  еще  100
  символов (около двух строк), после чего  необходимо  выйти  из  редактора  по
  команде EXIT и начать редактирование снова.

  - Text buffer full
       Текстовый буфер заполнен. Для продолжения редактирования необходимо вый-
  ти из редактора по команде EXIT и начать редактирование снова.

  - No aux file for input
       Нет вспомогательного файла для ввода.

  ?NYS-W-File exists
       Файл с таким именем и типом уже существует

  ?NYS-I-Create new file
       Создается новый файл

  ?NYS-W-Only XX blocks for insertion
       Только XX блоков для вставки.

  ?NYS-F-Not enough memory
       Недостаточно памяти.

  ?NYS-F-Ill switch
       Недопустимый ключ

  ?NYS-F-No Driver
       Нет драйвера

  ?NYS-W-Subst File not found
       Файл для подстановки не найден

  ?NYS-F-Protected file already exists
       Защищенный файл с таким именем уже существует

  ?NYS-F-Output device full
       Выходное устройство заполнено

  ?NYS-F-No file, continue?
       Нет файла, продолжать?


                                     - 311 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       15.5. Программа   постраничной   распечатки    текстов
             LPRINT.SAV





       15.5.1. Ключи установки режимов печати



       Для печати текстов в операционной системе  RT-11  предназначена  команда
  PRINT. Но ей удобно пользоваться  лишь  в  тех  случаях  когда  принтер  либо
  использует непрерывную бумажную ленту (фальцованную или рулонную), либо имеет
  специальные средства для автоматической подачи листовой бумаги как в лазерных
  принтерах. В то же время персональные компьютеры чаще поставляются с компакт-
  ными дешевыми принтерами типа Epson или их  аналогами.  Так  "Электроника-85"
  долгое время комплектовалась принтером Robotron-K6311 (СМ-6329).  Именно  для
  таких принтеров и была написана программа LPRINT.SAV.
       Программа LPRINT.SAV написана в соответствии с правилами RT-11 и, следо-
  вательно, будучи записана на системном устройстве  может  быть  запущена  как
  команда:

       LPRINT DEV:FILSPC.TYP/OPTION:ARG:ARG/OPTION:ARG...

       При этом ключи и в  некоторых  случаях  аргументы  могут  указываться  в
  произвольном порядке.
       Для получения информации о возможностях программы  необходимо  запустить
  ее без указания спецификации файла, но с ключем /H (Help)

       LPRINT /H

       или

       RUN DEV:LPRINT /H

       В результате на экране появиться текст с перечислением возможных  ключей
  и аргументов:

  /P:NN:BB - начальный (NN) и базовый (BB)
             номера страниц для печати
  /Z:BB:EE - начальный (BB) и конечный (EE)
             номера колонок для печати
  /T:XX:NN - тип печати и шаг между строк
     XX=EL - шрифт ELITE
     XX=SQ - СЖАТЫЙ шрифт
     XX=FE - ЖИРНЫЙ шрифт
     XX=DO - ДВОЙНАЯ печать
     XX=SP - печать в РАЗРЯДКУ
  /S:NN    - число пробелов в начале строки
  /2       - печать 2-х регистровых текстов
  /H       - Вывод этого текста

           Команды управления печатью:
   > Y - печатать страницу с указанным номером
   > N - пропустить страницу с указанным номером
   > R - повторить предыдущую страницу
   > E - закончить работу программы



                                     - 312 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       При указании ключа /H вместе со спецификацией файла перед печатью текста
  на экран выводится только справочный текст по командам управления печатью.

  /P:NN:BB - указание номеров страниц для печати
       Текущий номер страницы в файле отсчитывается по символам перевода форма-
  та (FF) от начала файла, при этом номер страницы  после  первого  символа  FF
  будет равен 2. Поэтому для печати текста с произвольной страницы текста нужно
  указать ключ /P:NN с аргументом равным номеру страницы, с которой  начинается
  печать. При этом второй аргумент должен быть  опущен.  При  печати  с  первой
  страницы по файлу весь ключ может быть опущен.
       Однако часто большой текст разбивается на несколько файлов и номер стра-
  ницы по тексту не совпадает с номером страницы в файле. В таких случаях можно
  указывать в качестве аргумента NN номер страницы по тексту, одновременно ука-
  зав базовый номер BB страницы, т.е. номер страницы по тексту, которая являет-
  ся первой в файле. Номер страницы, который будет показываться в запросе прог-
  раммы LPRINT будет соответствовать в таком случае номеру страницы по тексту.
       Аргументы должны следовать в указанном порядке.

  /Z:BB:EE - указание номеров колонок для печати
       Этот ключ предназначен для печати широких текстов по частям  и  склейкой
  впоследствии листов бумаги. При этом  аргумент  BB  указывает  номер  колонки
  (номер позиции) в строке, с которой будет  печататься  текст.  Номер  колонки
  может изменяться от 1 до Nmax. Таким же образом аргумент EE  указывает  номер
  последней колонки для печати. Для последней зоны аргумент EE может быть  опу-
  щен. Если ограничений на ширину печати нет, то весь ключ может бытть опущен.

  /S:NN - число пробелов в начале строки
       Ключ позволяет сдвинуть текст на странице при печати путем вывода в каж-
  дой строке необходимого количества пробелов, указанного в аргументе NN.

  /T:XX:NN - тип печати и шаг между строк
       Самый емкий по информации ключ требует некоторых пояснений. В  принтерах
  типа Epson имеется несколько видов шрифтов и типов печати. Три вида шрифта по
  размеру символа - PICA (10 символов на дюйм), ELITA (12 символов на  дюйм)  и
  УПЛОТНЕННЫЙ или СЖАТЫЙ (17 символов на дюйм). Для шрифта PICA нет  соответст-
  вующего аргумента, так как при отсутствии других указаний он используется  по
  умолчанию. Для указания шрифта ELITA необходимо указать аргумент  EL,  а  для
  СЖАТОГО шрифта аргумент SQ.
       Для каждого из этих шрифтов можно  установить  режим  в  РАЗРЯДКУ,  т.е.
  ширина каждого символа увеличивается в двое, а их число на строке  соответст-
  венно уменьшается в два раза.
       И также для каждого вида шрифта можно установить режим ДВОЙНАЯ или  ЖИР-
  НАЯ печать.
       Режим ДВОЙНОЙ печати устанавливается аргументом DO и заключается в двой-
  ном проходе печатающей головки по одному и тому же месту. Удобен  при  печати
  на изношенной красящей ленте или  при  необходимости  получения  качественной
  печати.
       Режим ЖИРНОЙ печати устанавливается аргументом FE и заключается также  в
  двойном проходе печатающей головки, но со сдвигом в 1/216 дюйма  относительно
  первого прохода.
       При одновременном указании аргументов DO и FE выбирается ДВОЙНАЯ печать.
       Независимо от типа шрифта в этом же ключе можно задать расстояние  (шаг)
  между строк. Основной шаг строк равен 1/6 дюйма (4.23мм)  или  36/216  дюйма.
  Градация значений в этом аргументе равна 1/216 дюйма,  при  этом  указывается
  только числитель и для указания десятичной системы счисления после числа ста-
  виться точка.
       Например, задание ключа с аргументами /T:EL:DO:38. означает:
       - EL - используется шрифт ELITA
       - DO - используется ДВОЙНАЯ печать


                                     - 313 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       - 38. - растояние между строк равно 38/216 дюйма

  /2 - для печати используется двухрегистровый текст (в коде КОИ-7Н2)
       При этом происходит  автоматическое  преобразование  кодировки,  которое
  выполняется переключателем 9-1 на принтере.

       Таким образом полностью команда для печати текста может быть такой:

  LPRINT DEV:TEXT.TYP/S:3/T:EL:SP:DO:38./Z:60.:96./P:230.:178./2/H

       Что означает следующее:
     - /S:3 - перед каждой строкой выводится три пробела
     - /T:EL:SP:DO:38. - двойная печать шрифтом ELITA в разрядку с шагом меж-
       ду строк 38/216 дюймаю
     - /Z:60.:96.- печать широкого текста начиная с 60 и кончая 96 колонкой
     - /P:230.:178. - начинать печатать текст с 230 страницы с  учетом  того,
       что в файле номера страниц начинаются с 178.
     - /2 - текстовый файл представлен в коде КОИ-7Н2
     - /H - показать команды управления  печатью  для  напоминания  во  время
       работы.

       Ключи в команде и аргументы в ключе /T могут перечислятся в любом поряд-
  ке.

       Таким образом, при использовании программы LPRINT пользователь может  не
  пользоваться переключателями 9, 10, 11 на принтере.
       По умолчанию для различных типов шрифта используются следующие  установ-
  ки:

                   PICA        ELITE       SQUEZ
  ширина строки     80.         96.         132.
  шаг строк       37./216.    37./216.    25./216.

       При указании режима печати В РАЗРЯДКУ ширина строки  уменьшается  в  два
  раза, по сравнению с указанной для каждого типа шрифта.
       При указании режима печати ЖИРНЫЙ автоматически устанавливаются парамет-
  ры шрифта PICA.



       15.5.2. Команды управления печатью



       После печати первой из указанных страниц на экране появляется  подсказка
  "PRINTING PAGE NNN ? >" где, NNN - номер страницы подготовленной для  печати.
  В ответ необходимо дать одну из четырех команд:

  Y - разрешает печать подготовленной страницы

  N - пропускает подготовленную для печати страницу
       Эта команда позволяет распечатывать из файла  отдельные  страницы,  а  с
  учетом команды R, то и в нескольких экземплярах.

  R - повторить печать предыдущей страницы
       Программа запоминает перед печатью адрес страницы в файле, что позволяет
  повторить печать предыдущей страницы необходимое число раз.

  E - заканчивает работу программы


                                     - 314 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       Команда может состоять из нескольких символов, но распознается только по
  первому символу.

       Для правильной печати необходимо установить  переключатели  на  передней
  панели принтера в следующее положение:

  05  06  07  08  09  10  11      12  13  14  15  16  17  18
  --------------------------      --------------------------
  =>  =>  <=  <=  <=  <=  =>      <=  <=  <=  =>  =>  <=  =>
  <=  =>  =>  =>  <=  <=  <=      <=  <=  <=  <=  <=  <=  <=

       В дальнейшем положение переключателей не изменяется так как  все  режимы
  переключаются программой LPRINT.


                                     - 315 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       15.6. Командные  файлы  для  форматирования  текстовых
             файлов



       С целью облегчить работу с программой форматирования текстов и последую-
  щей печатью текстов были написаны командные файлы, учитывающие размеры  печа-
  тающего устройства, шрифтов и бумаги. При этом  предполагается,  что  исполь-
  зуется стандартная бумага формата А4 размером  210*297мм.  При  использовании
  перфорированной фальцованной бумаги для вычислительных машин  следует  учиты-
  вать, что ее размер 210*305мм или 420*305мм. Для командных файлов имеет  зна-
  чение только ширина листа.
       Для правильного использования приведенных здесь рекомендаций  необходимо
  установить насадки "лепорелло" в крайние положения. Для левой насадки имеется
  три положения - насадку "лепорелло" необходимо  установить  в  крайнее  левое
  (третье) положение.



       15.6.1. Командный файл PICA



       Командный файл PICA предназначен для подготовки документов, для  которых
  важнa хорошая читаемость текстов. Это,  например,  могут  быть  договора  или
  рукописи для представления в редакцию. Максимальное число символов на  строке
  при этом равно 69, число пробелов в начале строки равно 4.
       Для запуска командного файла необходимо выполнить команду и в  ответ  на
  подсказку ввести спецификацию файла

  IND SY:PICA
  Enter specification file DEV:FILE.TYP
  ------------------------
  For Editors N
  -----------

       Если на вопрос "For Editors" ответить N, то в выходном  текстовом  файле
  строки будут следовать без разрядки (директива .JMP 0), а в начале страницы в
  качестве колонтитула указывается спецификация файла и дата и время форматиро-
  вания.
       Если на вопрос "For Editors" ответить Y, то в выходном  текстовом  файле
  строки будут следовать вразрядку (директива .JMP 1) и в качестве  колонтитула
  будет использоваться пустая строка. Напечатанный таким образом  текст  обычно
  удовлетворяет требования большинства редакций журналов и издательств.
       Для того, чтобы при печати на двух сторонах  листа  текст  находился  на
  одинаковом расстоянии от краев листа с обоих сторон необходимо:
       - при печати на первой стороне листа устанавливать левый край  листа  по
  правому краю барабанчика "лепорелло" или на 12мм левее левого края резинового
  опорного валика.
       - при печати на второй стороне листа  устанавливать  правый  край  листа
  точно по правому краю резинового опорного валика.


                                     - 316 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       15.6.2. Командный файл ELITA



       Командный файл ELITA предназначен для подготовки документов с более мел-
  ким шрифтом, как правило печатаемый с двух сторон. Такие  документы  содержат
  больше информации в расчете на один лист и  позволяют  экономить  бумагу,  но
  требуют некоторого напряжения зрения. Максимальное число символов  на  строке
  при этом равно 78, число пробелов в начале строки равно 3.
       Для запуска командного файла необходимо выполнить команду и в  ответ  на
  подсказку ввести спецификацию файла:

  IND SY:ELITA
  Enter specification file DEV:FILE.TYP
  ------------------------

       Для того, чтобы при печати на двух сторонах  листа  текст  находился  на
  одинаковом расстоянии от краев листа с обоих сторон необходимо:
       - при печати на первой стороне листа устанавливать левый край  листа  по
  левому краю барабанчика "лепорелло" или на 24мм левее левого края  резинового
  опорного валика.
       - при печати на второй стороне листа устанавливать правый край листа  на
  3мм левее правого края резинового опорного валика.



       15.6.3. Командный файл BILIST



       Командный файл BILIST предназначен для подготовки документов в миниатюр-
  ном формате, которые отформатированы в двухколоночном формате  и  уменьшенной
  длине страницы. При печати с применением СЖАТОГО шрифта это позволяет  помес-
  тить на одном листе 4 страницы. При печати с двух сторон получается  одновре-
  менно два экземпляра. Максимальное число символов в строке при этом равно 56.
       Для запуска командного файла необходимо выполнить команду и в  ответ  на
  подсказку ввести спецификацию файла:

  IND SY:BILIST
  Enter specification file DEV:FILE.TYP
  ------------------------

       Для печати текстов отформатированных этим командным  файлов  выполняются
  следующие действия:
       - печатается страница на первой стороне листа;
       - лист переворачивается и эта же страница повторно печатается с обратной
  стороны;
       - лист заправляется в принтер другим концом и печатается следующая стра-
  ница;
       - лист переворачивается и эта же страница повторно печатается с обратной
  стороны.
       В результате если разрезать лист на четыре равные  части,  то  получится
  два экземпляра текста напечатанного с двух сторон четвертушек листа.
       Лист бумаги при заправке устанавливается так, чтобы левый край листа был
  выровнен по правому краю барабанчика "лепорелло" или  на  11мм  левее  левого
  края резинового опорного валика.


                                     - 317 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       15.7. Переключение кодировок терминала



       В ПЭВМ "Электроника-85" терминал моделируется драйвером PI.SYS,  который
  определяет как кодировку символов, так и возможности  терминала.  В  качестве
  базового используется терминал VT100 (ISO Level-1), который для  совместиости
  имеет режим теринала VT-52. Все режимы и кодировки терминала переключаются  с
  помощью последовательности ASCII-символов. Для удобной  работы  написаны  ряд
  программ, которые будучи записаны на системном  устройстве,  позволяют  иметь
  команды переключающие терминал в необходимый режим  и  кодировку.  Для  этого
  достаточно выполнить одну из следующих команд - VT100, LAT, RUS, KOI7,  VT52.
  Для справки ниже приведены также  последовательности  символов  переключающие
  терминал в соответствующий режим.

       Основной режим  терминала  VT100.  Используется  редакторами  EDK,  KED.
  Редактор EDK установит теринал в 4-х регистровый режим КОИ-7, в  котором  для
  переключения латинского и русского наборов символов используются символы <SI>
  и <SO>.

  VT100:
         .ASCII   <ESC>'<'<ESC>'c'<ESC>')1'<SO>
         .ASCII   <ESC>'[2J'<ESC>'[00;10H'
         .ASCIZ   'MODE VT100 '
         .END

       Если выводить 4-х регистровый текстовый файл на экран и  оборвать  вывод
  символом CTRL/C, то терминал может остаться в русском регистре, что  неудобно
  при дальнейшем наборе команд KMON. Вернуть терминал в нормальный режим позво-
  ляет команда LAT.

  VT100: = LAT
         .ASCII   <ESC>'<'<ESC>'c'<ESC>')1'<SO>
         .ASCII   <ESC>'[2J'<ESC>'[00;10H'
         .ASCIZ   <SO>'MODE VT100 - '<SI>'ЛАТИНСКИЙ РЕГИСТР'<007><SO>
         .END

       Обратная операция - установить терминал в русский регистр -  выполняется
  командой RUS.

  VT100: = RUS
         .ASCII   <ESC>'<'<ESC>'c'<ESC>')1'<SO>
         .ASCII   <ESC>'[2J'<ESC>'[00;10H'
         .ASCIZ   <SO>'MODE VT100 -'<SI>' РУССКИЙ РЕГИСТР'<007>
         .END

       Ряд текстов, например, набираемые в редакторе  KED  тексты  программ  на
  ассемблере иляи FORTRAN-IV, должны быть в кодировке  КОИ-7Н2  с  совмещенными
  таблицами больших латинских и русских символов. Для установки такой кодировки
  нужно выполнить команду KOI7.

  VT100: = KOI7
         .ASCII   <ESC>'<'<ESC>'c'<ESC>')1'<SO>
  KOI7:
         .ASCII   <ESC>'(2'<ESC>')2'
         .ASCII   <ESC>'[2J'<ESC>'[00;10H'
         .ASCIZ   'MODE VT100 - КОИ-7Н2'
         .END



                                     - 318 -
           RT-11, A step by step         Электроника-85   14-Nov-92


       Многие программы в RT-11, особенно разрабатывавшиеся на  ДВК  используют
  кодировку популярного терминала VT-52, которая отличается другими  последова-
  тельностями символами управления  курсором  терминала.  Для  установки  этого
  режима нужно выполнить команду VT52.

  VT52:
         .ASCII   <ESC>'[2J'<ESC>'[00;10H'
         .ASCII   <ESC>'<'<ESC>'c'<ESC>')2'<SO>
         .ASCII   <ESC>'[?7h'
         .ASCII   <ESC>'[?1h'
         .ASCII   <ESC>'[?2l'
         .ASCIZ   'MODE VT52 - '<SI>'КОИ-7Н2'
         .END



                                     - 319 -
           RT-11, A step by step              Appendix 1  14-Nov-92


                                                                  Приложение 1




                             Синтаксис языков RT-11



                             (Бэкуса - Науэра форма)

  001.  Определение литер
  <Управляющие литеры>::=<УПР>
  <УПР>::=NUL!SON!STX!EXT!EOT!ENQ!ACK!BEL!BS!HT!LF!VT!FF!CR!
          SO!SI!DLE!DC1!DC2!DC3!DC4!NAK!SYN!ETB!CAN!EM!SUB!
          ESC!FS!QS!RS!US

  NUL - NULl characters
     - пустой символ

  SOH - Start Of Heading
     - начало заголовка

  STX - Start of TeXt
     - начало текста

  ETX - End of TeXt
     - конец текста

  EOT - End Of Transmission
     - конец передачи

  ACK - ACKnowledgement
     - подтверждение

  BEL - ring BELl
     - звонок

  BS  - BackSpace
     - возврат на шаг

  HT  - Horizontal Tabulation
     - горизонтальная табуляция

  LF  - Line Feed
     - перевод строки

  VT  - Vertical Tabulation
     - вертикальная табуляция

  FF  - Form Feed
     - перевод формата

  CR  - Carriage Return
     - возврат каретки

  SO  - Shift-Out
     - латинский регистр


                                     - 320 -
           RT-11, A step by step              Appendix 1  14-Nov-92


  SI  - Shift-In
     - национальный регистр

  DLE - Data Link Escape
     - авторегистр 1

  DC1 - Device Control 1
  DC2 - Device Control 2
  DC3 - Device Control 3
  DC4 - Device Control 4
     - символ управления устройством 1 - 4

  NAK - Negative AcKnowledgment
     - отрицание

  SYN - SYNchronous idle
     - синхронизация

  ETB - End of Transmission Block
     - конец передаваемого блока

  CAN - CANcel
     - аннулирование

  EM  - End of Medium
     - конец носителя

  SUB - SUBstitute
     - замена

  ESC - ESCape
     - префикс (авторегистр)

  FS  - File Separator
     - разделитель файлов

  GS  - Group Separator
     - разделитель групп

  RS  - Record Separator
     - разделитель записей

  US  - Unit Separator
     - разделитель элементов

  <Специальные литеры>::=<СПЦ>
  <СПЦ>::=SPACE|EXCLAMATION|QUOTATION|NUMBER|DOLLARS|PERCENT|
          AMPERSAND|APOSTROPHE|PARENTHESES LEFT|PARENTHESES
          RIGHT|ASTERISK|PLUS|COMMA|MINUS|PERIODSLANT|COLON|
          SEMICOLON|LESS THEN|EQUALS|GREATER THEN|QUESTION

   SPACE              - пробел
   EXCLAMATION        - восклицательный знак                 !
   QUOTATION          - кавычки                              "
   NUMBER             - номер                                #
   DOLLARS            - доллар (знак денежной единицы)       $
   PERSENT            - процент                              %
   AMPERSAND          - амперсенд                            &
   APOSTROPHE         - апостроф                             '


                                     - 321 -
           RT-11, A step by step              Appendix 1  14-Nov-92


   PARENTHESES LEFT   - левая круглая скобка                 (
   PARENTHESES RIGHT  - правая круглая скобка                )
   ASTERISK           - звездочка                            *
   PLUS               - плюс                                 +
   COMMA              - запятая                              ,
   MINUS              - минус                                -
   PERIOD             - точка                                .
   SLANT              - косая черта                          /
   COLON              - двоеточие                            :
   SEMICOLON          - точка с запятой                      ;
   LESS THEN          - меньше                               <
   EQUALS             - равно                                =
   GREATER THEN       - больше                               >
   QUESTION           - вопросительный знак                  ?

   <ЦИФРА>::=0|1|2|3|4|5|6|7|8|9

   <литеры Верхнего РЕГистра>::=<ВРЕГ>

   <литеры Нижнего РЕГистра>::=<НРЕГ>

   <прописные буквы латинского алфавита>::=<LAT>
   <строчные буквы латинского алфавита>::=<LLAT>
   <LAT>::=A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|
           Q|R|S|T|U|V|W|X|Y|Z

   <прописные буквы русского алфавита>::=<РУС>
   <строчные буквы русского алфавита>::=<НРУС>
   <РУС>::=Ю|А|Б|Ц|Д|Е|Ф|Г|Х|И|Й|К|Л|М|Н|О|П|
           Я|Р|С|Т|У|Ж|В|Ь|Ы|Ш|Э|Щ|Ч

   002. Код обмена информацией - стандарт ISO/DIS 646

   <ISO>::=<УПР>|<СПЦ>|<ЦИФРА>|<ВРЕГ>|<НРЕГ>

   003. Американский вариант кода ASCII

   <символ в коде ASCII>::=<ASCII>
   <ASCII>::=<УПР>|<СПЦ>|<ЦИФРА>|<ВРЕГ>|<НРЕГ>
   <ВРЕГ>::=COMMERCIAL AT|<LAT>|BRACKET LEFT|REV.SLANT|
            BRACKET RIGHT|CIRCUMFLEX|UNDERLINE
   <НРЕГ>::=SPACE|<LLAT>BRACES LEFT|VERTICAL LINE|BRACES RIGHT|
            TILDE|DEL

   004. Русский вариант кода - КОИ-7
        (код обмена информацией 7 бит)
   <символ в коде КОИ-7>::=<КОИ-7>
   <КОИ-7>::=<УПР>|<СПЦ>|<ЦИФРА>|<ВРЕГ>|<НРЕГ>
   <ВРЕГ>::=COMMERCIAL AT|<LAT>|BRACKET LEFT|


  +----------------------------------------------------------+
  ! OCT  DEC ! ASCII ! КОИ-7Н2 !! OCT  DEC ! ASCII ! КОИ-7Н2 !
  !----------!-------!---------!!----------!-------!---------!
  ! 000  000 !  NUL  !   NUL   !! 100  064 !   @   !    @    !
  ! 001  001 !  SON  !   SON   !! 101  065 !   A   !    A    !
  ! 002  002 !  STX  !   STX   !! 102  066 !   B   !    B    !
  ! 003  003 !  ETX  !   ETX   !! 103  067 !   C   !    C    !
  ! 004  004 !  EOT  !   EOT   !! 104  068 !   D   !    D    !


                                     - 322 -
           RT-11, A step by step              Appendix 1  14-Nov-92


  ! 005  005 !  ENQ  !   ENQ   !! 105  069 !   E   !    E    !
  ! 006  006 !  ACK  !   ACK   !! 106  070 !   F   !    F    !
  ! 007  007 !  BEL  !   BEL   !! 107  071 !   G   !    G    !
  ! 010  008 !  BS   !   ВШ    !! 110  072 !   H   !    H    !
  ! 011  009 !  HT   !   ГТ    !! 111  073 !   I   !    I    !
  ! 012  010 !  LF   !   ПС    !! 112  074 !   J   !    J    !
  ! 013  011 !  VT   !   ВТ    !! 113  075 !   K   !    K    !
  ! 014  012 !  FF   !   ПФ    !! 114  076 !   L   !    L    !
  ! 015  013 !  CR   !   ВК    !! 115  077 !   M   !    M    !
  ! 016  014 !  SO   !   РУС   !! 116  078 !   N   !    N    !
  ! 017  015 !  SI   !   ЛАТ   !! 117  079 !   O   !    O    !
  ! 020  016 !  DLE  !   DLE   !! 120  080 !   P   !    P    !
  ! 021  017 !  DC1  !   СУ1   !! 121  081 !   Q   !    Q    !
  ! 022  018 !  DC2  !   СУ2   !! 122  082 !   R   !    R    !
  ! 023  019 !  DC3  !   СУ3   !! 123  083 !   S   !    S    !
  ! 024  020 !  DC4  !   СУ4   !! 124  084 !   T   !    T    !
  ! 025  021 !  NAK  !   NAK   !! 125  085 !   U   !    U    !
  ! 026  022 !  SYN  !   SYN   !! 126  086 !   V   !    V    !
  ! 027  023 !  ETB  !   ETB   !! 127  087 !   W   !    W    !
  ! 030  024 !  CAN  !   CAN   !! 130  088 !   X   !    X    !
  ! 031  025 !  EM   !   EM    !! 131  089 !   Y   !    Y    !
  ! 032  026 !  SUB  !   SUB   !! 132  090 !   Z   !    Z    !
  ! 033  027 !  ESC  !   АР2   !! 133  091 !   [   !    [    !
  ! 034  028 !  FS   !   FS    !! 134  092 !   \   !    \    !
  ! 035  029 !  GS   !   GS    !! 135  093 !   ]   !    ]    !
  ! 036  030 !  RS   !   RS    !! 136  094 !   ^   !    ^    !
  ! 037  031 !  US   !   US    !! 137  095 !   _   !    _    !
  ! 040  032 ! SPACE ! ПРОБЕЛ  !! 140  096 !   `   !    Ю    !
  ! 041  033 !   !   !    !    !! 141  097 !   a   !    А    !
  ! 042  034 !   "   !    "    !! 142  098 !   b   !    Б    !
  ! 043  035 !   #   !    #    !! 143  099 !   c   !    Ц    !
  ! 044  036 !   $   !    $    !! 144  100 !   d   !    Д    !
  ! 045  037 !   %   !    %    !! 145  101 !   e   !    Е    !
  ! 046  038 !   &   !    &    !! 146  102 !   f   !    Ф    !
  ! 047  039 !   '   !    '    !! 147  103 !   g   !    Г    !
  ! 050  040 !   (   !    (    !! 150  104 !   h   !    Х    !
  ! 051  041 !   )   !    )    !! 151  105 !   i   !    И    !
  ! 052  042 !   *   !    *    !! 152  106 !   j   !    Й    !
  ! 053  043 !   +   !    +    !! 153  107 !   k   !    К    !
  ! 054  044 !   ,   !    ,    !! 154  108 !   l   !    Л    !
  ! 055  045 !   -   !    -    !! 155  109 !   m   !    М    !
  ! 056  046 !   .   !    .    !! 156  110 !   n   !    Н    !
  ! 057  047 !   /   !    /    !! 157  111 !   o   !    О    !
  ! 060  048 !   0   !    0    !! 160  112 !   p   !    П    !
  ! 061  049 !   1   !    1    !! 161  113 !   q   !    Я    !
  ! 062  050 !   2   !    2    !! 162  114 !   r   !    Р    !
  ! 063  051 !   3   !    3    !! 163  115 !   s   !    С    !
  ! 064  052 !   4   !    4    !! 164  116 !   t   !    Т    !
  ! 065  053 !   5   !    5    !! 165  117 !   u   !    У    !
  ! 066  054 !   6   !    6    !! 166  118 !   v   !    Ж    !
  ! 067  055 !   7   !    7    !! 167  119 !   w   !    В    !
  ! 070  056 !   8   !    8    !! 170  120 !   x   !    Ь    !
  ! 071  057 !   9   !    9    !! 171  121 !   y   !    Ы    !
  ! 072  058 !   :   !    :    !! 172  122 !   z   !    З    !
  ! 073  059 !   ;   !    ;    !! 173  123 !   {   !    Ш    !
  ! 074  060 !   <   !    <    !! 174  124 !   |   !    Э    !
  ! 075  061 !   =   !    =    !! 175  125 !   }   !    Щ    !
  ! 076  062 !   >   !    >    !! 176  126 !   ~   !    Ч    !
  ! 077  063 !   ?   !    ?    !! 177  127 !  DEL  !   DEL   !
  +----------+-------+---------++----------+-------+---------+


                                     - 324 -
           RT-11, A step by step              Appendix 2  14-Nov-92


                                                                  Приложение 2




                             Стандартные типы файлов




  .BAD
     - файлы, содержащие плохие блоки. Создаются при инициализации  каталога,
       если была указана проверка тома на плохие блоки. Этот тип может  также
       применяться пользователем, если он заметил, что при  работе  с  файлом
       возникают ошибки. Система не перемещает и не производит никаких опера-
       ций с файлами, имеющими тип .BAD. Для удаления записи о файле с  типом
       .BAD нужно указать спецификацию полностью.

  .BAK
     - запасной файл редакторов текстов. Содержит предыдущую версию текста.

  .BAS
     - исходный текст программы на языке BASIC. Входной файл для  интерпрета-
       тора BASIC.

  .BAT
     - командный файл программы пакетной обработки BATCH.

  .CND
     - файл условий, созданный при генерации системы. Применяется для  после-
       дующей трансляции монитора и драйверов.

  .COM
     - файл непрямых команд. Текстовой файл, содержащий команды KMON или IND,
       подлежащие выполнению в автоматическом режиме. Используется как  вход-
       ной файл для программы IND.

  .CTL
     - "ConTroL" - управляющий файл для программы пакетной  обработки  BATCH,
       сгенерированный BATCH-компилятором.

  .CTT
     - внешний вспомогательный файл для программы пакетной обработки BATCH.

  .DAT
     - файл данных для программ на языках BASIC, FORTRAN и  др.,  или  вообще
       файл, содержащий произвольные данные.

  .DBL
     - исходный текст программы на языке DIBOL. Входной файл для  компилятора
       DIBOL.

  .DDF
     - "Dibol Data File" - файл данных  для  программ,  написанных  на  языке
       DIBOL.

  .DIF
     - файл различий текстовых файлов, генерируемый программой SRCCOM.


                                     - 325 -
           RT-11, A step by step              Appendix 2  14-Nov-92


  .DIR
     - файл листинга каталога создается программой DIR.

  .DMP
     - выходной файл программы DUMP.

  .FOR
     - исходный текст программы на языке FORTRAN-IV. Входной файл для  компи-
       лятора FORTRA.SAV.

  .F77
     - исходный текст программы на языке FORTRAN-77. Входной файл для  компи-
       лятора F77.

  .LDA
     - "LoaD Absolute" - файл, загружаемый в абсолютные адреса памяти.

  .LOG
     - файл протокола программы BATCH.

  .LSP
     - исходный текст программы на языке LISP. Входной файл  для  транслятора
       LISP.

  .LST
     - файл листинга, генерируемый программами MACRO, FORTRA, LIBR или DIBOL.

  .MAC
     - исходный текст программы на языке MAKRO-11. Входной файл для  программ
       MACRO, LIBR, SRCCOM.

  .MAP
     - карта распределения памяти. Выходной файл программы LINK.

  .OBJ
     - перемещаемый двоичный (объектный)  файл.  Выходной  файл  компиляторов
       MACRO-11, FORTRAN, F77, PASCAL и др., а также  программы  библиотекаря
       LIBR. Входной файл для программ LINK, LIBR.

  .REL
     - Перемещаемый файл для оперативного или  системного  задания;  выходной
       файл программы LINK; тип по умолчанию для команд монитора FRUN и SRUN.

  .SAV
     - файл в формате отображения памяти; тип по умолчанию для команд монито-
       ра R, RUN, SAVE и GET, а также для выходного файла программы LINK.

  .SML
     - "System Macro Library" - файл системной макробиблиотеки.

  .SLP
     - командный файл для программы коррекции двоичных файлов SLP.

  .SOU
     - временный исходный файл, генерируемый программой BATCH.

  .STB
     - "Simbol TaBle" - таблица символов программы в объектном формате, гене-
       рируемая программой LINK.


                                     - 326 -
           RT-11, A step by step              Appendix 2  14-Nov-92


  .SYS
     - системные файлы - монитор, драйверы и файлы системных заданий.

  .TMP
     - временный файл программы ERROUT, рабочий файл программы QUEUE.

  .TXT
     - текстовой файл.

  .TEC
     - входной командный файл текстового редактора TECO.SAV.

  .DOC
     - входной файл для форматора текстов DOC.SAV, выходной файл для формато-
       ра текстов RUNOFF.SAV.

  .B2S
     - входной файл для интерпретатора BASIC-2/PLUS.

  .CBL
     - входной файл для компилятора с языка COBOL.

  .FTN
     - входной файл для компилятора с языка FORTRAN-IV в OC RSX-11.

  .PAS
     - входной файл для компилятора с языка PASCAL.

  .CMD
     - файл непрямых команд в RSX-11. Соответствует по  содержанию  файлам  с
       типом .COM в RT-11.

  .RNO
     - входной файл для форматора текстов RUNOFF.

  .BIN
     - рабочий (загрузочный) файл программ в тест -  мониторной  операционной
       системе (TMOS).

  .MLB
     - файл макробиблиотеки пользователя.

  .BLD
     - основной командный файл построения операционной системы  RT-11,  полу-
       ченный в результате генерации.

  .MON
     - командный файл посторения  монитора  RT-11,  полученный  в  результате
       генерации.

  .DEV
     - командный файл построения драйверов ОС RT-11, полученный в  результате
       генерации.

  .SYG
     - системные программы  OC  RT-11  (монитор  и  драйверы),  полученные  в
       результате генерации и  предназначенные  для  последующего  построения
       системы.


                                     - 327 -
           RT-11, A step by step              Appendix 2  14-Nov-92


  .DPR
     - "Document PRinter" - выходной файл форматора текстов DOC.SAV.

  .C
     - входной файл компилятора с языка "C".

  .PRS
     - входной файл для форматора текста PROSA фирмы OREGON COMPUTER SYSTEM.



                                     - 328 -
           RT-11, A step by step              Appendix 3  14-Nov-92


                                                                  Приложение 3




                           Необходимые дампы программ




   DX0:DUMP.SAV
   BLOCK NUMBER  000000
  000/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  020/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  040/ 004106 001000 000000 000000 007754 000000 000000 000000 *F.......l......
  060/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  100/ 000000 000000 000000 000000 107123 000003 177777 000000 *........S......
  120/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  140/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  160/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  200/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  220/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  240/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  260/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  300/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  320/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  340/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  360/ 000377 000000 000000 000000 000000 000000 000000 000000 *...............
  400/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  420/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  440/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  460/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  500/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  520/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  540/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  560/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  600/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  620/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  640/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  660/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  700/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  720/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  740/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  760/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............


  BLOCK NUMBER  000001
  000/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  020/ 000000 000000 000000 000000 000000 000000 000000 052001 *...............
  040/ 043401 047001 053401 054001 041001 042777 051777 067516 *.G.N.W.X.B.E.SN
  060/ 046040 000120 067111 060566 064554 020144 070157 064564 * LP.Invalid opt
  100/ 067157 020072 000057 047400 072165 072560 020164 071145 *on: /..Output e
  120/ 067562 020162 044600 070156 072165 062440 071162 071157 *ror .Input erro
  140/ 100040 067111 072563 063146 061551 062551 072156 066440 * .Insufficient
  160/ 066545 071157 000171 067111 060566 064554 020144 067543 *emory.Invalid c
  200/ 066555 067141 000144 064506 062554 067440 020162 067151 *mmand.File or i
  220/ 072560 020164 062544 064566 062543 067040 072157 063040 *put device not
  240/ 072557 062156 052400 062556 070170 061545 062564 020144 *ound.Unexpected
  260/ 047505 020106 037600 052504 050115 053455 043055 066151 *EOF .?DUMP-W-Fi


                                     - 329 -
           RT-11, A step by step              Appendix 3  14-Nov-92


  300/ 020145 071143 060545 062564 020144 020072 071160 072157 *e created : pro
  320/ 061545 062564 020144 064546 062554 060440 071154 060545 *ected file alre
  340/ 074544 062440 064570 072163 020163 050200 067562 062564 *dy exists .Prot
  360/ 072143 062145 063040 066151 020145 066141 062562 062141 *cted file alrea
  400/ 020171 074145 071551 071564 100040 062504 064566 062543 *y exists .Devic
  420/ 063040 066165 020154 037600 052504 050115 053455 053455 * full .?DUMP-W-
  440/ 067562 063556 073040 071145 064563 067157 067440 020146 *rong version of
  460/ 052122 030455 000061 042077 046525 026520 026506 000200 *RT-11.?DUMP-F-.
  500/ 000000 015430 000000 000000 046600 010011 005435 002522 *.........M....R
  520/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  540/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  560/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  600/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  620/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  640/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  660/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  700/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  720/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  740/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  760/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............


   BLOCK NUMBER  000002
  000/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  020/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  040/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  060/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  100/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  120/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  140/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  160/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  200/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  220/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  240/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  260/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  300/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  320/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  340/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  360/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  400/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  420/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  440/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  460/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  500/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  520/ 001520 000000 000000 000000 000000 000000 000000 000000 *P..............
  540/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  560/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  600/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  620/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  640/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  660/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  700/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  720/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  740/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............


                                     - 330 -
           RT-11, A step by step              Appendix 3  14-Nov-92


  760/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............


   BLOCK NUMBER  000003
  000/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  020/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  040/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  060/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  100/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  120/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  140/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  160/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  200/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  220/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  240/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  260/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  300/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  320/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  340/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  360/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  400/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  420/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  440/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  460/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  500/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  520/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  540/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  560/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  600/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  620/ 000000 000000 000000 000000 041014 047514 045503 047040 *.........BLOCK
  640/ 046525 042502 020122 000040 000000 000000 000000 000000 *UMBER  ........
  660/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  700/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  720/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  740/ 000000 000000 006452 000012 000057 025040 020000 020040 *....*.../. *.
  760/ 020040 005000 025015 025052 020052 040524 042520 046440 *  ...**** TAPE


   BLOCK NUMBER  000004
  000/ 051101 020113 025052 025052 042000 046525 020120 030126 *ARK ****.DUMP V
  020/ 027065 031460 000040 000000 000400 000000 000000 000000 *5.03 ..........
  040/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  060/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  100/ 000000 000000 000400 013706 000042 012700 003564 012710 *......F.".@.t.H
  120/ 016000 012760 000276 000002 104375 042700 177400 020027 *..p.>...}.@E...
  140/ 000005 002006 005002 004567 003316 001427 005000 104350 *......w.N.....h
  160/ 005067 003570 104352 012746 003600 012700 000001 104353 *7.x.j.f...@...k
  200/ 105067 177626 105067 177417 004367 002406 004767 003374 *7...7...w...w.|
  220/ 104355 012746 007754 012746 001500 012746 007754 104344 *m.f.l.f.@.f.l.d
  240/ 103033 113700 000052 001004 005002 004567 003212 001166 *..@.*.....w...v
  260/ 122700 000002 001005 012702 004034 004567 003172 001353 *@%....B...w.z.k
  300/ 122700 000003 001005 012702 004034 004567 003152 001412 *@%....B...w.j..
  320/ 005002 004567 003142 001206 105067 177474 010002 013700 *..w.b...7.<...@
  340/ 000054 016000 000266 005740 104354 005720 010067 174420 *,...6.`.l.P.7..
  360/ 012700 000001 104374 103404 005002 004567 003072 001166 *@...|.....w.:.v
  400/ 012700 000002 104374 103404 005002 004567 003052 001166 *@...|.....w.*.v
  420/ 012700 000004 104374 103404 005002 004567 003032 001166 *@...|.....w...v
  440/ 012700 000003 104374 103012 005716 001404 005002 004567 *@...|...N.....w
  460/ 003006 001206 012700 004011 104351 000605 012700 000000 *....@...i...@..


                                     - 331 -
           RT-11, A step by step              Appendix 3  14-Nov-92


  500/ 104374 103031 012700 001510 010246 104343 103004 005002 *|...@.H.&.c....
  520/ 004567 002744 001056 010002 012700 003554 012710 000400 *w.d.....@.l.H..
  540/ 012760 001510 000002 005060 000004 104375 103004 005002 *p.H...0...}....
  560/ 004567 002704 001056 012703 001000 012301 010223 160201 *w.D...C...A....
  600/ 020127 001000 101004 005002 004567 002654 001142 012723 *W ......w.,.b.S
  620/ 000001 012700 000013 005023 005300 001375 012767 177776 *..@.....@.}.w.~
  640/ 174146 004767 002076 012605 005305 100002 000167 000442 *fxw.>...E...w."
  660/ 012703 001006 012702 001056 121627 000117 001004 016613 *C...B....#O....
  700/ 000002 112716 000105 124216 001412 005723 105742 001373 *..N.E..(..S.b.{
  720/ 012602 110267 174157 005002 004567 002534 001064 005726 *..7.ox..w.\.4.V
  740/ 100404 114200 100765 010013 000737 105742 100361 012613 *....u..._.b.q..
  760/ 000733 105737 000052 001412 005767 174026 001402 000167 *[._.*...w..x..w


   BLOCK NUMBER  000005
  000/ 000566 012702 004052 004567 002456 001125 026727 176606 *v.B.*.w...U.W-.
  020/ 000002 103442 005267 173760 105767 176775 100404 004312 *..".7.pww.}}..J
  040/ 003763 004312 003745 105067 176757 126727 176550 000004 *s.J.e.7.o}W-h}.
  060/ 101023 105767 176744 001420 005767 173730 001007 105767 *..w.d}..w.Xw..w
  100/ 176724 100547 105767 176717 100401 000543 105267 176710 *T}g.w.O}..c.7.H
  120/ 126727 176704 000002 001135 016703 001324 020327 177000 *W-D}..].C.T.W .
  140/ 001405 105024 005203 001375 004767 001310 012700 000000 *......}.w.H.@..
  160/ 104374 012700 003000 104374 103011 122737 000003 000052 *|.@...|..._%..*
  200/ 001005 012702 004034 004567 002256 001265 012700 003003 *..B...w...5.@..
  220/ 104374 103011 122737 000003 000052 001005 012702 004052 *|..._%..*...B.*
  240/ 004567 002224 001265 026767 173534 176350 001005 012702 *w...5.w-\wh|..B
  260/ 004052 004567 002202 001245 012700 004070 005046 104343 **.w...%.@.8.&.c
  300/ 012700 004072 005046 104343 012700 007754 104354 000167 *@.:.&.c.@.l.l.w
  320/ 176564 004767 002002 004767 001710 012704 001520 012767 *t}w...w.H.D.P.w
  340/ 177000 001114 016767 173440 176150 012703 001006 162313 *.~L.w. wh|C...K
  360/ 103007 005002 112767 000123 173513 004567 002072 001064 *....w.S.Kww.:.4
  400/ 016767 173402 176216 005213 012702 006604 012767 003650 *w..w.|..B...w.(
  420/ 000542 012703 001002 012305 012301 012300 020113 101405 *b.C...E.A.@.K .
  440/ 105767 176365 100404 011301 001627 160113 000402 012701 *w.u|..A...K`..A
  460/ 000001 000301 012700 003524 012710 004003 016760 173306 *..A.@.T.H...p.F
  500/ 000002 010560 000004 010160 000006 005060 000010 104375 *..p...p...0...}
  520/ 103002 000167 177234 004767 001416 105067 176272 105067 *..w..~w...7.:|7
  540/ 176267 013746 000054 062716 000042 017616 000000 032726 *7|f.,.Ne".....V
  560/ 020000 001402 000167 177256 010067 000332 010500 166700 *. ..w..~7.Z.@.@
  600/ 173200 042700 177000 001553 004367 000434 000003 004312 *.v@E.~k.w.....J
  620/ 003750 012703 000020 005767 173160 001403 005767 173156 *h.C...w.pv..w.n
  640/ 001443 006203 004312 003761 012500 004367 000372 000006 *#...J.q.@.w.z..
  660/ 005767 173126 001402 004312 003761 005303 001363 012703 *w.Vv..J.q.C.s.C
  700/ 000020 160305 005767 173102 001013 005767 173102 001045 *..E`w.Bv..w.Bv%
  720/ 004312 003752 004767 000466 001375 004312 003744 000440 *J.j.w.6.}.J.d.
  740/ 004312 003745 004312 003756 004312 003761 112500 042700 *J.e.J.n.J.q.@.@
  760/ 177400 004367 000262 000003 005303 001366 004312 003745 *..w.2...C.v.J.e


   BLOCK NUMBER  000006
  000/ 005767 173014 001015 012703 000020 160305 004312 003760 *w..v..C...E`J.p
  020/ 004312 003757 004767 000366 001373 060305 004312 003745 *J.o.w.v.{.E`J.e
  040/ 005767 172750 001426 012703 000010 162705 000020 005767 *w.hu..C...Ee..w
  060/ 172730 001002 004312 003761 012701 003756 166701 172712 *Xu..J.q.A.n.AmJ
  100/ 004367 000502 012500 004767 000202 005303 001365 004312 *w.B.@.w...C.u.J
  120/ 003745 162727 000010 000000 101221 000167 177264 005767 *e.We......w.4~w
  140/ 172650 001003 005767 172644 001404 004312 003745 004312 *(u..w.$u..J.e.J
  160/ 003745 004312 000000 016700 172614 005267 172610 004367 *e.J...@..u7..uw
  200/ 000046 000006 004312 003745 005767 172576 001010 005767 *&...J.e.w.~u..w


                                     - 332 -
           RT-11, A step by step              Appendix 3  14-Nov-92


  220/ 172572 001005 005000 012767 003630 177730 000403 012767 *zu....w...X...w
  240/ 003631 177720 000167 177340 012301 005046 010046 042716 *..P.w.`~A.&.&.N
  260/ 177770 052716 000060 000241 006000 006200 006200 005301 *x.NU0.!.......A
  300/ 001365 012600 001545 004767 000142 000773 012701 006414 *u...e.w.b.{.A..
  320/ 010046 005000 021611 103403 161116 005200 000773 105700 *&....#..Nb..{.@
  340/ 001406 120027 000033 001407 003004 062700 000040 062700 *... ......@e .@
  360/ 000016 062700 000011 062700 000011 004767 000056 005741 *..@e..@e..w...a
  400/ 001350 005726 000207 000000 000001 000050 003100 112500 *h.V.......(.@.@
  420/ 042700 177600 022700 000177 001403 020027 000040 002002 *@E..@%.....  ..
  440/ 012700 000056 004767 000004 005303 000207 110024 005227 *@...w...C......
  460/ 000000 001047 162704 001000 012700 000000 104374 103005 *..'.De..@...|..
  500/ 012702 004034 004567 000760 001107 012700 003540 012710 *B...w.p.G.@.`.H
  520/ 004400 016760 172300 000002 010460 000004 012760 000400 *..p.@t..0...p..
  540/ 000006 012760 000001 000010 104375 103005 012702 004034 *..p.....}...B..
  560/ 004567 000704 001107 005267 172234 012767 177000 177660 *w.D.G.7..tw..~0
  600/ 014404 000207 012301 112100 001403 004767 177636 000773 *....A.@...w...{
  620/ 000203 104355 012746 007754 012746 010063 012746 001500 *..m.f.l.f.3.f.@
  640/ 005046 104345 103004 005002 004567 000614 001166 005767 *&.e.....w...v.w
  660/ 001200 001006 005767 001230 001003 112767 177777 174727 *....w.....w...W
  700/ 012701 010122 005721 001007 005721 001005 005721 001003 *A.R.Q...Q...Q..
  720/ 112767 000001 175104 016767 001130 175136 016767 001160 *w...Dzw.X.^zw.p
  740/ 175126 000203 012701 000004 112767 000002 174650 012703 *Vz..A...w...(yC
  760/ 001512 012700 004070 012746 004074 104342 122367 175074 *J.@.8.f.<.b.w$<


   BLOCK NUMBER  000007
  000/ 001003 005767 175072 001057 105267 174612 005301 001366 *..w.:z/.7..yA.v
  020/ 105067 174602 016767 175052 171776 032767 000400 175034 *7..yw.*z~sw5...
  040/ 001442 012700 003564 012710 015003 005060 000002 012760 *".@.t.H...0...p
  060/ 001032 000004 012760 000001 000006 012760 175777 000010 *....p.....p..{.
  100/ 005060 000012 104375 103014 105737 000052 001005 012702 *0...}..._.*...B
  120/ 004052 004567 000342 001245 005002 004567 000332 001166 **.w.b.%...w.Z.v
  140/ 016767 171666 171662 000207 022715 042110 001004 122765 *w.6s2s..M%HD..u
  160/ 000122 000002 001412 022715 047505 001004 122765 000106 *R.....M%EO..u%F
  200/ 000002 001411 105067 174620 000207 112767 177777 174606 *....7..y..w....
  220/ 105067 174603 000207 112767 177777 174573 105067 174566 *7..y..w...{y7.v
  240/ 000207 005767 174360 001027 005767 174556 001424 022767 *..w.px..w.ny..w
  260/ 177776 171524 001413 026767 171516 171534 103414 005002 *~.Ts..w-Ns\s...
  300/ 112767 000105 171577 004567 000156 001064 016767 171510 *w.E..sw.n.4.w.H
  320/ 171466 005367 171462 000207 016705 171446 136727 174266 *6sw.2s..E.&sW=6
  340/ 000002 001451 105767 174462 001446 005767 171430 001443 *..).w.2y&.w..s#
  360/ 005002 012700 003524 012710 004003 010560 000004 012760 *..@.T.H...p...p
  400/ 000400 000006 005060 000010 104375 103013 105737 000052 *....0...}..._.*
  420/ 001760 005767 171374 001005 012702 004052 004567 000030 *p.w.|r..B.*.w..
  440/ 001125 005202 020267 171340 001403 020267 171330 001341 *U...7 `r..7 Xra
  460/ 112767 177777 174343 000207 104355 022715 001265 001403 *w...cx..m.M%5..
  500/ 022715 001427 001012 012500 104351 005702 001402 010200 *M%....@.i.B....
  520/ 104351 152737 000002 000053 000205 012700 001466 104351 *i._U..+...@.6.i
  540/ 012500 104351 005702 001402 010200 104351 152737 000010 *@.i.B.....i._U.
  560/ 000053 012700 004070 005046 104343 012700 004072 005046 *+.@.8.&.c.@.:.&
  600/ 104343 012700 007754 104354 000167 174272 012701 003650 *c.@.l.l.w.:xA.(
  620/ 012701 007754 012703 004034 121127 000000 001406 111123 *A.l.C...W"....S
  640/ 122127 000075 001371 105043 000405 012701 007754 012703 *W$=.y.#...A.l.C
  660/ 004034 005013 012702 003650 012703 004052 005004 105711 *....B.(.C.*...I
  700/ 001412 126711 174042 001001 005204 111122 005704 001001 *..I-"x....R.D..
  720/ 111123 105721 001364 105013 112722 000015 112722 000012 *S.Q.t...R...R..
  740/ 012701 003631 112122 001376 105012 000207 007756 000000 *A...R.~.....n..


                                     - 333 -
           RT-11, A step by step              Appendix 3  14-Nov-92


  760/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............



   DX0:RT11SJ.SYS/O:36
   BLOCK NUMBER  000036
  000/ 000167 016262 000000 000000 000000 000000 000000 000000 *w.2............
  020/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  040/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  060/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  100/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  120/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  140/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  160/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  200/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  220/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  240/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  260/ 000000 000000 000000 031000 055320 000000 000000 016405 *.......2PZ.....
  300/ 000000 000000 177560 177562 177564 177566 177777 005430 *!...p.r.t.v....
  320/ 042326 000000 055602 036377 170017 000303 000000 000000 *VD...[.<.pC....
  340/ 000060 000000 000000 000000 000000 031000 000320 000000 *0..........2P..
  360/ 000462 000447 000002 000000 000000 003404 010000 001434 *2.'............
  400/ 004666 017074 001040 071677 141262 000000 000000 000000 *6.<. .?s2B.....
  420/ 000000 014726 044376 044364 000466 000000 177400 000000 *..V.~HtH6......
  440/ 000000 000000 164000 000000 011000 014000 000000 011000 *.....h.........
  460/ 000000 000000 000000 000000 041466 043016 000001 103225 *........6C.F...
  500/ 000001 013746 177776 105066 000001 016646 000002 016666 *..f.~.6...&...6
  520/ 000002 000004 000403 116637 000002 177776 012616 000207 *..........~....
  540/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  560/ 000000 000000 004000 000000 000000 174000 000000 000000 *...........x...
  600/ 000000 000000 000000 004050 016266 017074 000000 000000 *......(.6.<....
  620/ 000000 000000 000000 000000 041000 000000 000000 000000 *.........B.....
  640/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  660/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  700/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  720/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  740/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  760/ 000000 000000 000000 000000 000000 015326 075306 000000 *..........V.Fz.


  DX0:DX.SYS
  BLOCK NUMBER  000000
  000/ 031066 000000 000000 000000 000000 000000 000000 000000 *62.............
  020/ 000404 174340 000000 000000 000000 000000 000000 000000 *..`x...........
  040/ 000001 001000 000000 000000 003002 001004 000756 102022 *............n..
  060/ 000000 002004 001000 000224 000000 000000 000000 000000 *...............
  100/ 000000 000000 000000 000000 107123 000010 177777 000000 *........S......
  120/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  140/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  160/ 000000 000000 000000 000000 000000 000000 177170 177170 *............x~x
  200/ 000240 032777 004000 177766 001557 000557 010700 062700 * ..5..v.o.o.@.@
  220/ 000036 010746 062716 000021 104342 103547 016701 000010 *..f.Ne..b.g.A..
  240/ 001143 000543 000000 000000 000000 000000 016300 004017 *c.c.........@..
  260/ 000000 000000 000400 000000 010700 062700 000524 060300 *........@.@eT.@
  300/ 112710 000000 004767 177704 103517 023701 000054 101003 *H...w.D.O.A',..
  320/ 012761 100000 000064 060301 116761 177746 000010 000504 *q...4.A`q.f...D
  340/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  360/ 000360 000000 000000 000000 000000 000000 000000 000000 *p..............
  400/ 160000 012712 000000 060021 000500 105113 077552 060076 *.`J....`@.K.j.>


                                     - 334 -
           RT-11, A step by step              Appendix 3  14-Nov-92


  420/ 000010 070534 072150 040106 000001 111231 076710 100114 *..\qhtF@....H}L
  440/ 000000 020003 103442 010067 177524 010701 062701 177606 *... ".7.T.A.Ae.
  460/ 010702 062702 000316 010211 012741 000002 005741 010003 *B.BeN...a...a..
  500/ 010100 104375 103422 010362 000126 010100 105260 000001 *@.}...r.V.@.0..
  520/ 104375 103415 010100 105360 000001 012760 000001 000002 *}...@.p...p....
  540/ 104375 103403 010367 000702 005727 000261 000207 011600 *}...w.B.W.1....
  560/ 005200 122720 000001 001371 010016 000767 020003 103365 *..P%..y...w.. u
  600/ 032700 000003 001362 010067 000166 000756 020003 101355 *@5..r.7.v.n.. m
  620/ 010067 000176 001351 000751 000240 005003 010367 177442 *7.~.i.i. ...w."
  640/ 010103 020327 000001 101341 000167 177414 000000 000000 *C.W ..a.w......
  660/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  700/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  720/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  740/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  760/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............


  BLOCK NUMBER  000001
  000/ 000264 000422 000340 000000 000000 000240 000401 000000 *4...`..... ....
  020/ 012727 000010 000000 016703 177756 012305 012704 000007 *W.....C.n.E.D..
  040/ 112301 112300 106200 103002 052704 000020 132700 000003 *A.@.....DU..@5.
  060/ 001153 012300 012302 100017 006327 000000 103412 005046 *k.@.B...W.....&
  100/ 116316 177773 042716 177774 060716 062716 177704 105736 *N.{.NE|.NaNeD.^
  120/ 001133 124444 005402 006301 060701 066104 000634 010467 *[.$)..A.AaDl..7
  140/ 000300 100435 110267 000443 105367 000437 006302 006305 *@...7.#.w...B.E
  160/ 006305 012704 163371 022705 006400 101002 062705 171400 *E.D.yfE%....Ee.
  200/ 006105 105204 003770 110501 060405 010104 006301 060401 *E...x.A..aD.A..
  220/ 006301 162701 000032 003375 010167 000112 000405 000305 *A.Ae..}.w.J...E
  240/ 150205 012702 000200 005020 010027 000000 010567 000120 *.PB.........w.P
  260/ 010227 000000 012767 100000 000172 016704 000154 000441 *....w...z.D.l.!
  300/ 032700 000002 001005 004067 000364 000001 112215 010115 *@5....7.t.....M
  320/ 116702 000055 003014 162702 177762 003003 062702 000014 *B.-...Ber...Be.
  340/ 000261 006102 062702 000000 003002 062702 000032 010014 *1.B.Be....Be...
  360/ 105714 001776 100133 110215 105714 001776 100127 112715 *L.~.[...L.~.W.M
  400/ 000000 052714 000100 000207 016704 177374 052754 000001 *..LU@...D.|~lU.
  420/ 000476 000506 004577 000350 000100 004577 000344 000332 *>.F...h.@...d.Z
  440/ 012700 000000 012703 000200 012704 177170 010405 005725 *@...C...D.x~..U
  460/ 100475 006327 000000 103704 032700 000002 001415 005700 *=.W...D.@5....@
  500/ 100006 032715 000100 001403 016702 177536 005242 004067 *..M5@...B.^.".7
  520/ 000154 000003 111522 011502 105267 177645 001012 062767 *l...R.B.7.%...w
  540/ 163001 177634 062767 000006 177574 003403 162767 000032 *.f..we..|...we.
  560/ 177564 060367 177464 160367 177470 101242 005067 177462 *t.w`4.w`8.".7.2
  600/ 032700 100002 001004 062727 040000 000000 103234 005077 *@5....We.@....?
  620/ 177630 010704 062704 177164 013705 000054 000175 000270 *..D.Det~E.,.}.8
  640/ 012777 040000 177604 005067 000120 000763 005367 177144 *...@..7.P.s.w.d
  660/ 003002 000167 177522 012714 040000 000167 177366 012014 *..w.R.L..@w.v~.
  700/ 012067 000030 012067 000042 016701 177346 001413 020103 *7...7.".A.f~..C
  720/ 101401 010301 016702 177322 105714 100376 000000 105714 *..A.B.R~L.~...L
  740/ 105301 001372 105714 003003 001775 000000 000773 000200 *A.z.L...}...{..
  760/ 100006 077776 100000 000000 000000 000000 000000 000000 *..~............


  BLOCK NUMBER  000002
  000/ 000000 000000 000240 000413 000000 000000 000000 000000 *.... ..........
  020/ 000120 000340 000070 000340 000000 041420 116020 000400 *P.`.8.`....C...
  040/ 116067 000056 000066 011706 012702 000200 005000 000446 *7...6.F.B.....&
  060/ 000000 013407 000000 000000 000000 000000 005714 001776 *............L.~
  100/ 100762 000002 000000 000000 000000 000000 000000 000000 *r..............
  120/ 000000 000000 012704 177170 010405 012725 000000 000004 *....D.x~..U....


                                     - 335 -
           RT-11, A step by step              Appendix 3  14-Nov-92


  140/ 010315 000004 010015 000004 012714 000003 000004 105714 *M.......L.....L
  160/ 100350 111522 005301 003372 005002 000770 010601 005200 *h.R.A.z...x....
  200/ 011703 000003 122323 000003 122323 000003 032767 000020 *C...S$..S$..w5.
  220/ 177712 001173 005000 000571 012737 000167 000150 012737 *J.{...y._.w.h._
  240/ 000214 000152 012737 000300 004730 012737 000416 000020 *..j._.@.X._....
  260/ 005037 000044 005767 000346 001405 013703 004722 116367 *..$.w.f...C.R.w
  300/ 000056 177630 006300 006300 006301 010046 010003 010004 *....@.@.A.&....
  320/ 005000 000402 162703 000027 005200 162704 000032 100372 *....Ce....De..z
  340/ 022704 177762 006103 162703 000032 100375 062703 000033 *D%r.C.Ce..}.Ce.
  360/ 000003 012600 005200 005701 003350 000207 005714 001776 *......A.h...L.~
  400/ 100533 105714 100011 111522 005301 003370 012702 000001 *[.L...R.A.x.B..
  420/ 000765 005714 100521 001775 000002 000000 000000 000000 *u.L.Q.}........
  440/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  460/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  500/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  520/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  540/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  560/ 000000 000000 000000 000000 000000 000000 000000 000000 *...............
  600/ 000000 000000 000000 000000 000000 012706 010000 010046 *..........F...&
  620/ 012700 000002 012701 002000 012702 001000 005027 000001 *@...A...B......
  640/ 004767 177364 012737 000300 004730 012737 016300 004716 *w.t~_.@.X._.@.N
  660/ 012637 004722 000137 001000 004167 000002 000753 012700 *..R._...w...k.@
  700/ 000740 012702 000722 004712 011100 004712 012700 000764 *`.B.R.J.@.J.@.t
  720/ 004712 000000 000776 105737 177564 100375 112037 177566 *J...~._.t.}...v
  740/ 001372 000207 005015 041077 047517 026524 026525 044400 *z.....?BOOT-U-.
  760/ 047457 062440 071162 071157 005015 000012 177777 177777 */O error.......



                                     - 336 -
           RT-11, A step by step              Appendix 4  14-Nov-92


                                                                  Приложение 4




                       Основной файл построения этой книги




   .MRR 69,69,62,54,46
   .MRL 3,3,9,20,23
   .SWT
   RRRRRRRRRR       TTTTTTTTTTTTTT                 1111         1111
   RRRRRRRRRRR      TTTTTTTTTTTTTT                11111        11111
   RR        RR           TT                     1111         1111
   RR         RR          TT                    11 11        11 11
   RR         RR          TT                   11  11       11  11
   RR         RR          TT                       11           11
   RR        RR           TT                       11           11
   RRRRRRRRRRR            TT       **********      11           11
   RRRRRRRRR              TT       **********      11           11
   RR    RR               TT                       11           11
   RR     RR              TT                       11           11
   RR      RR             TT                       11           11
   RR       RR            TT                       11           11
   RR        RR           TT                    11111111     11111111



                                         * * *   *   ***** ***  *   *
                                         * * *   *   *    *   * ** **
                                         * * *  * *  *    *   * * * *
                                         * * * *   * *    *   * * * *
                                         * * * ***** *    *   * *   *
                                         * * * *   * *    *   * *   *
                                         ***** *   * *     ***  *   *
                        ****       *             ++++ +++++ ++++ +++
                       *    *     * *           +       +   +    +  +
                            *    *   *          +       +   +    +  +
                         ***    *     *          +++    +   +++  +++
                            *  *********            +   +   +    +
                       *    *  *       *            +   +   +    +
                        ****   *       *        ++++    +   ++++ +
   * * *   *   *****     ++++    +       +
   * * *   *   *         +   +    +     +
   * * *  * *  *         +   +     +   +
   * * * *   * *         ++++       + +
   * * * ***** *         +   +       +
   * * * *   * *         +   +       +
   ***** *   * *         ++++        +
    ++++ +++++ ++++ +++
   +       +   +    +  +
   +       +   +    +  +
    +++    +   +++  +++
       +   +   +    +
       +   +   +    +
   ++++    +   ++++ +



                                     - 337 -
           RT-11, A step by step              Appendix 4  14-Nov-92



                                            А р х а н г е л ь с к и й
                                            А н д р е й    Германович

                          М О С К В А - 89
   .TOC
   .STL RT-11, A step by step                          01-Oct-89
   .CPY SRC:INTROD
   .RIT 01 октября 1989г
   .PAG
   .SWT





    **  *   *  **  ***** **** *   *   **
   *  * *  ** *  *   *   *    ** **  * *
   *    * * * *      *   ***  * * * *  *
   *  * **  * *  *   *   *    *   * ****
    **  *   *  **    *   **** *   * *  *



                               *   *
                               *  **
                               * * *
                               **  *
                               *   *



      ****  **    ** *     **   **  ***    ** ***** ****   ** *
      *  * *  *  * * *    *  * *  * *  *  * *   *   *     * * *
      *  * *  * *  * ***    *  *  * ***  *  *   *   ***  *  * ***
      *  * *  * *  * *  * *  * *  * *  * ****   *   *    *  * *  *
      *  *  **  *  * ***   **   **  ***  *  *   *   **** *  * ***



    или...


                     С О З Д А Й   Т Е К С Т   Э Т О Й   К Н И Г И
   .STL RT-11, A step by step          Systems World   01-Oct-89
   .COM CHAPTER 1 
   .CPY SRC:1GL01
   .TCT
   .STL RT-11, A step by step      Systems Languages   01-Oct-89
   .COM CHAPTER 2    
   .CPY SRC:1GL02
   .TCT
   .STL RT-11, A step by step              DIRectory   01-Oct-89
   .COM CHAPTER 3        
   .CPY SRC:1GL03
   .TCT
   .STL RT-11, A step by step                   DUMP   01-Oct-89
   .COM CHAPTER 4           
   .CPY SRC:1GL04


                                     - 338 -
           RT-11, A step by step              Appendix 4  14-Nov-92


   .STL RT-11, A step by step            File System   01-Oct-89
   .COM CHAPTER 5              
   .CPY SRC:1GL05
   .STL RT-11, A step by step        Phyzical Record   01-Oct-89
   .COM CHAPTER 6                
   .CPY SRC:1GL06
   .STL RT-11, A step by step                    DUP   01-Oct-89
   .COM CHAPTER 7                   
   .CPY SRC:1GL07
   .STL RT-11, A step by step                    PIP   01-Oct-89
   .COM CHAPTER 8 
   .CPY SRC:1GL08
   .STL RT-11, A step by step             EDITor text  01-Oct-89
   .COM CHAPTER 0                   
   .CPY SRC:1GL09
   .STL RT-11, A step by step          Keypad Editor   01-Oct-89
   .COM CHAPTER 10                   
   .CPY SRC:1GL10
   .STL RT-11, A step by step        Advances Editor   01-Oct-89
   .COM CHAPTER 11                   
   .CPY SRC:1GL11
   .STL RT-11, A step by step          Text Formater   01-Oct-89
   .COM CHAPTER 12                   
   .CPY SRC:1GL12
   .STL RT-11, A step by step                PATCHer   01-Oct-89
   .COM CHAPTER 13                   
   .CPY SRC:1GL13
   .STL RT-11, A step by step                   Help   01-Oct-89
   .COM CHAPTER 14                   
   .CPY SRC:1GL14
   .STL RT-11, A step by step              Appendix 1  01-Oct-89
   .COM APPENDIX 1                    
   .CPY SRC:1APN1
   .STL RT-11, A step by step              Appendix 2  01-Oct-89
   .COM APPENDIX 2                    
   .CPY SRC:1APN2
   .STL RT-11, A step by step              Appendix 3  01-Oct-89
   .COM APPENDIX 3                    
   .CPY SRC:1APN3
   .STL RT-11, A step by step              Appendix 4  01-Oct-89
   .COM APPENDIX 4                    
   .CPY SRC:1APN4
   .COM END OF FILE 
   .COM END OF FILE 
   .COM END OF FILE 
